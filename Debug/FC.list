
FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af74  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b160  0800b160  0001b160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b290  0800b290  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b290  0800b290  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b290  0800b290  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000078  0800b314  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800b314  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a89  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d13  00000000  00000000  00039b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e63e  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000d05c  00000000  00000000  0004d1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005a242  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000056bc  00000000  00000000  0005a298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b144 	.word	0x0800b144

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800b144 	.word	0x0800b144

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpun>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__aeabi_fcmpun+0x14>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d108      	bne.n	800111e <__aeabi_fcmpun+0x26>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d102      	bne.n	8001118 <__aeabi_fcmpun+0x20>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d102      	bne.n	800111e <__aeabi_fcmpun+0x26>
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	f04f 0001 	mov.w	r0, #1
 8001122:	4770      	bx	lr

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2uiz>:
 8001170:	0042      	lsls	r2, r0, #1
 8001172:	d20e      	bcs.n	8001192 <__aeabi_f2uiz+0x22>
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30b      	bcc.n	8001192 <__aeabi_f2uiz+0x22>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d409      	bmi.n	8001198 <__aeabi_f2uiz+0x28>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	4770      	bx	lr
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	4770      	bx	lr
 8001198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800119c:	d101      	bne.n	80011a2 <__aeabi_f2uiz+0x32>
 800119e:	0242      	lsls	r2, r0, #9
 80011a0:	d102      	bne.n	80011a8 <__aeabi_f2uiz+0x38>
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	4770      	bx	lr
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fa85 	bl	80046ce <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fa8e 	bl	80046fc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN9Publisher6notifyEv>:
    void notify() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 faba 	bl	8004770 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	4293      	cmp	r3, r2
 8001204:	bf34      	ite	cc
 8001206:	2301      	movcc	r3, #1
 8001208:	2300      	movcs	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01e      	beq.n	800124e <_ZN9Publisher6notifyEv+0x66>
          if( subscriber[i] != 0)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fab6 	bl	8004788 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <_ZN9Publisher6notifyEv+0x5c>
    	  	  subscriber[i]->notify();
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f003 faa8 	bl	8004788 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8001238:	4603      	mov	r3, r0
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	4790      	blx	r2
 8001242:	e000      	b.n	8001246 <_ZN9Publisher6notifyEv+0x5e>
          else
        	  continue;
 8001244:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	3301      	adds	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e7d2      	b.n	80011f4 <_ZN9Publisher6notifyEv+0xc>
      }
    }
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_ZN9PublisherC1Ev>:
struct Publisher
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fa9f 	bl	80047a4 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffeb 	bl	8001256 <_ZN9PublisherC1Ev>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffdd 	bl	8001256 <_ZN9PublisherC1Ev>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3334      	adds	r3, #52	; 0x34
 80012a0:	2234      	movs	r2, #52	; 0x34
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f009 ff01 	bl	800b0ac <memset>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3334      	adds	r3, #52	; 0x34
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ffde 	bl	8001270 <_ZN11TickUpdater7SubtickC1Ev>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	669a      	str	r2, [r3, #104]	; 0x68
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	66da      	str	r2, [r3, #108]	; 0x6c
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <_ZN11TickUpdaterC1Ev+0x44>)
 80012c2:	f003 fa79 	bl	80047b8 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000094 	.word	0x20000094

080012d4 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <HAL_IncTick+0x10>)
 80012da:	f000 f89b 	bl	8001414 <_ZN11TickUpdater9interruptEv>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000098 	.word	0x20000098

080012e8 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	f083 0301 	eor.w	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4619      	mov	r1, r3
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <_ZN14TickSubscriber9subscribeEv+0x30>)
 800130a:	f7ff ff51 	bl	80011b0 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000098 	.word	0x20000098

0800131c <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8001338:	f7ff ff48 	bl	80011cc <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000098 	.word	0x20000098

08001348 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <_ZN10SubscriberC1Ev+0x1c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	0800b22c 	.word	0x0800b22c

08001368 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffe8 	bl	8001348 <_ZN10SubscriberC1Ev>
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <_ZN14TickSubscriberC1Ev+0x20>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	0800b220 	.word	0x0800b220

0800138c <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffe6 	bl	8001368 <_ZN14TickSubscriberC1Ev>
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <_ZN5TimerC1Ev+0x2c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	711a      	strb	r2, [r3, #4]
  };
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	0800b214 	.word	0x0800b214

080013bc <_ZN5TimerC1Em>:
  Timer(uint32_t ms){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ffcd 	bl	8001368 <_ZN14TickSubscriberC1Ev>
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <_ZN5TimerC1Em+0x38>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	711a      	strb	r2, [r3, #4]
    start(ms);
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f822 	bl	800142c <_ZN5Timer5startEm>
  }
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	0800b214 	.word	0x0800b214

080013f8 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    time_passed++;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	609a      	str	r2, [r3, #8]
  }
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <_ZN11TickUpdater9interruptEv>:
    if (not(cnt++ % qty))
        call();
}

void TickUpdater::interrupt()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
//    subtick.notify();
//    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
        notify();
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fee2 	bl	80011e8 <_ZN9Publisher6notifyEv>
//    });
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	60da      	str	r2, [r3, #12]
   subscribe();
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff4f 	bl	80012e8 <_ZN14TickSubscriber9subscribeEv>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	429a      	cmp	r2, r3
 8001464:	bf2c      	ite	cs
 8001466:	2301      	movcs	r3, #1
 8001468:	2300      	movcc	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
      return (true);
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800147a:	2300      	movs	r3, #0
  }
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
   unsubscribe();
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff40 	bl	800131c <_ZN14TickSubscriber11unsubscribeEv>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	bf2c      	ite	cs
 80014b8:	2301      	movcs	r3, #1
 80014ba:	2300      	movcc	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <_ZN5Timer5startEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff08 	bl	80012e8 <_ZN14TickSubscriber9subscribeEv>
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN5Timer7isCountEv>:
bool     Timer::isCount()    { return subscribed; }
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]
    }
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4610      	mov	r0, r2
 8001526:	4798      	blx	r3
    }
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN4ADC_13adc_interruptEv>:

	uint16_t max_current_phase{20};
	uint8_t over_current_a{0};
	uint8_t over_current_c{0};

	void adc_interrupt() {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8001538:	480e      	ldr	r0, [pc, #56]	; (8001574 <_ZN4ADC_13adc_interruptEv+0x44>)
 800153a:	f004 fad5 	bl	8005ae8 <HAL_ADC_Stop_DMA>
		if (new_hv > 2200) {  // 250 ~= 96V
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001544:	f640 0298 	movw	r2, #2200	; 0x898
 8001548:	4293      	cmp	r3, r2
 800154a:	d903      	bls.n	8001554 <_ZN4ADC_13adc_interruptEv+0x24>
			error_HV = true;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		}
		new_hv = buffer[HV];
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8b9a      	ldrh	r2, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
//		h_voltage += (new_hv - h_voltage) * 1 / 4;
		h_voltage = new_hv;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000108 	.word	0x20000108

08001578 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8001580:	4862      	ldr	r0, [pc, #392]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 8001582:	f004 feb9 	bl	80062f8 <HAL_ADCEx_InjectedStop_IT>
		arr_current_S[j] = HAL_ADCEx_InjectedGetValue(&hadc2, PS);
 8001586:	2101      	movs	r1, #1
 8001588:	4860      	ldr	r0, [pc, #384]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 800158a:	f004 feff 	bl	800638c <HAL_ADCEx_InjectedGetValue>
 800158e:	4602      	mov	r2, r0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001596:	b211      	sxth	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	330c      	adds	r3, #12
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	460a      	mov	r2, r1
 80015a2:	80da      	strh	r2, [r3, #6]
		arr_current_A[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_A);
 80015a4:	2102      	movs	r1, #2
 80015a6:	4859      	ldr	r0, [pc, #356]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 80015a8:	f004 fef0 	bl	800638c <HAL_ADCEx_InjectedGetValue>
 80015ac:	4601      	mov	r1, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015b4:	461a      	mov	r2, r3
 80015b6:	b209      	sxth	r1, r1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3218      	adds	r2, #24
 80015bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		arr_current_C[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_C);
 80015c0:	2103      	movs	r1, #3
 80015c2:	4852      	ldr	r0, [pc, #328]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 80015c4:	f004 fee2 	bl	800638c <HAL_ADCEx_InjectedGetValue>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015d0:	b211      	sxth	r1, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	3320      	adds	r3, #32
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	460a      	mov	r2, r1
 80015dc:	805a      	strh	r2, [r3, #2]
//		if(abs(new_hv - h_voltage) > 150) {  // 250 ~= 96V
//			error_HV = true;
//		}
//		h_voltage += (new_hv - h_voltage) * 10 / 30;

		measure = true;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

		if(not work) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 808e 	beq.w	8001714 <_ZN4ADC_22adc_injected_interruptEv+0x19c>
			offset_I_S = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b08      	cmp	r3, #8
 8001618:	dc37      	bgt.n	800168a <_ZN4ADC_22adc_injected_interruptEv+0x112>
				offset_I_S += arr_current_S[i];
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001620:	b29a      	uxth	r2, r3
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	330c      	adds	r3, #12
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
				offset_I_A += arr_current_A[i];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001644:	b29a      	uxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	3118      	adds	r1, #24
 800164c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	b29b      	uxth	r3, r3
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
				offset_I_C += arr_current_C[i];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001664:	b29a      	uxth	r2, r3
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3320      	adds	r3, #32
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	440b      	add	r3, r1
 8001670:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b29b      	uxth	r3, r3
 800167a:	b21a      	sxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3301      	adds	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e7c4      	b.n	8001614 <_ZN4ADC_22adc_injected_interruptEv+0x9c>
			}
			offset_I_S /= (9);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1052      	asrs	r2, r2, #1
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	b21a      	sxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A /= (9);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1052      	asrs	r2, r2, #1
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C /= (9);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016c6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ca:	1052      	asrs	r2, r2, #1
 80016cc:	17db      	asrs	r3, r3, #31
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

			error_a = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

			over_current_s = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
			over_current_c = 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8001708:	e261      	b.n	8001bce <_ZN4ADC_22adc_injected_interruptEv+0x656>
 800170a:	bf00      	nop
 800170c:	20000138 	.word	0x20000138
 8001710:	38e38e39 	.word	0x38e38e39

		} else if (work) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8257 	beq.w	8001bce <_ZN4ADC_22adc_injected_interruptEv+0x656>

			arr_S[j] = abs(arr_current_S[j] - offset_I_S);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	330c      	adds	r3, #12
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001740:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800174a:	b211      	sxth	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	3344      	adds	r3, #68	; 0x44
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	460a      	mov	r2, r1
 8001756:	80da      	strh	r2, [r3, #6]
			arr_A[j] = abs(arr_current_A[j] - offset_I_A);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3218      	adds	r2, #24
 8001764:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001776:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001780:	b211      	sxth	r1, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	3358      	adds	r3, #88	; 0x58
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	460a      	mov	r2, r1
 800178c:	805a      	strh	r2, [r3, #2]
			arr_B[j] = abs(abs(arr_current_A[j] - offset_I_A) - abs(arr_current_C[j] - offset_I_C));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3218      	adds	r2, #24
 800179a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800179e:	461a      	mov	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	3320      	adds	r3, #32
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	440b      	add	r3, r1
 80017be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80017ca:	1acb      	subs	r3, r1, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bfb8      	it	lt
 80017d0:	425b      	neglt	r3, r3
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017e2:	b211      	sxth	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	460a      	mov	r2, r1
 80017ee:	809a      	strh	r2, [r3, #4]
			arr_C[j] = abs(arr_current_C[j] - offset_I_C);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	3320      	adds	r3, #32
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001810:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800181a:	461a      	mov	r2, r3
 800181c:	b209      	sxth	r1, r1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3250      	adds	r2, #80	; 0x50
 8001822:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			a = (arr_current_A[j] - offset_I_A) * 10 / 21;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3218      	adds	r2, #24
 8001832:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800183e:	1ad2      	subs	r2, r2, r3
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4ac4      	ldr	r2, [pc, #784]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 800184a:	fb82 1203 	smull	r1, r2, r2, r3
 800184e:	1092      	asrs	r2, r2, #2
 8001850:	17db      	asrs	r3, r3, #31
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b21a      	sxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			c = (arr_current_C[j] - offset_I_C) * 10 / 21;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	3320      	adds	r3, #32
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4ab6      	ldr	r2, [pc, #728]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 8001882:	fb82 1203 	smull	r1, r2, r2, r3
 8001886:	1092      	asrs	r2, r2, #2
 8001888:	17db      	asrs	r3, r3, #31
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
			b = -1 * (a + c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	425b      	negs	r3, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

//			if(abs(new_hv - h_voltage) > 250) {  // 250 ~= 96V
//				error_HV = true;
//			}

			if(arr_B[j] <= abs(offset_I_A - offset_I_C) and Km_check) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80018ce:	4619      	mov	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bfb8      	it	lt
 80018dc:	425b      	neglt	r3, r3
 80018de:	429a      	cmp	r2, r3
 80018e0:	dc15      	bgt.n	800190e <_ZN4ADC_22adc_injected_interruptEv+0x396>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d010      	beq.n	800190e <_ZN4ADC_22adc_injected_interruptEv+0x396>
				error_b++;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018f2:	3301      	adds	r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
				if(error_b > 6)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8001902:	2b06      	cmp	r3, #6
 8001904:	d903      	bls.n	800190e <_ZN4ADC_22adc_injected_interruptEv+0x396>
					error = true;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_A[j] <= 5 and Km_check) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	3358      	adds	r3, #88	; 0x58
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001920:	2b05      	cmp	r3, #5
 8001922:	dc15      	bgt.n	8001950 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800192a:	2b00      	cmp	r3, #0
 800192c:	d010      	beq.n	8001950 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
				error_a++;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001934:	3301      	adds	r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
				if (error_a > 6)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001944:	2b06      	cmp	r3, #6
 8001946:	d903      	bls.n	8001950 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
					error = true;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_C[j] <= 5 and Km_check) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3250      	adds	r2, #80	; 0x50
 800195c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001960:	2b05      	cmp	r3, #5
 8001962:	dc15      	bgt.n	8001990 <_ZN4ADC_22adc_injected_interruptEv+0x418>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <_ZN4ADC_22adc_injected_interruptEv+0x418>
				error_c++;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001974:	3301      	adds	r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				if (error_c > 6)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001984:	2b06      	cmp	r3, #6
 8001986:	d903      	bls.n	8001990 <_ZN4ADC_22adc_injected_interruptEv+0x418>
					error = true;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_S[j] / 21 >= max_current and Km_check) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	3344      	adds	r3, #68	; 0x44
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019a2:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 80019a4:	fb82 1203 	smull	r1, r2, r2, r3
 80019a8:	1092      	asrs	r2, r2, #2
 80019aa:	17db      	asrs	r3, r3, #31
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80019b8:	429a      	cmp	r2, r3
 80019ba:	db15      	blt.n	80019e8 <_ZN4ADC_22adc_injected_interruptEv+0x470>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <_ZN4ADC_22adc_injected_interruptEv+0x470>
				over_current_s++;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
				if (over_current_s >= 3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d903      	bls.n	80019e8 <_ZN4ADC_22adc_injected_interruptEv+0x470>
					over_cur_s = true;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			}

			if (arr_A[j] / 21 >= max_current_phase and Km_check) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	3358      	adds	r3, #88	; 0x58
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019fa:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 80019fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001a00:	1092      	asrs	r2, r2, #2
 8001a02:	17db      	asrs	r3, r3, #31
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8001a10:	429a      	cmp	r2, r3
 8001a12:	db26      	blt.n	8001a62 <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d021      	beq.n	8001a62 <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
				over_current_a++;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
				if (over_current_a >= 3) {  // 3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d914      	bls.n	8001a62 <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
					over_cur_phase++;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
					over_current_a = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					if(over_cur_phase >= 3) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d903      	bls.n	8001a62 <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
						over_cur_a = true;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					}
				}
			}

			if (arr_C[j] / 21 >= max_current_phase and Km_check) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3250      	adds	r2, #80	; 0x50
 8001a6e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001a72:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 8001a74:	fb82 1203 	smull	r1, r2, r2, r3
 8001a78:	1092      	asrs	r2, r2, #2
 8001a7a:	17db      	asrs	r3, r3, #31
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	db26      	blt.n	8001ada <_ZN4ADC_22adc_injected_interruptEv+0x562>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d021      	beq.n	8001ada <_ZN4ADC_22adc_injected_interruptEv+0x562>
				over_current_c++;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
				if (over_current_c >= 3) { // 3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d914      	bls.n	8001ada <_ZN4ADC_22adc_injected_interruptEv+0x562>
					over_cur_phase++;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
					over_current_c = 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
					if(over_cur_phase >= 3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d903      	bls.n	8001ada <_ZN4ADC_22adc_injected_interruptEv+0x562>
						over_cur_c = true;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
				}
			}

			new_r = (std::sqrt( std::pow((a - b / 2 - c / 2), 2) + std::pow( (b * 17 / 20 - c * 17 / 20), 2) ) * 2) / 3;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001ae8:	0fda      	lsrs	r2, r3, #31
 8001aea:	4413      	add	r3, r2
 8001aec:	105b      	asrs	r3, r3, #1
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	1aca      	subs	r2, r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001af8:	0fd9      	lsrs	r1, r3, #31
 8001afa:	440b      	add	r3, r1
 8001afc:	105b      	asrs	r3, r3, #1
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2102      	movs	r1, #2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe6d 	bl	80047e4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001b14:	461a      	mov	r2, r3
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <_ZN4ADC_22adc_injected_interruptEv+0x5e8>)
 8001b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b22:	10d2      	asrs	r2, r2, #3
 8001b24:	17db      	asrs	r3, r3, #31
 8001b26:	1ad2      	subs	r2, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001b2e:	4619      	mov	r1, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	440b      	add	r3, r1
 8001b36:	490a      	ldr	r1, [pc, #40]	; (8001b60 <_ZN4ADC_22adc_injected_interruptEv+0x5e8>)
 8001b38:	fb81 0103 	smull	r0, r1, r1, r3
 8001b3c:	10c9      	asrs	r1, r1, #3
 8001b3e:	17db      	asrs	r3, r3, #31
 8001b40:	1a5b      	subs	r3, r3, r1
 8001b42:	4413      	add	r3, r2
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fe4c 	bl	80047e4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fb6e 	bl	8000234 <__adddf3>
 8001b58:	e004      	b.n	8001b64 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>
 8001b5a:	bf00      	nop
 8001b5c:	30c30c31 	.word	0x30c30c31
 8001b60:	66666667 	.word	0x66666667
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f008 fb1e 	bl	800a1ac <sqrt>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	f7fe fb5e 	bl	8000234 <__adddf3>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <_ZN4ADC_22adc_injected_interruptEv+0x6bc>)
 8001b86:	f7fe fe35 	bl	80007f4 <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7fe ffb5 	bl	8000b00 <__aeabi_d2iz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

			r += (new_r - r) / 4;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001bae:	4619      	mov	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da00      	bge.n	8001bbe <_ZN4ADC_22adc_injected_interruptEv+0x646>
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	109b      	asrs	r3, r3, #2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		if (j < 8) j++;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	d808      	bhi.n	8001bea <_ZN4ADC_22adc_injected_interruptEv+0x672>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
//			} else
//				second_half = true;
		}
//		if(m < 15) m++;
//		else m = 0;
	}
 8001be8:	e01f      	b.n	8001c2a <_ZN4ADC_22adc_injected_interruptEv+0x6b2>
			j = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			error_a = 0;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			over_current_s = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
			over_current_c = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
				over_cur_phase = 0;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bdb0      	pop	{r4, r5, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40080000 	.word	0x40080000

08001c38 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <_ZN12InterruptingC1Ev+0x1c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	0800b208 	.word	0x0800b208

08001c58 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffe7 	bl	8001c38 <_ZN12InterruptingC1Ev>
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc39 	bl	80014f6 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	0800b1fc 	.word	0x0800b1fc

08001c94 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc45 	bl	8001530 <_ZN4ADC_13adc_interruptEv>
		}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ffbb 	bl	8001c38 <_ZN12InterruptingC1Ev>
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc0d 	bl	80014f6 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	0800b1f0 	.word	0x0800b1f0

08001cec <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fc3d 	bl	8001578 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fb25 	bl	8001368 <_ZN14TickSubscriberC1Ev>
 8001d1e:	4a74      	ldr	r2, [pc, #464]	; (8001ef0 <_ZN4ADC_C1ER9InterruptS1_ht+0x1e8>)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	741a      	strb	r2, [r3, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8b3a      	ldrh	r2, [r7, #24]
 8001d3a:	825a      	strh	r2, [r3, #18]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	829a      	strh	r2, [r3, #20]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	331e      	adds	r3, #30
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	821a      	strh	r2, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3330      	adds	r3, #48	; 0x30
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	821a      	strh	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3342      	adds	r3, #66	; 0x42
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	821a      	strh	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3354      	adds	r3, #84	; 0x54
 8001d76:	2220      	movs	r2, #32
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f009 f996 	bl	800b0ac <memset>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	338e      	adds	r3, #142	; 0x8e
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	821a      	strh	r2, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	33a0      	adds	r3, #160	; 0xa0
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	821a      	strh	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	33b2      	adds	r3, #178	; 0xb2
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	821a      	strh	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	33c4      	adds	r3, #196	; 0xc4
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	821a      	strh	r2, [r3, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2214      	movs	r2, #20
 8001e6c:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2214      	movs	r2, #20
 8001e8c:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	33e4      	adds	r3, #228	; 0xe4
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fed6 	bl	8001c58 <_ZN4ADC_13ADC_interruptC1ERS_>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	33ec      	adds	r3, #236	; 0xec
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fefc 	bl	8001cb0 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	{
		subscribed = false;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8001ed6:	8b3b      	ldrh	r3, [r7, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN4ADC_C1ER9InterruptS1_ht+0x1dc>
		  subscribe();
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fa02 	bl	80012e8 <_ZN14TickSubscriber9subscribeEv>
	}
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	0800b1e4 	.word	0x0800b1e4

08001ef4 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I_S{0};
	int16_t offset_I_A{0};
	int16_t offset_I_C{0};

	void measure_offset() {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
		work = false;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
		work = true;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	3308      	adds	r3, #8
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	88db      	ldrh	r3, [r3, #6]
	}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <_ZN4ADC_5valueEh>:

	uint16_t value(uint8_t i) {
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
		if (i == PS)
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10a      	bne.n	8001f72 <_ZN4ADC_5valueEh+0x28>
			return arr_current_S[j];
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	330c      	adds	r3, #12
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	e01b      	b.n	8001faa <_ZN4ADC_5valueEh+0x60>
		if (i == phase_A)
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d109      	bne.n	8001f8c <_ZN4ADC_5valueEh+0x42>
			return arr_current_A[j];
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3218      	adds	r2, #24
 8001f84:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	e00e      	b.n	8001faa <_ZN4ADC_5valueEh+0x60>
		if (i == phase_C)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d10a      	bne.n	8001fa8 <_ZN4ADC_5valueEh+0x5e>
			return arr_current_C[j];
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	3320      	adds	r3, #32
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	e000      	b.n	8001faa <_ZN4ADC_5valueEh+0x60>
		return 0;
 8001fa8:	2300      	movs	r3, #0
//		if (i == HV)
//			return h_voltage;
	}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN4ADC_7currentEv>:

	uint16_t current(){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
		return r;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001fc2:	b29b      	uxth	r3, r3
	}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <_ZN4ADC_8value_HVEv>:

	uint16_t value_HV() {
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
		return h_voltage;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
	}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <_ZN4ADC_13reset_measureEv>:

	bool is_measure() { return measure; }
	void reset_measure() { measure = false; }
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <_ZN4ADC_11reset_errorEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <_ZN4ADC_9is_over_sEv>:
	bool is_over_s(){return over_cur_s;}
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <_ZN4ADC_12reset_over_sEv>:
	void reset_over_s(){over_cur_s = false;}
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_ZN4ADC_9is_over_aEv>:
	bool is_over_a(){return over_cur_a;}
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <_ZN4ADC_12reset_over_aEv>:
	void reset_over_a(){over_cur_a = false;}
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <_ZN4ADC_9is_over_cEv>:
	bool is_over_c(){return over_cur_c;}
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <_ZN4ADC_12reset_over_cEv>:
	void reset_over_c(){over_cur_c = false;}
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <_ZN4ADC_11is_error_HVEv>:
	bool is_error_HV(){return error_HV;}
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_ZN4ADC_14reset_error_HVEv>:
	void reset_error_HV(){error_HV = false;}
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <_ZN4ADC_7what_KmEt>:
	void what_Km(uint16_t k) {Km_check = k > 50 ? true : false;}
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	2b32      	cmp	r3, #50	; 0x32
 80020f2:	bf8c      	ite	hi
 80020f4:	2301      	movhi	r3, #1
 80020f6:	2300      	movls	r3, #0
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
	...

0800210c <_ZN4ADC_6notifyEv>:

	void notify(){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8a9b      	ldrh	r3, [r3, #20]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	b291      	uxth	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	8291      	strh	r1, [r2, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	8a52      	ldrh	r2, [r2, #18]
 8002124:	4293      	cmp	r3, r2
 8002126:	bf2c      	ite	cs
 8002128:	2301      	movcs	r3, #1
 800212a:	2300      	movcc	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0116 	add.w	r1, r3, #22
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7c1b      	ldrb	r3, [r3, #16]
 8002142:	461a      	mov	r2, r3
 8002144:	480d      	ldr	r0, [pc, #52]	; (800217c <_ZN4ADC_6notifyEv+0x70>)
 8002146:	f003 fbf1 	bl	800592c <HAL_ADC_Start_DMA>
		}
		if( not time % 100 and not work)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8a9b      	ldrh	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <_ZN4ADC_6notifyEv+0x66>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <_ZN4ADC_6notifyEv+0x74>)
 800216e:	f004 f835 	bl	80061dc <HAL_ADCEx_InjectedStart_IT>
	}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000108 	.word	0x20000108
 8002180:	20000138 	.word	0x20000138

08002184 <_ZN4ADC_15set_max_currentEt>:

	void set_max_current(uint16_t v){
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
		max_current = v;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <_ZN4ADC_21set_max_current_phaseEt>:

	void set_max_current_phase(uint16_t v){
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]
		max_current_phase = v;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	887a      	ldrh	r2, [r7, #2]
 80021b2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
	}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_ADC_ConvCpltCallback+0x20>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d102      	bne.n	80021d8 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 80021d2:	4804      	ldr	r0, [pc, #16]	; (80021e4 <HAL_ADC_ConvCpltCallback+0x24>)
 80021d4:	f7ff f99c 	bl	8001510 <_ZN9Interrupt9interruptEv>
	}
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40012400 	.word	0x40012400
 80021e4:	20000350 	.word	0x20000350

080021e8 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d102      	bne.n	8002200 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 80021fc:	f7ff f988 	bl	8001510 <_ZN9Interrupt9interruptEv>
	}
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40012800 	.word	0x40012800
 800220c:	20000354 	.word	0x20000354

08002210 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	809a      	strh	r2, [r3, #4]
	  }
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	889b      	ldrh	r3, [r3, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	4619      	mov	r1, r3
 800224a:	f005 f9b4 	bl	80075b6 <HAL_GPIO_WritePin>
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	4619      	mov	r1, r3
 800226a:	f005 f9a4 	bl	80075b6 <HAL_GPIO_WritePin>
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f005 f97d 	bl	8007588 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_ZN3Pin6toggleEv>:

	  void toggle() {
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_TogglePin(port, n);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	889b      	ldrh	r3, [r3, #4]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f005 f996 	bl	80075e6 <HAL_GPIO_TogglePin>
	  }
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZN3PinaSEb>:

	  bool operator=(bool v)
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <_ZN3PinaSEb+0x1a>
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffae 	bl	8002236 <_ZN3Pin3setEv>
 80022da:	e002      	b.n	80022e2 <_ZN3PinaSEb+0x20>
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffba 	bl	8002256 <_ZN3Pin5clearEv>
	      return v;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
	  }
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZN3PineOEb>:

	  void operator^=(bool v)
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
	  {
	     if (v)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <_ZN3PineOEb+0x18>
	        toggle();
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffcf 	bl	80022a2 <_ZN3Pin6toggleEv>
	  }
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZN3PincvbEv>:

	  operator bool() {return is_set();}
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffae 	bl	8002276 <_ZN3Pin6is_setEv>
 800231a:	4603      	mov	r3, r0
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZN3NTCC1Ev>:
    float T_formula; //25 градусов в Кельвин.
    float Temp_formula;

public:

    NTC()
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    {
      R_formula = 10000;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <_ZN3NTCC1Ev+0x20>)
 8002330:	605a      	str	r2, [r3, #4]
      T_formula  =298.15;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <_ZN3NTCC1Ev+0x24>)
 8002336:	609a      	str	r2, [r3, #8]
    }
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	461c4000 	.word	0x461c4000
 8002348:	43951333 	.word	0x43951333

0800234c <_ZN3NTCclEt>:

    uint16_t operator() (uint16_t adc)
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
    {
      //Вычисление температуры в К датчика
        Om_float = (float)4095 - adc;
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fcb2 	bl	8000cc4 <__aeabi_i2f>
 8002360:	4603      	mov	r3, r0
 8002362:	4619      	mov	r1, r3
 8002364:	482d      	ldr	r0, [pc, #180]	; (800241c <_ZN3NTCclEt+0xd0>)
 8002366:	f7fe fbf7 	bl	8000b58 <__aeabi_fsub>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
        Om_float = adc / Om_float;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fca5 	bl	8000cc4 <__aeabi_i2f>
 800237a:	4602      	mov	r2, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f7fe fda6 	bl	8000ed4 <__aeabi_fdiv>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
        Om_float = Om_float * RESESTIVE_TEMPERATUR_SCHOULDER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4922      	ldr	r1, [pc, #136]	; (8002420 <_ZN3NTCclEt+0xd4>)
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fce8 	bl	8000d6c <__aeabi_fmul>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
        //Вычисляем по формуле T1 = 1 / ((ln(R1) – ln(R2)) / B + 1 / T2) температуру.
        Temp_formula = (1 / ( (log1pf(Om_float) - log1pf(R_formula)) / B_T_1_2 + 1 / T_formula));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f007 fd13 	bl	8009dd4 <log1pf>
 80023ae:	4604      	mov	r4, r0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f007 fd0d 	bl	8009dd4 <log1pf>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4619      	mov	r1, r3
 80023be:	4620      	mov	r0, r4
 80023c0:	f7fe fbca 	bl	8000b58 <__aeabi_fsub>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4917      	ldr	r1, [pc, #92]	; (8002424 <_ZN3NTCclEt+0xd8>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fd83 	bl	8000ed4 <__aeabi_fdiv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461c      	mov	r4, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023dc:	f7fe fd7a 	bl	8000ed4 <__aeabi_fdiv>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7fe fbb9 	bl	8000b5c <__addsf3>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023f2:	f7fe fd6f 	bl	8000ed4 <__aeabi_fdiv>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60da      	str	r2, [r3, #12]
        return (int16_t)Temp_formula - 273;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fe8e 	bl	8001124 <__aeabi_f2iz>
 8002408:	4603      	mov	r3, r0
 800240a:	b21b      	sxth	r3, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002412:	b29b      	uxth	r3, r3
    }
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	457ff000 	.word	0x457ff000
 8002420:	461c4000 	.word	0x461c4000
 8002424:	45790000 	.word	0x45790000

08002428 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_UART_TxCpltCallback+0x20>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d102      	bne.n	8002440 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <HAL_UART_TxCpltCallback+0x24>)
 800243c:	f7ff f868 	bl	8001510 <_ZN9Interrupt9interruptEv>
	}
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40004800 	.word	0x40004800
 800244c:	20000358 	.word	0x20000358

08002450 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_UARTEx_RxEventCallback+0x24>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d102      	bne.n	800246c <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8002466:	4804      	ldr	r0, [pc, #16]	; (8002478 <HAL_UARTEx_RxEventCallback+0x28>)
 8002468:	f7ff f852 	bl	8001510 <_ZN9Interrupt9interruptEv>
	}
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40004800 	.word	0x40004800
 8002478:	2000035c 	.word	0x2000035c

0800247c <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>:
	bool on_off{false};
	bool enable{false};

public:

	Contactor(ADC_& adc, Service<In_data, Out_data>& service) : adc{adc}, service{service} {}
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3308      	adds	r3, #8
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe ff77 	bl	800138c <_ZN5TimerC1Ev>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	761a      	strb	r2, [r3, #24]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	765a      	strb	r2, [r3, #25]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	769a      	strb	r2, [r3, #26]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_ZN9Contactor5startEv>:

	void start(){
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
		on_off = true;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	765a      	strb	r2, [r3, #25]
		enable = false;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	769a      	strb	r2, [r3, #26]
		timer.stop();
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3308      	adds	r3, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe ffd7 	bl	8001486 <_ZN5Timer4stopEv>
	}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZN9Contactor4stopEv>:

	void stop(){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
		TIM4->CCR1 = 0;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <_ZN9Contactor4stopEv+0x34>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80024ee:	2100      	movs	r1, #0
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <_ZN9Contactor4stopEv+0x38>)
 80024f2:	f005 ff49 	bl	8008388 <HAL_TIM_PWM_Stop>
		enable = false;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	769a      	strb	r2, [r3, #26]
		on_off = false;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	765a      	strb	r2, [r3, #25]
		timer.stop();
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3308      	adds	r3, #8
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ffbd 	bl	8001486 <_ZN5Timer4stopEv>
	}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40000800 	.word	0x40000800
 8002518:	2000023c 	.word	0x2000023c

0800251c <_ZN9Contactor5is_onEv>:

	bool is_on() {
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
		return on;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e1b      	ldrb	r3, [r3, #24]
	}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
	...

08002534 <_ZN9ContactorclEv>:

	void operator()(){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
		if(on_off and not enable and service.outData.high_voltage >= 300) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7e5b      	ldrb	r3, [r3, #25]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d042      	beq.n	80025ca <_ZN9ContactorclEv+0x96>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7e9b      	ldrb	r3, [r3, #26]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d03b      	beq.n	80025ca <_ZN9ContactorclEv+0x96>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800255a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800255e:	d334      	bcc.n	80025ca <_ZN9ContactorclEv+0x96>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002560:	2100      	movs	r1, #0
 8002562:	4836      	ldr	r0, [pc, #216]	; (800263c <_ZN9ContactorclEv+0x108>)
 8002564:	f005 fe56 	bl	8008214 <HAL_TIM_PWM_Start>
			TIM4->CCR1 = 1799;
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <_ZN9ContactorclEv+0x10c>)
 800256a:	f240 7207 	movw	r2, #1799	; 0x707
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
			if(is_on() and not timer.isCount()) {
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffd3 	bl	800251c <_ZN9Contactor5is_onEv>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <_ZN9ContactorclEv+0x62>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3308      	adds	r3, #8
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe ffad 	bl	80014e0 <_ZN5Timer7isCountEv>
 8002586:	4603      	mov	r3, r0
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <_ZN9ContactorclEv+0x62>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <_ZN9ContactorclEv+0x64>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <_ZN9ContactorclEv+0x76>
				timer.start(1000);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3308      	adds	r3, #8
 80025a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe ff41 	bl	800142c <_ZN5Timer5startEm>
			}

			if(timer.done()){
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3308      	adds	r3, #8
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe ff78 	bl	80014a4 <_ZN5Timer4doneEv>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <_ZN9ContactorclEv+0x96>
				timer.stop();
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3308      	adds	r3, #8
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ff61 	bl	8001486 <_ZN5Timer4stopEv>
				enable = true;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	769a      	strb	r2, [r3, #26]
			}
		}

		if(enable){
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7e9b      	ldrb	r3, [r3, #26]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d023      	beq.n	800261a <_ZN9ContactorclEv+0xe6>
			if(service.outData.voltage_board > 240) TIM4->CCR1 = 900;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80025da:	2bf0      	cmp	r3, #240	; 0xf0
 80025dc:	d904      	bls.n	80025e8 <_ZN9ContactorclEv+0xb4>
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <_ZN9ContactorclEv+0x10c>)
 80025e0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
 80025e6:	e018      	b.n	800261a <_ZN9ContactorclEv+0xe6>
			else if (service.outData.voltage_board < 200) TIM4->CCR1 = 1799;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80025f0:	2bc7      	cmp	r3, #199	; 0xc7
 80025f2:	d804      	bhi.n	80025fe <_ZN9ContactorclEv+0xca>
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <_ZN9ContactorclEv+0x10c>)
 80025f6:	f240 7207 	movw	r2, #1799	; 0x707
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
 80025fc:	e00d      	b.n	800261a <_ZN9ContactorclEv+0xe6>
			else
				TIM4->CCR1 = 5220 - 18 * service.outData.voltage_board;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002606:	461a      	mov	r2, r3
 8002608:	f06f 0311 	mvn.w	r3, #17
 800260c:	fb03 f302 	mul.w	r3, r3, r2
 8002610:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8002614:	3304      	adds	r3, #4
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <_ZN9ContactorclEv+0x10c>)
 8002618:	6353      	str	r3, [r2, #52]	; 0x34
		}

		on = HAL_GPIO_ReadPin(GPIOD, Contactor_Pin);
 800261a:	2104      	movs	r1, #4
 800261c:	4809      	ldr	r0, [pc, #36]	; (8002644 <_ZN9ContactorclEv+0x110>)
 800261e:	f004 ffb3 	bl	8007588 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	761a      	strb	r2, [r3, #24]
	}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000023c 	.word	0x2000023c
 8002640:	40000800 	.word	0x40000800
 8002644:	40011400 	.word	0x40011400

08002648 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff faef 	bl	8001c38 <_ZN12InterruptingC1Ev>
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe ff41 	bl	80014f6 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	0800b1c0 	.word	0x0800b1c0

08002684 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f805 	bl	80026a0 <_ZN9Convertor16period_interruptEv>
		}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <_ZN9Convertor16period_interruptEv>:
//		void interrupt() override {
//			parent.comparator_interrupt();
//		}
//	} adc_comparator_ { *this };

	void period_interrupt(){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

		if (Km >= 750) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026ae:	f240 22ed 	movw	r2, #749	; 0x2ed
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d904      	bls.n	80026c0 <_ZN9Convertor16period_interruptEv+0x20>
			Km = 750;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80026bc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		}

		TIM1->CCR1 = Km * sin_table[m++] / 1000;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	b2c8      	uxtb	r0, r1
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	f881 00f2 	strb.w	r0, [r1, #242]	; 0xf2
 80026d6:	4619      	mov	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3154      	adds	r1, #84	; 0x54
 80026dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80026e0:	fb03 f302 	mul.w	r3, r3, r2
 80026e4:	4a35      	ldr	r2, [pc, #212]	; (80027bc <_ZN9Convertor16period_interruptEv+0x11c>)
 80026e6:	4936      	ldr	r1, [pc, #216]	; (80027c0 <_ZN9Convertor16period_interruptEv+0x120>)
 80026e8:	fba1 1303 	umull	r1, r3, r1, r3
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = Km * sin_table[k++] / 1000;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 80026fc:	1c59      	adds	r1, r3, #1
 80026fe:	b2c8      	uxtb	r0, r1
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	f881 00f1 	strb.w	r0, [r1, #241]	; 0xf1
 8002706:	4619      	mov	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3154      	adds	r1, #84	; 0x54
 800270c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002710:	fb03 f302 	mul.w	r3, r3, r2
 8002714:	4a29      	ldr	r2, [pc, #164]	; (80027bc <_ZN9Convertor16period_interruptEv+0x11c>)
 8002716:	492a      	ldr	r1, [pc, #168]	; (80027c0 <_ZN9Convertor16period_interruptEv+0x120>)
 8002718:	fba1 1303 	umull	r1, r3, r1, r3
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = Km * sin_table[n++] / 1000;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 800272c:	1c59      	adds	r1, r3, #1
 800272e:	b2c8      	uxtb	r0, r1
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	f881 00f3 	strb.w	r0, [r1, #243]	; 0xf3
 8002736:	4619      	mov	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3154      	adds	r1, #84	; 0x54
 800273c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002740:	fb03 f302 	mul.w	r3, r3, r2
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <_ZN9Convertor16period_interruptEv+0x11c>)
 8002746:	491e      	ldr	r1, [pc, #120]	; (80027c0 <_ZN9Convertor16period_interruptEv+0x120>)
 8002748:	fba1 1303 	umull	r1, r3, r1, r3
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	63d3      	str	r3, [r2, #60]	; 0x3c

		if (k >= qty_point) {k = 0;}
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8002756:	2b23      	cmp	r3, #35	; 0x23
 8002758:	d903      	bls.n	8002762 <_ZN9Convertor16period_interruptEv+0xc2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		if (m >= qty_point) {m = 0;}
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8002768:	2b23      	cmp	r3, #35	; 0x23
 800276a:	d903      	bls.n	8002774 <_ZN9Convertor16period_interruptEv+0xd4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
		if (n >= qty_point) {n = 0;}
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 800277a:	2b23      	cmp	r3, #35	; 0x23
 800277c:	d903      	bls.n	8002786 <_ZN9Convertor16period_interruptEv+0xe6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3

		switcher ^= 1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2da      	uxtb	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

		if(switcher) HAL_ADCEx_InjectedStart_IT(&hadc2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <_ZN9Convertor16period_interruptEv+0x112>
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <_ZN9Convertor16period_interruptEv+0x124>)
 80027ae:	f003 fd15 	bl	80061dc <HAL_ADCEx_InjectedStart_IT>

	}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	10624dd3 	.word	0x10624dd3
 80027c4:	20000138 	.word	0x20000138

080027c8 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_>:
//
//	}

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Contactor& contactor, Interrupt& period_callback/*, Interrupt& adc_comparator_callback*/
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
			, Pin& led_red, Pin& led_green, Pin& ventilator, Pin& unload, Pin& condens, Pin& TD_DM, Pin& SP, Pin& Start, Pin& Motor)
	: adc{adc}, service{service}, contactor{contactor}, period_callback{period_callback}/*, adc_comparator_callback{adc_comparator_callback}*/
	, led_red{led_red}, led_green{led_green}, ventilator{ventilator}, unload{unload}, condens{condens}, TD_DM{TD_DM}, SP{SP}, Start{Start}, Motor{Motor}
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	615a      	str	r2, [r3, #20]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	619a      	str	r2, [r3, #24]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	61da      	str	r2, [r3, #28]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3338      	adds	r3, #56	; 0x38
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fdac 	bl	800138c <_ZN5TimerC1Ev>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3348      	adds	r3, #72	; 0x48
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fda7 	bl	800138c <_ZN5TimerC1Ev>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3358      	adds	r3, #88	; 0x58
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fda2 	bl	800138c <_ZN5TimerC1Ev>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3368      	adds	r3, #104	; 0x68
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fd9d 	bl	800138c <_ZN5TimerC1Ev>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3378      	adds	r3, #120	; 0x78
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fd98 	bl	800138c <_ZN5TimerC1Ev>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3388      	adds	r3, #136	; 0x88
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fd93 	bl	800138c <_ZN5TimerC1Ev>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3398      	adds	r3, #152	; 0x98
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fd8e 	bl	800138c <_ZN5TimerC1Ev>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4a5b      	ldr	r2, [pc, #364]	; (80029e0 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x218>)
 8002874:	33a8      	adds	r3, #168	; 0xa8
 8002876:	4611      	mov	r1, r2
 8002878:	2248      	movs	r2, #72	; 0x48
 800287a:	4618      	mov	r0, r3
 800287c:	f008 fc08 	bl	800b090 <memcpy>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	220c      	movs	r2, #12
 8002894:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2218      	movs	r2, #24
 800289c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2205      	movs	r2, #5
 80028a4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f240 427e 	movw	r2, #1150	; 0x47e
 80028ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2264      	movs	r2, #100	; 0x64
 80028b6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2219      	movs	r2, #25
 80028be:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80028c8:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2219      	movs	r2, #25
 8002900:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002932:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800293c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002946:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f240 5235 	movw	r2, #1333	; 0x535
 8002950:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x21c>)
 8002980:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe5b 	bl	8002648 <_ZN9Convertor14TIM3_interruptC1ERS_>
	{rerun.time_set = 0; timer_stop.time_set = 0; clump_timer.time_set = 0;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	665a      	str	r2, [r3, #100]	; 0x64
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	675a      	str	r2, [r3, #116]	; 0x74
		if(motor == SYNCHRON) {
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1fc>
			unload = true;
 80029ae:	2101      	movs	r1, #1
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f7ff fc86 	bl	80022c2 <_ZN3PinaSEb>
			clump_timer.start(15000);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3368      	adds	r3, #104	; 0x68
 80029ba:	f643 2198 	movw	r1, #15000	; 0x3a98
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fd34 	bl	800142c <_ZN5Timer5startEm>
		}
		motor = Motor;
 80029c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029c6:	f7ff fca1 	bl	800230c <_ZN3PincvbEv>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	}
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	0800b160 	.word	0x0800b160
 80029e4:	000186a0 	.word	0x000186a0

080029e8 <_ZN9ConvertorclEv>:

	void operator() (){
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

		service();
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 ff0f 	bl	8004818 <_ZN7ServiceI7In_data8Out_dataEclEv>
		contactor();
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fd98 	bl	8002534 <_ZN9ContactorclEv>

		service.outData.PWM = Km;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	b212      	sxth	r2, r2
 8002a10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		service.outData.error.on = Start;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689c      	ldr	r4, [r3, #8]
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	f7ff fc75 	bl	800230c <_ZN3PincvbEv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8002a2a:	f362 1304 	bfi	r3, r2, #4, #1
 8002a2e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		service.outData.U_phase = U_phase;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8002a3c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		service.outData.error.overheat_c = not bool(TD_DM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fc61 	bl	800230c <_ZN3PincvbEv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	f081 0301 	eor.w	r3, r1, #1
 8002a56:	b2d9      	uxtb	r1, r3
 8002a58:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8002a5c:	f361 1386 	bfi	r3, r1, #6, #1
 8002a60:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.HV_low = U_stop;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 8002a6e:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8002a72:	f361 1345 	bfi	r3, r1, #5, #1
 8002a76:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.voltage_board_low = (service.outData.voltage_board < 180);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6892      	ldr	r2, [r2, #8]
 8002a86:	2bb3      	cmp	r3, #179	; 0xb3
 8002a88:	bf94      	ite	ls
 8002a8a:	2301      	movls	r3, #1
 8002a8c:	2300      	movhi	r3, #0
 8002a8e:	b2d9      	uxtb	r1, r3
 8002a90:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
 8002a94:	f361 0341 	bfi	r3, r1, #1, #1
 8002a98:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b
		service.outData.error.voltage_board_high = (service.outData.voltage_board > 300);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002aac:	bf8c      	ite	hi
 8002aae:	2301      	movhi	r3, #1
 8002ab0:	2300      	movls	r3, #0
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
 8002ab8:	f361 0382 	bfi	r3, r1, #2, #1
 8002abc:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b

		service.outData.max_current_A = min_ARR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 8002aca:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		service.outData.max_current_C = U_phase_max;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	f8b2 2108 	ldrh.w	r2, [r2, #264]	; 0x108
 8002ad8:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		service.outData.current_C = Kp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8002ae6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		service.outData.max_current = TIM3->ARR;
 8002aea:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <_ZN9ConvertorclEv+0x338>)
 8002aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	b292      	uxth	r2, r2
 8002af4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

		if(service.outData.high_voltage <= 300) U_stop = true;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002b00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b04:	d804      	bhi.n	8002b10 <_ZN9ConvertorclEv+0x128>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8002b0e:	e00f      	b.n	8002b30 <_ZN9ConvertorclEv+0x148>
		else if(service.outData.high_voltage > 310) {U_stop = false; adc.reset_error_HV();}
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002b18:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002b1c:	d908      	bls.n	8002b30 <_ZN9ConvertorclEv+0x148>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff facc 	bl	80020c8 <_ZN4ADC_14reset_error_HVEv>

		if (service.outData.error.overheat_fc |= service.outData.convertor_temp >= 75) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002b38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002b48:	2b4a      	cmp	r3, #74	; 0x4a
 8002b4a:	bfcc      	ite	gt
 8002b4c:	2301      	movgt	r3, #1
 8002b4e:	2300      	movle	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2201      	movne	r2, #1
 8002b5e:	2200      	moveq	r2, #0
 8002b60:	b2d1      	uxtb	r1, r2
 8002b62:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002b66:	f361 12c7 	bfi	r2, r1, #7, #1
 8002b6a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8002b6e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002b72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <_ZN9ConvertorclEv+0x1b6>
			service.outData.error.overheat_fc = service.outData.convertor_temp >= 70;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6892      	ldr	r2, [r2, #8]
 8002b88:	2b45      	cmp	r3, #69	; 0x45
 8002b8a:	bfcc      	ite	gt
 8002b8c:	2301      	movgt	r3, #1
 8002b8e:	2300      	movle	r3, #0
 8002b90:	b2d9      	uxtb	r1, r3
 8002b92:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8002b96:	f361 13c7 	bfi	r3, r1, #7, #1
 8002b9a:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		}

#ifdef CONDITIONER
///////////////CONDITIONER
		if (cool |= service.outData.convertor_temp >= 35) {
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002bae:	2b22      	cmp	r3, #34	; 0x22
 8002bb0:	bfcc      	ite	gt
 8002bb2:	2301      	movgt	r3, #1
 8002bb4:	2300      	movle	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <_ZN9ConvertorclEv+0x204>
			cool = service.outData.convertor_temp >= 30;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002bdc:	2b1d      	cmp	r3, #29
 8002bde:	bfcc      	ite	gt
 8002be0:	2301      	movgt	r3, #1
 8002be2:	2300      	movle	r3, #0
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
		}

//		if(enable)
			ventilator = cool;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7ff fb62 	bl	80022c2 <_ZN3PinaSEb>
//		else
//			ventilator = false;
///////////////CONDITIONER
#endif
		if(contactor.is_on() and enable) alarm();
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fc8a 	bl	800251c <_ZN9Contactor5is_onEv>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <_ZN9ConvertorclEv+0x234>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <_ZN9ConvertorclEv+0x234>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <_ZN9ConvertorclEv+0x236>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <_ZN9ConvertorclEv+0x240>
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fe10 	bl	8003848 <_ZN9Convertor5alarmEv>

		switch(state) {
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <_ZN9ConvertorclEv+0x252>
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f000 81e1 	beq.w	8002ff8 <_ZN9ConvertorclEv+0x610>
							}
				} // else if(motor == SYNCHRON) {
			}
			break;
		} // switch
	} //void operator() (){
 8002c36:	f000 bcf3 	b.w	8003620 <_ZN9ConvertorclEv+0xc38>
if(motor == ASYNCHRON) {
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d175      	bne.n	8002d30 <_ZN9ConvertorclEv+0x348>
	adc.set_max_current(14);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	210e      	movs	r1, #14
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fa9a 	bl	8002184 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(18);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2112      	movs	r1, #18
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff faa3 	bl	80021a2 <_ZN4ADC_21set_max_current_phaseEt>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 400) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002c64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c68:	d94f      	bls.n	8002d0a <_ZN9ConvertorclEv+0x322>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002c72:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002c76:	d248      	bcs.n	8002d0a <_ZN9ConvertorclEv+0x322>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 112) / 100;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <_ZN9ConvertorclEv+0x33c>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f240 33de 	movw	r3, #990	; 0x3de
 8002c90:	fb03 f302 	mul.w	r3, r3, r2
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <_ZN9ConvertorclEv+0x340>)
 8002c96:	fb82 1203 	smull	r1, r2, r2, r3
 8002c9a:	1152      	asrs	r2, r2, #5
 8002c9c:	17db      	asrs	r3, r3, #31
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <_ZN9ConvertorclEv+0x344>)
 8002caa:	fb82 1203 	smull	r1, r2, r2, r3
 8002cae:	1152      	asrs	r2, r2, #5
 8002cb0:	17db      	asrs	r3, r3, #31
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		min_ARR = (div_f / ((U_phase_max) * 9)) * 22; // 5/22 = 50/220
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8002cc8:	4619      	mov	r1, r3
 8002cca:	460b      	mov	r3, r1
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	441a      	add	r2, r3
 8002cdc:	0052      	lsls	r2, r2, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
		if(min_ARR <= ARR_CONDIT) min_ARR = ARR_CONDIT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	f200 809a 	bhi.w	8002e30 <_ZN9ConvertorclEv+0x448>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8002d08:	e092      	b.n	8002e30 <_ZN9ConvertorclEv+0x448>
		U_phase_max = 180;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	22b4      	movs	r2, #180	; 0xb4
 8002d0e:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		min_ARR = ARR_CONDIT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8002d1e:	e087      	b.n	8002e30 <_ZN9ConvertorclEv+0x448>
 8002d20:	40000400 	.word	0x40000400
 8002d24:	cccccccd 	.word	0xcccccccd
 8002d28:	3a196b1f 	.word	0x3a196b1f
 8002d2c:	51eb851f 	.word	0x51eb851f
} else if (motor == SYNCHRON) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d17a      	bne.n	8002e30 <_ZN9ConvertorclEv+0x448>
	adc.set_max_current(16);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2110      	movs	r1, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fa1f 	bl	8002184 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(20);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2114      	movs	r1, #20
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fa28 	bl	80021a2 <_ZN4ADC_21set_max_current_phaseEt>
	if(clump_timer.done()) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3368      	adds	r3, #104	; 0x68
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fba4 	bl	80014a4 <_ZN5Timer4doneEv>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <_ZN9ConvertorclEv+0x390>
		clump_timer.stop(); unload = false;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3368      	adds	r3, #104	; 0x68
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fb8d 	bl	8001486 <_ZN5Timer4stopEv>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff faa5 	bl	80022c2 <_ZN3PinaSEb>
 	if(service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002d80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d84:	d94a      	bls.n	8002e1c <_ZN9ConvertorclEv+0x434>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002d8e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002d92:	d243      	bcs.n	8002e1c <_ZN9ConvertorclEv+0x434>
		U_phase_max = ((((service.outData.high_voltage / 20) * 940) / 141) * 115) / 100;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002d9c:	4a92      	ldr	r2, [pc, #584]	; (8002fe8 <_ZN9ConvertorclEv+0x600>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8002dac:	fb03 f302 	mul.w	r3, r3, r2
 8002db0:	4a8e      	ldr	r2, [pc, #568]	; (8002fec <_ZN9ConvertorclEv+0x604>)
 8002db2:	fb82 1203 	smull	r1, r2, r2, r3
 8002db6:	1152      	asrs	r2, r2, #5
 8002db8:	17db      	asrs	r3, r3, #31
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2273      	movs	r2, #115	; 0x73
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	4a8b      	ldr	r2, [pc, #556]	; (8002ff0 <_ZN9ConvertorclEv+0x608>)
 8002dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8002dc8:	1152      	asrs	r2, r2, #5
 8002dca:	17db      	asrs	r3, r3, #31
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		min_ARR = ( (div_f / (U_phase_max)) * 50) / 70; // 70/53 = 280/212
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	f8b2 2108 	ldrh.w	r2, [r2, #264]	; 0x108
 8002de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de6:	2232      	movs	r2, #50	; 0x32
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	4a81      	ldr	r2, [pc, #516]	; (8002ff4 <_ZN9ConvertorclEv+0x60c>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
		if(min_ARR < value_ARR) min_ARR = value_ARR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d210      	bcs.n	8002e30 <_ZN9ConvertorclEv+0x448>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8002e1a:	e009      	b.n	8002e30 <_ZN9ConvertorclEv+0x448>
		U_phase_max = 212;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	22d4      	movs	r2, #212	; 0xd4
 8002e20:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		min_ARR = value_ARR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
			enable = Start
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
					 and not rerun.isCount() and not rest.isCount()
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fa69 	bl	800230c <_ZN3PincvbEv>
 8002e3a:	4603      	mov	r3, r0
					 and not U_stop;
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d043      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
					 and not rerun.isCount() and not rest.isCount()
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3348      	adds	r3, #72	; 0x48
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fb4b 	bl	80014e0 <_ZN5Timer7isCountEv>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d038      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3388      	adds	r3, #136	; 0x88
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fb40 	bl	80014e0 <_ZN5Timer7isCountEv>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02d      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
					 and not service.outData.error.overheat_fc /*and not service.outData.error.overheat_c*/
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002e74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f083 0301 	eor.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d021      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
					 and not service.outData.error.voltage_board_low and not service.outData.error.voltage_board_high
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002e8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f083 0301 	eor.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
					 and not U_stop;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <_ZN9ConvertorclEv+0x4e0>
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	e000      	b.n	8002eca <_ZN9ConvertorclEv+0x4e2>
 8002ec8:	2200      	movs	r2, #0
			enable = Start
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
			if(rerun.done()) rerun.stop();
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3348      	adds	r3, #72	; 0x48
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe fae5 	bl	80014a4 <_ZN5Timer4doneEv>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <_ZN9ConvertorclEv+0x502>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3348      	adds	r3, #72	; 0x48
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe face 	bl	8001486 <_ZN5Timer4stopEv>
			if(rest.done()) rest.stop();
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3388      	adds	r3, #136	; 0x88
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fad8 	bl	80014a4 <_ZN5Timer4doneEv>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <_ZN9ConvertorclEv+0x51c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3388      	adds	r3, #136	; 0x88
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fac1 	bl	8001486 <_ZN5Timer4stopEv>
			if (blink.done() and rest.isCount()) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3398      	adds	r3, #152	; 0x98
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe facb 	bl	80014a4 <_ZN5Timer4doneEv>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <_ZN9ConvertorclEv+0x540>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3388      	adds	r3, #136	; 0x88
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fae1 	bl	80014e0 <_ZN5Timer7isCountEv>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <_ZN9ConvertorclEv+0x540>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <_ZN9ConvertorclEv+0x542>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d020      	beq.n	8002f70 <_ZN9ConvertorclEv+0x588>
				blink.stop();
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3398      	adds	r3, #152	; 0x98
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe faa7 	bl	8001486 <_ZN5Timer4stopEv>
				blink.start(300);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3398      	adds	r3, #152	; 0x98
 8002f3c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fa73 	bl	800142c <_ZN5Timer5startEm>
				led_red ^= true;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f9cd 	bl	80022ec <_ZN3PineOEb>
				led_green = not led_red;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699c      	ldr	r4, [r3, #24]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f9d6 	bl	800230c <_ZN3PincvbEv>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff f9a9 	bl	80022c2 <_ZN3PinaSEb>
			if (enable){
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d017      	beq.n	8002faa <_ZN9ConvertorclEv+0x5c2>
				rerun.stop();
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3348      	adds	r3, #72	; 0x48
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fa81 	bl	8001486 <_ZN5Timer4stopEv>
				contactor.start();
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fa96 	bl	80024ba <_ZN9Contactor5startEv>
				if(contactor.is_on()) {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fac2 	bl	800251c <_ZN9Contactor5is_onEv>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <_ZN9ConvertorclEv+0x5c2>
					pusk();
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fb44 	bl	800362c <_ZN9Convertor4puskEv>
					state = State::starting;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
			if (not Start) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f9ac 	bl	800230c <_ZN3PincvbEv>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 832c 	beq.w	800361a <_ZN9ConvertorclEv+0xc32>
				rerun.stop();
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3348      	adds	r3, #72	; 0x48
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fa5d 	bl	8001486 <_ZN5Timer4stopEv>
				rerun.time_set = 0;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
				adc.reset_error();
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f812 	bl	8002000 <_ZN4ADC_11reset_errorEv>
				phase = false;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
			break;
 8002fe4:	e319      	b.n	800361a <_ZN9ConvertorclEv+0xc32>
 8002fe6:	bf00      	nop
 8002fe8:	cccccccd 	.word	0xcccccccd
 8002fec:	3a196b1f 	.word	0x3a196b1f
 8002ff0:	51eb851f 	.word	0x51eb851f
 8002ff4:	ea0ea0eb 	.word	0xea0ea0eb
			adc.what_Km(Km);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003002:	b29b      	uxth	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7ff f86b 	bl	80020e2 <_ZN4ADC_7what_KmEt>
if(motor == ASYNCHRON) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 8109 	bne.w	800322a <_ZN9ConvertorclEv+0x842>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 400) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003020:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003024:	d94d      	bls.n	80030c2 <_ZN9ConvertorclEv+0x6da>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800302e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003032:	d246      	bcs.n	80030c2 <_ZN9ConvertorclEv+0x6da>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800303c:	4aa7      	ldr	r2, [pc, #668]	; (80032dc <_ZN9ConvertorclEv+0x8f4>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	f240 33de 	movw	r3, #990	; 0x3de
 800304c:	fb03 f302 	mul.w	r3, r3, r2
 8003050:	4aa3      	ldr	r2, [pc, #652]	; (80032e0 <_ZN9ConvertorclEv+0x8f8>)
 8003052:	fb82 1203 	smull	r1, r2, r2, r3
 8003056:	1152      	asrs	r2, r2, #5
 8003058:	17db      	asrs	r3, r3, #31
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2273      	movs	r2, #115	; 0x73
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	4aa0      	ldr	r2, [pc, #640]	; (80032e4 <_ZN9ConvertorclEv+0x8fc>)
 8003064:	fb82 1203 	smull	r1, r2, r2, r3
 8003068:	1152      	asrs	r2, r2, #5
 800306a:	17db      	asrs	r3, r3, #31
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b29a      	uxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		min_ARR = (div_f / ((U_phase_max) * 9)) * 22; // 5/22 = 50/220
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003082:	4619      	mov	r1, r3
 8003084:	460b      	mov	r3, r1
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	441a      	add	r2, r3
 8003096:	0052      	lsls	r2, r2, #1
 8003098:	4413      	add	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
		if(min_ARR <= ARR_CONDIT) min_ARR = ARR_CONDIT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d810      	bhi.n	80030d6 <_ZN9ConvertorclEv+0x6ee>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80030c0:	e009      	b.n	80030d6 <_ZN9ConvertorclEv+0x6ee>
		U_phase_max = 180;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	22b4      	movs	r2, #180	; 0xb4
 80030c6:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		min_ARR = ARR_CONDIT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	Km = offset + ( ((Kp * (div_f / TIM3->ARR) / (service.outData.high_voltage + 1))) );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80030dc:	4619      	mov	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80030e4:	4618      	mov	r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80030ec:	4b7e      	ldr	r3, [pc, #504]	; (80032e8 <_ZN9ConvertorclEv+0x900>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	fb03 f300 	mul.w	r3, r3, r0
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8003100:	3201      	adds	r2, #1
 8003102:	fbb3 f3f2 	udiv	r3, r3, r2
 8003106:	18ca      	adds	r2, r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	if (TIM3->ARR <= uint32_t(min_ARR + 10)) {
 800310e:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <_ZN9ConvertorclEv+0x900>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 8003118:	320a      	adds	r2, #10
 800311a:	4293      	cmp	r3, r2
 800311c:	bf94      	ite	ls
 800311e:	2301      	movls	r3, #1
 8003120:	2300      	movhi	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <_ZN9ConvertorclEv+0x748>
		error = 0;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	if (Kp >= 5500) {
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003136:	f241 527b 	movw	r2, #5499	; 0x157b
 800313a:	4293      	cmp	r3, r2
 800313c:	d904      	bls.n	8003148 <_ZN9ConvertorclEv+0x760>
		Kp = 5500;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f241 527c 	movw	r2, #5500	; 0x157c
 8003144:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	if (TIM3->ARR <= min_ARR) {
 8003148:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <_ZN9ConvertorclEv+0x900>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 8003152:	4293      	cmp	r3, r2
 8003154:	bf94      	ite	ls
 8003156:	2301      	movls	r3, #1
 8003158:	2300      	movhi	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <_ZN9ConvertorclEv+0x7b0>
		if (adc.current() > 180) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe ff25 	bl	8001fb4 <_ZN4ADC_7currentEv>
 800316a:	4603      	mov	r3, r0
 800316c:	2bb4      	cmp	r3, #180	; 0xb4
 800316e:	bf8c      	ite	hi
 8003170:	2301      	movhi	r3, #1
 8003172:	2300      	movls	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <_ZN9ConvertorclEv+0x7b0>
			if (Kp > 4500) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003180:	f241 1294 	movw	r2, #4500	; 0x1194
 8003184:	4293      	cmp	r3, r2
 8003186:	d907      	bls.n	8003198 <_ZN9ConvertorclEv+0x7b0>
				Kp -= 4;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800318e:	3b04      	subs	r3, #4
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	if (adc.current() < 140) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe ff09 	bl	8001fb4 <_ZN4ADC_7currentEv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b8b      	cmp	r3, #139	; 0x8b
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <_ZN9ConvertorclEv+0x7e8>
		if (Kp < 5500) {
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80031b8:	f241 527b 	movw	r2, #5499	; 0x157b
 80031bc:	4293      	cmp	r3, r2
 80031be:	d807      	bhi.n	80031d0 <_ZN9ConvertorclEv+0x7e8>
			Kp++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80031c6:	3301      	adds	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	if (TIM3->ARR > uint32_t(min_ARR + 5)) {
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <_ZN9ConvertorclEv+0x900>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 80031da:	3205      	adds	r2, #5
 80031dc:	4293      	cmp	r3, r2
 80031de:	bf8c      	ite	hi
 80031e0:	2301      	movhi	r3, #1
 80031e2:	2300      	movls	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 812e 	beq.w	8003448 <_ZN9ConvertorclEv+0xa60>
		if (adc.current() > 100) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe fedf 	bl	8001fb4 <_ZN4ADC_7currentEv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	bf8c      	ite	hi
 80031fc:	2301      	movhi	r3, #1
 80031fe:	2300      	movls	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8120 	beq.w	8003448 <_ZN9ConvertorclEv+0xa60>
			if (Kp >= 5000) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800320e:	f241 3287 	movw	r2, #4999	; 0x1387
 8003212:	4293      	cmp	r3, r2
 8003214:	f240 8118 	bls.w	8003448 <_ZN9ConvertorclEv+0xa60>
				Kp--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8003228:	e10e      	b.n	8003448 <_ZN9ConvertorclEv+0xa60>
} else if(motor == SYNCHRON) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 8109 	bne.w	8003448 <_ZN9ConvertorclEv+0xa60>
				if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800323e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003242:	d955      	bls.n	80032f0 <_ZN9ConvertorclEv+0x908>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800324c:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8003250:	d24e      	bcs.n	80032f0 <_ZN9ConvertorclEv+0x908>
					U_phase_max = ((((service.outData.high_voltage / 20) * 980) / 141) * 115) / 100;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800325a:	4a20      	ldr	r2, [pc, #128]	; (80032dc <_ZN9ConvertorclEv+0x8f4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800326a:	fb03 f302 	mul.w	r3, r3, r2
 800326e:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <_ZN9ConvertorclEv+0x8f8>)
 8003270:	fb82 1203 	smull	r1, r2, r2, r3
 8003274:	1152      	asrs	r2, r2, #5
 8003276:	17db      	asrs	r3, r3, #31
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2273      	movs	r2, #115	; 0x73
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <_ZN9ConvertorclEv+0x8fc>)
 8003282:	fb82 1203 	smull	r1, r2, r2, r3
 8003286:	1152      	asrs	r2, r2, #5
 8003288:	17db      	asrs	r3, r3, #31
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
					min_ARR = ((div_f / (U_phase_max)) * 50) / 70; // 70/53 = 280/212
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	f8b2 2108 	ldrh.w	r2, [r2, #264]	; 0x108
 80032a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a4:	2232      	movs	r2, #50	; 0x32
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <_ZN9ConvertorclEv+0x904>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
					if(min_ARR < value_ARR) min_ARR = value_ARR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d21b      	bcs.n	8003304 <_ZN9ConvertorclEv+0x91c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80032d8:	e014      	b.n	8003304 <_ZN9ConvertorclEv+0x91c>
 80032da:	bf00      	nop
 80032dc:	cccccccd 	.word	0xcccccccd
 80032e0:	3a196b1f 	.word	0x3a196b1f
 80032e4:	51eb851f 	.word	0x51eb851f
 80032e8:	40000400 	.word	0x40000400
 80032ec:	ea0ea0eb 	.word	0xea0ea0eb
					min_ARR = value_ARR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
					U_phase_max = 212;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	22d4      	movs	r2, #212	; 0xd4
 8003300:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
				U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 115) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800330c:	4aa5      	ldr	r2, [pc, #660]	; (80035a4 <_ZN9ConvertorclEv+0xbbc>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	b29b      	uxth	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800331e:	fb03 f302 	mul.w	r3, r3, r2
 8003322:	4aa1      	ldr	r2, [pc, #644]	; (80035a8 <_ZN9ConvertorclEv+0xbc0>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2273      	movs	r2, #115	; 0x73
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	4a9e      	ldr	r2, [pc, #632]	; (80035ac <_ZN9ConvertorclEv+0xbc4>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				Km = offset + Kp * (div_f / TIM3->ARR) / (service.outData.high_voltage + 1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8003346:	4619      	mov	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800334e:	4618      	mov	r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8003356:	4b96      	ldr	r3, [pc, #600]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	fb03 f300 	mul.w	r3, r3, r0
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 800336a:	3201      	adds	r2, #1
 800336c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003370:	18ca      	adds	r2, r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
				if (TIM3->ARR <= uint32_t(min_ARR + 5)) {
 8003378:	4b8d      	ldr	r3, [pc, #564]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 8003382:	3205      	adds	r2, #5
 8003384:	4293      	cmp	r3, r2
 8003386:	bf94      	ite	ls
 8003388:	2301      	movls	r3, #1
 800338a:	2300      	movhi	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <_ZN9ConvertorclEv+0x9be>
					unload = false;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe ff92 	bl	80022c2 <_ZN3PinaSEb>
					error = 0;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
				if (adc.current() < 35) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fe02 	bl	8001fb4 <_ZN4ADC_7currentEv>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b22      	cmp	r3, #34	; 0x22
 80033b4:	bf94      	ite	ls
 80033b6:	2301      	movls	r3, #1
 80033b8:	2300      	movhi	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <_ZN9ConvertorclEv+0x9f6>
					if (Kp < 2200) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80033c6:	f640 0297 	movw	r2, #2199	; 0x897
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d807      	bhi.n	80033de <_ZN9ConvertorclEv+0x9f6>
						Kp++;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80033d4:	3301      	adds	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				if (TIM3->ARR > uint32_t(min_ARR + 5)) {
 80033de:	4b74      	ldr	r3, [pc, #464]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 80033e8:	3205      	adds	r2, #5
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bf8c      	ite	hi
 80033ee:	2301      	movhi	r3, #1
 80033f0:	2300      	movls	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <_ZN9ConvertorclEv+0xa48>
					if (adc.current() > 110) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fdd9 	bl	8001fb4 <_ZN4ADC_7currentEv>
 8003402:	4603      	mov	r3, r0
 8003404:	2b6e      	cmp	r3, #110	; 0x6e
 8003406:	bf8c      	ite	hi
 8003408:	2301      	movhi	r3, #1
 800340a:	2300      	movls	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <_ZN9ConvertorclEv+0xa48>
						if(Kp > 1250) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003418:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800341c:	4293      	cmp	r3, r2
 800341e:	d907      	bls.n	8003430 <_ZN9ConvertorclEv+0xa48>
							Kp--;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				if (Kp >= 2200) {
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003436:	f640 0297 	movw	r2, #2199	; 0x897
 800343a:	4293      	cmp	r3, r2
 800343c:	d904      	bls.n	8003448 <_ZN9ConvertorclEv+0xa60>
					Kp = 2200;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f640 0298 	movw	r2, #2200	; 0x898
 8003444:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			if (Km >= 990) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800344e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8003452:	4293      	cmp	r3, r2
 8003454:	d904      	bls.n	8003460 <_ZN9ConvertorclEv+0xa78>
				Km = 990;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f240 32de 	movw	r2, #990	; 0x3de
 800345c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
			if (timer.done() and TIM3->ARR != min_ARR) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3338      	adds	r3, #56	; 0x38
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe f81d 	bl	80014a4 <_ZN5Timer4doneEv>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <_ZN9ConvertorclEv+0xa9a>
 8003470:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 800347a:	4293      	cmp	r3, r2
 800347c:	d001      	beq.n	8003482 <_ZN9ConvertorclEv+0xa9a>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <_ZN9ConvertorclEv+0xa9c>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80ca 	beq.w	800361e <_ZN9ConvertorclEv+0xc36>
				timer.stop();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3338      	adds	r3, #56	; 0x38
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fff9 	bl	8001486 <_ZN5Timer4stopEv>
				timer.start(time);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7fd ffc2 	bl	800142c <_ZN5Timer5startEm>
				if(motor == ASYNCHRON) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d133      	bne.n	800351a <_ZN9ConvertorclEv+0xb32>
					if (TIM3->ARR != min_ARR) {
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 80034bc:	4293      	cmp	r3, r2
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80a9 	beq.w	800361e <_ZN9ConvertorclEv+0xc36>
						if (TIM3->ARR > uint16_t(4000)) {
 80034cc:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80034d4:	bf8c      	ite	hi
 80034d6:	2301      	movhi	r3, #1
 80034d8:	2300      	movls	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <_ZN9ConvertorclEv+0xb04>
							TIM3->ARR -= uint16_t(40);
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 80034e6:	3b28      	subs	r3, #40	; 0x28
 80034e8:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 80034ea:	e098      	b.n	800361e <_ZN9ConvertorclEv+0xc36>
						} else if (TIM3->ARR > min_ARR) {
 80034ec:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 80034f6:	4293      	cmp	r3, r2
 80034f8:	bf8c      	ite	hi
 80034fa:	2301      	movhi	r3, #1
 80034fc:	2300      	movls	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <_ZN9ConvertorclEv+0xb28>
							TIM3->ARR -= uint16_t(10);
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 800350a:	3b0a      	subs	r3, #10
 800350c:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 800350e:	e086      	b.n	800361e <_ZN9ConvertorclEv+0xc36>
							TIM3->ARR++;
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	3201      	adds	r2, #1
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8003518:	e081      	b.n	800361e <_ZN9ConvertorclEv+0xc36>
				} else if(motor == SYNCHRON) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003520:	2b00      	cmp	r3, #0
 8003522:	d17c      	bne.n	800361e <_ZN9ConvertorclEv+0xc36>
							if(TIM3->ARR != min_ARR) {
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 800352e:	4293      	cmp	r3, r2
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d070      	beq.n	800361e <_ZN9ConvertorclEv+0xc36>
								if(TIM3->ARR > min_ARR) {
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	f8b2 2110 	ldrh.w	r2, [r2, #272]	; 0x110
 8003546:	4293      	cmp	r3, r2
 8003548:	bf8c      	ite	hi
 800354a:	2301      	movhi	r3, #1
 800354c:	2300      	movls	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02f      	beq.n	80035b4 <_ZN9ConvertorclEv+0xbcc>
									if(TIM3->ARR > uint16_t(624)) {
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800355c:	bf8c      	ite	hi
 800355e:	2301      	movhi	r3, #1
 8003560:	2300      	movls	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <_ZN9ConvertorclEv+0xbae>
										if(TIM3->ARR > uint16_t(1500)) {
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003570:	4293      	cmp	r3, r2
 8003572:	bf8c      	ite	hi
 8003574:	2301      	movhi	r3, #1
 8003576:	2300      	movls	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <_ZN9ConvertorclEv+0xba2>
											TIM3->ARR -= uint16_t(32);
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003584:	3b20      	subs	r3, #32
 8003586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003588:	e018      	b.n	80035bc <_ZN9ConvertorclEv+0xbd4>
											TIM3->ARR -= uint16_t(3);
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003590:	3b03      	subs	r3, #3
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003594:	e012      	b.n	80035bc <_ZN9ConvertorclEv+0xbd4>
										TIM3->ARR-= uint16_t(1);
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <_ZN9ConvertorclEv+0xbc8>)
 800359c:	3b01      	subs	r3, #1
 800359e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035a0:	e00c      	b.n	80035bc <_ZN9ConvertorclEv+0xbd4>
 80035a2:	bf00      	nop
 80035a4:	cccccccd 	.word	0xcccccccd
 80035a8:	3a196b1f 	.word	0x3a196b1f
 80035ac:	51eb851f 	.word	0x51eb851f
 80035b0:	40000400 	.word	0x40000400
									TIM3->ARR++;
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <_ZN9ConvertorclEv+0xc40>)
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	3201      	adds	r2, #1
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
								if(TIM3->ARR > uint16_t(624)) {
 80035bc:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <_ZN9ConvertorclEv+0xc40>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80035c4:	bf8c      	ite	hi
 80035c6:	2301      	movhi	r3, #1
 80035c8:	2300      	movls	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <_ZN9ConvertorclEv+0xbf2>
									time = 2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
			break;
 80035d8:	e021      	b.n	800361e <_ZN9ConvertorclEv+0xc36>
								} else if (TIM3->ARR >= uint16_t(558)) {
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <_ZN9ConvertorclEv+0xc40>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	f240 222d 	movw	r2, #557	; 0x22d
 80035e2:	4293      	cmp	r3, r2
 80035e4:	bf8c      	ite	hi
 80035e6:	2301      	movhi	r3, #1
 80035e8:	2300      	movls	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <_ZN9ConvertorclEv+0xc12>
									time = 5;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2205      	movs	r2, #5
 80035f4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
			break;
 80035f8:	e011      	b.n	800361e <_ZN9ConvertorclEv+0xc36>
								} else if (TIM3->ARR < uint16_t(558)) {
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <_ZN9ConvertorclEv+0xc40>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f240 222d 	movw	r2, #557	; 0x22d
 8003602:	4293      	cmp	r3, r2
 8003604:	bf94      	ite	ls
 8003606:	2301      	movls	r3, #1
 8003608:	2300      	movhi	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <_ZN9ConvertorclEv+0xc36>
									time = 7;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2207      	movs	r2, #7
 8003614:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
			break;
 8003618:	e001      	b.n	800361e <_ZN9ConvertorclEv+0xc36>
			break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <_ZN9ConvertorclEv+0xc38>
			break;
 800361e:	bf00      	nop
	} //void operator() (){
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	40000400 	.word	0x40000400

0800362c <_ZN9Convertor4puskEv>:

	void pusk() {
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

		if(motor == ASYNCHRON) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800363a:	2b01      	cmp	r3, #1
 800363c:	d111      	bne.n	8003662 <_ZN9Convertor4puskEv+0x36>
#ifdef CONDITIONER
				frequency = 5;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2205      	movs	r2, #5
 8003642:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
				Kp = 2500;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800364c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				time = 5;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2205      	movs	r2, #5
 8003654:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				offset = 10;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	220a      	movs	r2, #10
 800365c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8003660:	e015      	b.n	800368e <_ZN9Convertor4puskEv+0x62>
				Kp = 6000;
				time = 3;
				offset = 30;
#endif

		} else if(motor == SYNCHRON) {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003668:	2b00      	cmp	r3, #0
 800366a:	d110      	bne.n	800368e <_ZN9Convertor4puskEv+0x62>
				frequency = 5;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2205      	movs	r2, #5
 8003670:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
				Kp = 1140;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f240 4274 	movw	r2, #1140	; 0x474
 800367a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				time = 2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				offset = 40;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2228      	movs	r2, #40	; 0x28
 800368a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		}
		Km = 5;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2205      	movs	r2, #5
 8003692:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		TIM3->ARR = (div_f / (frequency)) - 1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	f8b2 20fa 	ldrh.w	r2, [r2, #250]	; 0xfa
 80036a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036a6:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <_ZN9Convertor4puskEv+0x164>)
 80036a8:	3b01      	subs	r3, #1
 80036aa:	62d3      	str	r3, [r2, #44]	; 0x2c

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80036ac:	2100      	movs	r1, #0
 80036ae:	4839      	ldr	r0, [pc, #228]	; (8003794 <_ZN9Convertor4puskEv+0x168>)
 80036b0:	f004 fdb0 	bl	8008214 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80036b4:	2100      	movs	r1, #0
 80036b6:	4837      	ldr	r0, [pc, #220]	; (8003794 <_ZN9Convertor4puskEv+0x168>)
 80036b8:	f005 fb62 	bl	8008d80 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80036bc:	2104      	movs	r1, #4
 80036be:	4835      	ldr	r0, [pc, #212]	; (8003794 <_ZN9Convertor4puskEv+0x168>)
 80036c0:	f004 fda8 	bl	8008214 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80036c4:	2104      	movs	r1, #4
 80036c6:	4833      	ldr	r0, [pc, #204]	; (8003794 <_ZN9Convertor4puskEv+0x168>)
 80036c8:	f005 fb5a 	bl	8008d80 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80036cc:	2108      	movs	r1, #8
 80036ce:	4831      	ldr	r0, [pc, #196]	; (8003794 <_ZN9Convertor4puskEv+0x168>)
 80036d0:	f004 fda0 	bl	8008214 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80036d4:	2108      	movs	r1, #8
 80036d6:	482f      	ldr	r0, [pc, #188]	; (8003794 <_ZN9Convertor4puskEv+0x168>)
 80036d8:	f005 fb52 	bl	8008d80 <HAL_TIMEx_PWMN_Start>

		HAL_TIM_Base_Start_IT(&htim3);
 80036dc:	482e      	ldr	r0, [pc, #184]	; (8003798 <_ZN9Convertor4puskEv+0x16c>)
 80036de:	f004 fc6d 	bl	8007fbc <HAL_TIM_Base_Start_IT>

		timer.start(time);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f7fd fe9b 	bl	800142c <_ZN5Timer5startEm>
		adc.measure_value();
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fc07 	bl	8001f0e <_ZN4ADC_13measure_valueEv>

		service.outData.error.current_S = false;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003708:	f36f 0300 	bfc	r3, #0, #1
 800370c:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.current_A = false;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003718:	f36f 0341 	bfc	r3, #1, #1
 800371c:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.current_C = false;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003728:	f36f 0382 	bfc	r3, #2, #1
 800372c:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.phase_break = false;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
 8003738:	f36f 0300 	bfc	r3, #0, #1
 800373c:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b
		service.outData.error.HV = false;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003748:	f36f 03c3 	bfc	r3, #3, #1
 800374c:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a

		led_red = false;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fdb3 	bl	80022c2 <_ZN3PinaSEb>
		led_green  = false;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fdad 	bl	80022c2 <_ZN3PinaSEb>
		blink.stop();
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3398      	adds	r3, #152	; 0x98
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fe8a 	bl	8001486 <_ZN5Timer4stopEv>
		if(motor == SYNCHRON)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <_ZN9Convertor4puskEv+0x15c>
			unload = true;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fd9d 	bl	80022c2 <_ZN3PinaSEb>
#ifdef CONDITIONER
//		work.start(600'000);
#else
		work.start(600'000);
#endif
	}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40000400 	.word	0x40000400
 8003794:	200001ac 	.word	0x200001ac
 8003798:	200001f4 	.word	0x200001f4

0800379c <_ZN9Convertor4stopEv>:

	void stop() {
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <_ZN9Convertor4stopEv+0xa0>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <_ZN9Convertor4stopEv+0xa0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <_ZN9Convertor4stopEv+0xa0>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80037b6:	2100      	movs	r1, #0
 80037b8:	4821      	ldr	r0, [pc, #132]	; (8003840 <_ZN9Convertor4stopEv+0xa4>)
 80037ba:	f004 fde5 	bl	8008388 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80037be:	2100      	movs	r1, #0
 80037c0:	481f      	ldr	r0, [pc, #124]	; (8003840 <_ZN9Convertor4stopEv+0xa4>)
 80037c2:	f005 fb89 	bl	8008ed8 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80037c6:	2104      	movs	r1, #4
 80037c8:	481d      	ldr	r0, [pc, #116]	; (8003840 <_ZN9Convertor4stopEv+0xa4>)
 80037ca:	f004 fddd 	bl	8008388 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80037ce:	2104      	movs	r1, #4
 80037d0:	481b      	ldr	r0, [pc, #108]	; (8003840 <_ZN9Convertor4stopEv+0xa4>)
 80037d2:	f005 fb81 	bl	8008ed8 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80037d6:	2108      	movs	r1, #8
 80037d8:	4819      	ldr	r0, [pc, #100]	; (8003840 <_ZN9Convertor4stopEv+0xa4>)
 80037da:	f004 fdd5 	bl	8008388 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80037de:	2108      	movs	r1, #8
 80037e0:	4817      	ldr	r0, [pc, #92]	; (8003840 <_ZN9Convertor4stopEv+0xa4>)
 80037e2:	f005 fb79 	bl	8008ed8 <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 80037e6:	4817      	ldr	r0, [pc, #92]	; (8003844 <_ZN9Convertor4stopEv+0xa8>)
 80037e8:	f004 fc48 	bl	800807c <HAL_TIM_Base_Stop_IT>
		timer.stop();
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3338      	adds	r3, #56	; 0x38
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fd fe48 	bl	8001486 <_ZN5Timer4stopEv>
		contactor.stop();
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fe70 	bl	80024e0 <_ZN9Contactor4stopEv>

		k = 0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		m = 12;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	220c      	movs	r2, #12
 800380c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
		n = 24;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2218      	movs	r2, #24
 8003814:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3

		state = State::wait;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
		adc.measure_offset();
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fb66 	bl	8001ef4 <_ZN4ADC_14measure_offsetEv>

		work.stop();
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3378      	adds	r3, #120	; 0x78
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fe2a 	bl	8001486 <_ZN5Timer4stopEv>

	}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	200001ac 	.word	0x200001ac
 8003844:	200001f4 	.word	0x200001f4

08003848 <_ZN9Convertor5alarmEv>:

	void alarm() {
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
		if((not Start or timer_stop.done()) or not contactor.is_on()
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fd59 	bl	800230c <_ZN3PincvbEv>
 800385a:	4603      	mov	r3, r0
 800385c:	f083 0301 	eor.w	r3, r3, #1
 8003860:	b2db      	uxtb	r3, r3
				      or service.outData.error.overheat_fc /*or service.outData.error.overheat_c*/ or service.outData.error.HV_low
					  or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high
 8003862:	2b00      	cmp	r3, #0
 8003864:	d136      	bne.n	80038d4 <_ZN9Convertor5alarmEv+0x8c>
		if((not Start or timer_stop.done()) or not contactor.is_on()
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3358      	adds	r3, #88	; 0x58
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fe1a 	bl	80014a4 <_ZN5Timer4doneEv>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d12e      	bne.n	80038d4 <_ZN9Convertor5alarmEv+0x8c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fe4e 	bl	800251c <_ZN9Contactor5is_onEv>
 8003880:	4603      	mov	r3, r0
 8003882:	f083 0301 	eor.w	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d123      	bne.n	80038d4 <_ZN9Convertor5alarmEv+0x8c>
				      or service.outData.error.overheat_fc /*or service.outData.error.overheat_c*/ or service.outData.error.HV_low
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003894:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11a      	bne.n	80038d4 <_ZN9Convertor5alarmEv+0x8c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80038a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <_ZN9Convertor5alarmEv+0x8c>
					  or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80038b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <_ZN9Convertor5alarmEv+0x8c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80038ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <_ZN9Convertor5alarmEv+0x90>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <_ZN9Convertor5alarmEv+0x92>
 80038d8:	2300      	movs	r3, #0
		if((not Start or timer_stop.done()) or not contactor.is_on()
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80ab 	beq.w	8003a36 <_ZN9Convertor5alarmEv+0x1ee>
		  )
		{
			if(not Start and not timer_stop.isCount()) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fd11 	bl	800230c <_ZN3PincvbEv>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f083 0301 	eor.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <_ZN9Convertor5alarmEv+0xc8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3358      	adds	r3, #88	; 0x58
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fdf0 	bl	80014e0 <_ZN5Timer7isCountEv>
 8003900:	4603      	mov	r3, r0
 8003902:	f083 0301 	eor.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <_ZN9Convertor5alarmEv+0xc8>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <_ZN9Convertor5alarmEv+0xca>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <_ZN9Convertor5alarmEv+0xd4>
//				timer_stop.start(1000);
				stop();
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff40 	bl	800379c <_ZN9Convertor4stopEv>
//					unload = true;
//					clump_timer.start(15000);
//				}
			}

			if(timer_stop.done() and not Start) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3358      	adds	r3, #88	; 0x58
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fdbf 	bl	80014a4 <_ZN5Timer4doneEv>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00c      	beq.n	8003946 <_ZN9Convertor5alarmEv+0xfe>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fceb 	bl	800230c <_ZN3PincvbEv>
 8003936:	4603      	mov	r3, r0
 8003938:	f083 0301 	eor.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <_ZN9Convertor5alarmEv+0xfe>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <_ZN9Convertor5alarmEv+0x100>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d019      	beq.n	8003980 <_ZN9Convertor5alarmEv+0x138>
				stop();
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff25 	bl	800379c <_ZN9Convertor4stopEv>
				timer_stop.stop();
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3358      	adds	r3, #88	; 0x58
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fd95 	bl	8001486 <_ZN5Timer4stopEv>
				if (motor == SYNCHRON) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <_ZN9Convertor5alarmEv+0x138>
					unload = true;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fca8 	bl	80022c2 <_ZN3PinaSEb>
					clump_timer.start(15000);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3368      	adds	r3, #104	; 0x68
 8003976:	f643 2198 	movw	r1, #15000	; 0x3a98
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fd56 	bl	800142c <_ZN5Timer5startEm>
				}
			}

			if(not contactor.is_on()
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fdc9 	bl	800251c <_ZN9Contactor5is_onEv>
 800398a:	4603      	mov	r3, r0
 800398c:	f083 0301 	eor.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
				     or service.outData.error.overheat_fc /*or service.outData.error.overheat_c*/
				     or service.outData.error.HV_low or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high) {
 8003992:	2b00      	cmp	r3, #0
 8003994:	d123      	bne.n	80039de <_ZN9Convertor5alarmEv+0x196>
				     or service.outData.error.overheat_fc /*or service.outData.error.overheat_c*/
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800399e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11a      	bne.n	80039de <_ZN9Convertor5alarmEv+0x196>
				     or service.outData.error.HV_low or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80039b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d111      	bne.n	80039de <_ZN9Convertor5alarmEv+0x196>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80039c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <_ZN9Convertor5alarmEv+0x196>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80039d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <_ZN9Convertor5alarmEv+0x19a>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <_ZN9Convertor5alarmEv+0x19c>
 80039e2:	2300      	movs	r3, #0
			if(not contactor.is_on()
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d026      	beq.n	8003a36 <_ZN9Convertor5alarmEv+0x1ee>
				stop();
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fed7 	bl	800379c <_ZN9Convertor4stopEv>
				timer_stop.stop();
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3358      	adds	r3, #88	; 0x58
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fd47 	bl	8001486 <_ZN5Timer4stopEv>
				rerun.start(5000);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd fd13 	bl	800142c <_ZN5Timer5startEm>
				led_red = true;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fc58 	bl	80022c2 <_ZN3PinaSEb>
				if (motor == SYNCHRON) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <_ZN9Convertor5alarmEv+0x1ee>
					unload = true;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fc4d 	bl	80022c2 <_ZN3PinaSEb>
					clump_timer.start(15000);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3368      	adds	r3, #104	; 0x68
 8003a2c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd fcfb 	bl	800142c <_ZN5Timer5startEm>
				}
			}

		}

		if (work.done() and state == starting) {
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3378      	adds	r3, #120	; 0x78
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fd32 	bl	80014a4 <_ZN5Timer4doneEv>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <_ZN9Convertor5alarmEv+0x20a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <_ZN9Convertor5alarmEv+0x20a>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <_ZN9Convertor5alarmEv+0x20c>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d021      	beq.n	8003a9c <_ZN9Convertor5alarmEv+0x254>
			stop();
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fe9f 	bl	800379c <_ZN9Convertor4stopEv>
			if (motor == SYNCHRON) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <_ZN9Convertor5alarmEv+0x23a>
				unload = true;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fc27 	bl	80022c2 <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3368      	adds	r3, #104	; 0x68
 8003a78:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fcd5 	bl	800142c <_ZN5Timer5startEm>
			}
			rest.start(240'000);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3388      	adds	r3, #136	; 0x88
 8003a86:	498e      	ldr	r1, [pc, #568]	; (8003cc0 <_ZN9Convertor5alarmEv+0x478>)
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fccf 	bl	800142c <_ZN5Timer5startEm>
			blink.start(300);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3398      	adds	r3, #152	; 0x98
 8003a92:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fcc8 	bl	800142c <_ZN5Timer5startEm>
//		}
//	}
//
//}

		if(adc.is_error_HV()) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fb05 	bl	80020b0 <_ZN4ADC_11is_error_HVEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d028      	beq.n	8003afe <_ZN9Convertor5alarmEv+0x2b6>
			adc.reset_error_HV();
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fb09 	bl	80020c8 <_ZN4ADC_14reset_error_HVEv>
//			led_red = true;
			stop();
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe70 	bl	800379c <_ZN9Convertor4stopEv>
			service.outData.error.HV = true;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3348      	adds	r3, #72	; 0x48
 8003ad0:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fca9 	bl	800142c <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <_ZN9Convertor5alarmEv+0x2b6>
				unload = true;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fbe9 	bl	80022c2 <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3368      	adds	r3, #104	; 0x68
 8003af4:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fc97 	bl	800142c <_ZN5Timer5startEm>
			}
		}

		if(adc.is_over_s() and not service.outData.error.current_S) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fa89 	bl	800201a <_ZN4ADC_9is_over_sEv>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <_ZN9Convertor5alarmEv+0x2e2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003b16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f083 0301 	eor.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <_ZN9Convertor5alarmEv+0x2e2>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <_ZN9Convertor5alarmEv+0x2e4>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02e      	beq.n	8003b8e <_ZN9Convertor5alarmEv+0x346>
			adc.reset_over_s();
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fa7c 	bl	8002032 <_ZN4ADC_12reset_over_sEv>
			led_red = true;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fbbe 	bl	80022c2 <_ZN3PinaSEb>
			stop();
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fe28 	bl	800379c <_ZN9Convertor4stopEv>
			service.outData.error.current_S = true;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3348      	adds	r3, #72	; 0x48
 8003b60:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fc61 	bl	800142c <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <_ZN9Convertor5alarmEv+0x346>
				unload = true;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fba1 	bl	80022c2 <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3368      	adds	r3, #104	; 0x68
 8003b84:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd fc4f 	bl	800142c <_ZN5Timer5startEm>
			}
		}

		if(adc.is_over_a() and not service.outData.error.current_A) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fa5a 	bl	800204c <_ZN4ADC_9is_over_aEv>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <_ZN9Convertor5alarmEv+0x372>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003ba6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <_ZN9Convertor5alarmEv+0x372>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <_ZN9Convertor5alarmEv+0x374>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02e      	beq.n	8003c1e <_ZN9Convertor5alarmEv+0x3d6>
			adc.reset_over_a();
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fa4d 	bl	8002064 <_ZN4ADC_12reset_over_aEv>
			led_red = true;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fb76 	bl	80022c2 <_ZN3PinaSEb>
			stop();
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fde0 	bl	800379c <_ZN9Convertor4stopEv>
			service.outData.error.current_A = true;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3348      	adds	r3, #72	; 0x48
 8003bf0:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd fc19 	bl	800142c <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10c      	bne.n	8003c1e <_ZN9Convertor5alarmEv+0x3d6>
				unload = true;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fb59 	bl	80022c2 <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3368      	adds	r3, #104	; 0x68
 8003c14:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fc07 	bl	800142c <_ZN5Timer5startEm>
			}
		}

		if(adc.is_over_c() and not service.outData.error.current_C) {
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fa2b 	bl	800207e <_ZN4ADC_9is_over_cEv>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <_ZN9Convertor5alarmEv+0x402>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003c36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <_ZN9Convertor5alarmEv+0x402>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <_ZN9Convertor5alarmEv+0x404>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d02e      	beq.n	8003cae <_ZN9Convertor5alarmEv+0x466>
			adc.reset_over_c();
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fa1e 	bl	8002096 <_ZN4ADC_12reset_over_cEv>
			led_red = true;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fb2e 	bl	80022c2 <_ZN3PinaSEb>
			stop();
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd98 	bl	800379c <_ZN9Convertor4stopEv>
			service.outData.error.current_C = true;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3348      	adds	r3, #72	; 0x48
 8003c80:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd fbd1 	bl	800142c <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10c      	bne.n	8003cae <_ZN9Convertor5alarmEv+0x466>
				unload = true;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fb11 	bl	80022c2 <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3368      	adds	r3, #104	; 0x68
 8003ca4:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fbbf 	bl	800142c <_ZN5Timer5startEm>
			}
		}

		adc.reset_measure();
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe f997 	bl	8001fe6 <_ZN4ADC_13reset_measureEv>
	}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	0003a980 	.word	0x0003a980

08003cc4 <HAL_TIM_PeriodElapsedCallback>:
};

Interrupt period_callback;
//Interrupt adc_comparator_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d102      	bne.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003cd8:	f7fd fc1a 	bl	8001510 <_ZN9Interrupt9interruptEv>
	}
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	20000360 	.word	0x20000360

08003cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8003cf2:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf4:	f001 fce0 	bl	80056b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cf8:	f000 f8c4 	bl	8003e84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cfc:	f000 fc38 	bl	8004570 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003d00:	f000 fc08 	bl	8004514 <_ZL11MX_DMA_Initv>
//  MX_CAN_Init();
  MX_TIM1_Init();
 8003d04:	f000 fa50 	bl	80041a8 <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 8003d08:	f000 fbd6 	bl	80044b8 <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 8003d0c:	f000 fb6c 	bl	80043e8 <_ZL12MX_TIM4_Initv>

  MX_ADC1_Init();
 8003d10:	f000 f926 	bl	8003f60 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003d14:	f000 f9a6 	bl	8004064 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8003d18:	f000 fb00 	bl	800431c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOC, LED_RED_Pin  };
 8003d1c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003d20:	2201      	movs	r2, #1
 8003d22:	4950      	ldr	r1, [pc, #320]	; (8003e64 <main+0x178>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fa73 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOB, LED_GREEN_Pin};
 8003d2a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d2e:	2220      	movs	r2, #32
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <main+0x17c>)
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fa6c 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin  };
 8003d38:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	4948      	ldr	r1, [pc, #288]	; (8003e64 <main+0x178>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fa64 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) ventilator = Pin{GPIOB, VENT_Pin     };
 8003d48:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	4946      	ldr	r1, [pc, #280]	; (8003e68 <main+0x17c>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fa5d 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) unload     = Pin{GPIOA, UNLOAD_Pin   };
 8003d56:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003d5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d5e:	4943      	ldr	r1, [pc, #268]	; (8003e6c <main+0x180>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fa55 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) condens    = Pin{GPIOC, CONDENS_Pin  };
 8003d66:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003d6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d6e:	493d      	ldr	r1, [pc, #244]	; (8003e64 <main+0x178>)
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fa4d 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) TD_DM      = Pin{GPIOB, TD_DM_Pin    };
 8003d76:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	493a      	ldr	r1, [pc, #232]	; (8003e68 <main+0x17c>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fa46 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) SP         = Pin{GPIOB, SP_Pin       };
 8003d84:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8c:	4936      	ldr	r1, [pc, #216]	; (8003e68 <main+0x17c>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fa3e 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Start      = Pin{GPIOB, START_Pin    };
 8003d94:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9c:	4932      	ldr	r1, [pc, #200]	; (8003e68 <main+0x17c>)
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fa36 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Motor      = Pin{GPIOA, ASYNC_Pin    };
 8003da4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003da8:	2204      	movs	r2, #4
 8003daa:	4930      	ldr	r1, [pc, #192]	; (8003e6c <main+0x180>)
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fa2f 	bl	8002210 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 4, 5};
 8003db2:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8003db6:	2305      	movs	r3, #5
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2304      	movs	r3, #4
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <main+0x184>)
 8003dbe:	492d      	ldr	r1, [pc, #180]	; (8003e74 <main+0x188>)
 8003dc0:	f7fd ffa2 	bl	8001d08 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8003dc4:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8003dc8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ff06 	bl	8004be0 <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) ntc = NTC{};
 8003dd4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe faa3 	bl	8002324 <_ZN3NTCC1Ev>
  decltype(auto) service = Service<In_data, Out_data>{adc, ntc, uart, interrupt_dma, interrupt_uart};
 8003dde:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8003de2:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8003de6:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8003dea:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8003dee:	4c22      	ldr	r4, [pc, #136]	; (8003e78 <main+0x18c>)
 8003df0:	9401      	str	r4, [sp, #4]
 8003df2:	4c22      	ldr	r4, [pc, #136]	; (8003e7c <main+0x190>)
 8003df4:	9400      	str	r4, [sp, #0]
 8003df6:	f000 ff05 	bl	8004c04 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>
  decltype(auto) contactor = Contactor{adc, service};
 8003dfa:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8003dfe:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8003e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fb38 	bl	800247c <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>
//  decltype(auto) cooler = Cooler{service};

  decltype(auto) convertor = Convertor{adc, service, contactor, period_callback/*, adc_comparator_callback*/, led_red, led_green, ventilator, unload, condens, TD_DM, SP, Start, Motor};
 8003e0c:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8003e10:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8003e14:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8003e18:	1d38      	adds	r0, r7, #4
 8003e1a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003e24:	9308      	str	r3, [sp, #32]
 8003e26:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003e30:	9306      	str	r3, [sp, #24]
 8003e32:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003e36:	9305      	str	r3, [sp, #20]
 8003e38:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003e42:	9303      	str	r3, [sp, #12]
 8003e44:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003e48:	9302      	str	r3, [sp, #8]
 8003e4a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <main+0x194>)
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	4623      	mov	r3, r4
 8003e56:	f7fe fcb7 	bl	80027c8 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_>
  /* USER CODE BEGIN WHILE */

//  contactor.start();
  while (1)
  {
	  convertor();
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fdc3 	bl	80029e8 <_ZN9ConvertorclEv>
 8003e62:	e7fa      	b.n	8003e5a <main+0x16e>
 8003e64:	40011000 	.word	0x40011000
 8003e68:	40010c00 	.word	0x40010c00
 8003e6c:	40010800 	.word	0x40010800
 8003e70:	20000354 	.word	0x20000354
 8003e74:	20000350 	.word	0x20000350
 8003e78:	2000035c 	.word	0x2000035c
 8003e7c:	20000358 	.word	0x20000358
 8003e80:	20000360 	.word	0x20000360

08003e84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b096      	sub	sp, #88	; 0x58
 8003e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e8e:	2228      	movs	r2, #40	; 0x28
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f007 f90a 	bl	800b0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ed6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003edc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 fb99 	bl	8007618 <HAL_RCC_OscConfig>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8003ef6:	f000 fbe5 	bl	80046c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003efa:	230f      	movs	r3, #15
 8003efc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003efe:	2302      	movs	r3, #2
 8003f00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f10:	f107 031c 	add.w	r3, r7, #28
 8003f14:	2102      	movs	r1, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f003 fdfe 	bl	8007b18 <HAL_RCC_ClockConfig>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf14      	ite	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	2300      	moveq	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8003f2c:	f000 fbca 	bl	80046c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f30:	2302      	movs	r3, #2
 8003f32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f003 ff87 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8003f52:	f000 fbb7 	bl	80046c4 <Error_Handler>
  }
}
 8003f56:	bf00      	nop
 8003f58:	3758      	adds	r7, #88	; 0x58
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003f70:	4b3a      	ldr	r3, [pc, #232]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f72:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <_ZL12MX_ADC1_Initv+0x100>)
 8003f74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f8c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f9e:	482f      	ldr	r0, [pc, #188]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003fa0:	f001 fbda 	bl	8005758 <HAL_ADC_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8003fb4:	f000 fb86 	bl	80046c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4824      	ldr	r0, [pc, #144]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003fca:	f001 feb7 	bl	8005d3c <HAL_ADC_ConfigChannel>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8003fde:	f000 fb71 	bl	80046c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	481b      	ldr	r0, [pc, #108]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8003ff0:	f001 fea4 	bl	8005d3c <HAL_ADC_ConfigChannel>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bf14      	ite	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	2300      	moveq	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8004004:	f000 fb5e 	bl	80046c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004008:	2303      	movs	r3, #3
 800400a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800400c:	2303      	movs	r3, #3
 800400e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4811      	ldr	r0, [pc, #68]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 8004016:	f001 fe91 	bl	8005d3c <HAL_ADC_ConfigChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 800402a:	f000 fb4b 	bl	80046c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800402e:	2307      	movs	r3, #7
 8004030:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004032:	2304      	movs	r3, #4
 8004034:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4808      	ldr	r0, [pc, #32]	; (800405c <_ZL12MX_ADC1_Initv+0xfc>)
 800403c:	f001 fe7e 	bl	8005d3c <HAL_ADC_ConfigChannel>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 8004050:	f000 fb38 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000108 	.word	0x20000108
 8004060:	40012400 	.word	0x40012400

08004064 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08e      	sub	sp, #56	; 0x38
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800406a:	f107 0320 	add.w	r3, r7, #32
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	611a      	str	r2, [r3, #16]
 800408a:	615a      	str	r2, [r3, #20]
 800408c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800408e:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 8004090:	4a44      	ldr	r2, [pc, #272]	; (80041a4 <_ZL12MX_ADC2_Initv+0x140>)
 8004092:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004094:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 8004096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800409a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800409c:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80040a2:	4b3f      	ldr	r3, [pc, #252]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040a8:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 80040aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80040ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040b0:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80040b6:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80040bc:	4838      	ldr	r0, [pc, #224]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 80040be:	f001 fb4b 	bl	8005758 <HAL_ADC_Init>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <_ZL12MX_ADC2_Initv+0x72>
  {
    Error_Handler();
 80040d2:	f000 faf7 	bl	80046c4 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_INJEC;
 80040d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040da:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 2700;
 80040dc:	f640 238c 	movw	r3, #2700	; 0xa8c
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = ENABLE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80040ec:	f107 0320 	add.w	r3, r7, #32
 80040f0:	4619      	mov	r1, r3
 80040f2:	482b      	ldr	r0, [pc, #172]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 80040f4:	f001 ff1a 	bl	8005f2c <HAL_ADC_AnalogWDGConfig>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <_ZL12MX_ADC2_Initv+0xa8>
  {
    Error_Handler();
 8004108:	f000 fadc 	bl	80046c4 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800410c:	2304      	movs	r3, #4
 800410e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8004110:	2301      	movs	r3, #1
 8004112:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004114:	2303      	movs	r3, #3
 8004116:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8004118:	2303      	movs	r3, #3
 800411a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800411c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004120:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	4619      	mov	r1, r3
 8004132:	481b      	ldr	r0, [pc, #108]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 8004134:	f002 f958 	bl	80063e8 <HAL_ADCEx_InjectedConfigChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 8004148:	f000 fabc 	bl	80046c4 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800414c:	2305      	movs	r3, #5
 800414e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8004150:	2302      	movs	r3, #2
 8004152:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4811      	ldr	r0, [pc, #68]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 800415a:	f002 f945 	bl	80063e8 <HAL_ADCEx_InjectedConfigChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <_ZL12MX_ADC2_Initv+0x10e>
  {
    Error_Handler();
 800416e:	f000 faa9 	bl	80046c4 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8004172:	2306      	movs	r3, #6
 8004174:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8004176:	2303      	movs	r3, #3
 8004178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4808      	ldr	r0, [pc, #32]	; (80041a0 <_ZL12MX_ADC2_Initv+0x13c>)
 8004180:	f002 f932 	bl	80063e8 <HAL_ADCEx_InjectedConfigChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <_ZL12MX_ADC2_Initv+0x134>
  {
    Error_Handler();
 8004194:	f000 fa96 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004198:	bf00      	nop
 800419a:	3738      	adds	r7, #56	; 0x38
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000138 	.word	0x20000138
 80041a4:	40012800 	.word	0x40012800

080041a8 <_ZL12MX_TIM1_Initv>:
//  * @brief TIM1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_TIM1_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b092      	sub	sp, #72	; 0x48
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
 80041c8:	615a      	str	r2, [r3, #20]
 80041ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	2220      	movs	r2, #32
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f006 ff6a 	bl	800b0ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041d8:	4b4e      	ldr	r3, [pc, #312]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80041da:	4a4f      	ldr	r2, [pc, #316]	; (8004318 <_ZL12MX_TIM1_Initv+0x170>)
 80041dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80041de:	4b4d      	ldr	r3, [pc, #308]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80041e4:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80041e6:	2220      	movs	r2, #32
 80041e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80041ea:	4b4a      	ldr	r3, [pc, #296]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80041ec:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80041f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f2:	4b48      	ldr	r3, [pc, #288]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041fe:	4b45      	ldr	r3, [pc, #276]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004204:	4843      	ldr	r0, [pc, #268]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 8004206:	f003 ffb6 	bl	8008176 <HAL_TIM_PWM_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800421a:	f000 fa53 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004226:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800422a:	4619      	mov	r1, r3
 800422c:	4839      	ldr	r0, [pc, #228]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 800422e:	f004 feb1 	bl	8008f94 <HAL_TIMEx_MasterConfigSynchronization>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8004242:	f000 fa3f 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004246:	2360      	movs	r3, #96	; 0x60
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800424e:	2300      	movs	r3, #0
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004252:	2300      	movs	r3, #0
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004256:	2300      	movs	r3, #0
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004266:	2200      	movs	r2, #0
 8004268:	4619      	mov	r1, r3
 800426a:	482a      	ldr	r0, [pc, #168]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 800426c:	f004 fa5c 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8004280:	f000 fa20 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004288:	2204      	movs	r2, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4821      	ldr	r0, [pc, #132]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 800428e:	f004 fa4b 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80042a2:	f000 fa0f 	bl	80046c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042aa:	2208      	movs	r2, #8
 80042ac:	4619      	mov	r1, r3
 80042ae:	4819      	ldr	r0, [pc, #100]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80042b0:	f004 fa3a 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80042c4:	f000 f9fe 	bl	80046c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 80042d4:	2373      	movs	r3, #115	; 0x73
 80042d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	480a      	ldr	r0, [pc, #40]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 80042ec:	f004 febe 	bl	800906c <HAL_TIMEx_ConfigBreakDeadTime>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bf14      	ite	ne
 80042f6:	2301      	movne	r3, #1
 80042f8:	2300      	moveq	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8004300:	f000 f9e0 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004304:	4803      	ldr	r0, [pc, #12]	; (8004314 <_ZL12MX_TIM1_Initv+0x16c>)
 8004306:	f000 ffb1 	bl	800526c <HAL_TIM_MspPostInit>

}
 800430a:	bf00      	nop
 800430c:	3748      	adds	r7, #72	; 0x48
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200001ac 	.word	0x200001ac
 8004318:	40012c00 	.word	0x40012c00

0800431c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004322:	f107 0320 	add.w	r3, r7, #32
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	615a      	str	r2, [r3, #20]
 800433c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800433e:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 8004340:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <_ZL12MX_TIM3_Initv+0xc8>)
 8004342:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8004344:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 8004346:	2213      	movs	r2, #19
 8004348:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 8004352:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004356:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004364:	481e      	ldr	r0, [pc, #120]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 8004366:	f003 feb7 	bl	80080d8 <HAL_TIM_OC_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800437a:	f000 f9a3 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004386:	f107 0320 	add.w	r3, r7, #32
 800438a:	4619      	mov	r1, r3
 800438c:	4814      	ldr	r0, [pc, #80]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 800438e:	f004 fe01 	bl	8008f94 <HAL_TIMEx_MasterConfigSynchronization>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80043a2:	f000 f98f 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80043a6:	2300      	movs	r3, #0
 80043a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	2200      	movs	r2, #0
 80043ba:	4619      	mov	r1, r3
 80043bc:	4808      	ldr	r0, [pc, #32]	; (80043e0 <_ZL12MX_TIM3_Initv+0xc4>)
 80043be:	f004 f95b 	bl	8008678 <HAL_TIM_OC_ConfigChannel>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80043d2:	f000 f977 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80043d6:	bf00      	nop
 80043d8:	3728      	adds	r7, #40	; 0x28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200001f4 	.word	0x200001f4
 80043e4:	40000400 	.word	0x40000400

080043e8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ee:	f107 0320 	add.w	r3, r7, #32
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	611a      	str	r2, [r3, #16]
 8004406:	615a      	str	r2, [r3, #20]
 8004408:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800440c:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <_ZL12MX_TIM4_Initv+0xcc>)
 800440e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004412:	2200      	movs	r2, #0
 8004414:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800441e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004422:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442a:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004430:	481f      	ldr	r0, [pc, #124]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004432:	f003 fea0 	bl	8008176 <HAL_TIM_PWM_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8004446:	f000 f93d 	bl	80046c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004452:	f107 0320 	add.w	r3, r7, #32
 8004456:	4619      	mov	r1, r3
 8004458:	4815      	ldr	r0, [pc, #84]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800445a:	f004 fd9b 	bl	8008f94 <HAL_TIMEx_MasterConfigSynchronization>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800446e:	f000 f929 	bl	80046c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004472:	2360      	movs	r3, #96	; 0x60
 8004474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2200      	movs	r2, #0
 8004486:	4619      	mov	r1, r3
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800448a:	f004 f94d 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800449e:	f000 f911 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <_ZL12MX_TIM4_Initv+0xc8>)
 80044a4:	f000 fee2 	bl	800526c <HAL_TIM_MspPostInit>

}
 80044a8:	bf00      	nop
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	2000023c 	.word	0x2000023c
 80044b4:	40000800 	.word	0x40000800

080044b8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044bc:	4b13      	ldr	r3, [pc, #76]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044be:	4a14      	ldr	r2, [pc, #80]	; (8004510 <_ZL19MX_USART3_UART_Initv+0x58>)
 80044c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044c2:	4b12      	ldr	r3, [pc, #72]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044d8:	2200      	movs	r2, #0
 80044da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044de:	220c      	movs	r2, #12
 80044e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e8:	4b08      	ldr	r3, [pc, #32]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <_ZL19MX_USART3_UART_Initv+0x54>)
 80044f0:	f004 fe43 	bl	800917a <HAL_UART_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8004504:	f000 f8de 	bl	80046c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000284 	.word	0x20000284
 8004510:	40004800 	.word	0x40004800

08004514 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <_ZL11MX_DMA_Initv+0x58>)
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <_ZL11MX_DMA_Initv+0x58>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6153      	str	r3, [r2, #20]
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <_ZL11MX_DMA_Initv+0x58>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	200b      	movs	r0, #11
 8004538:	f002 f9d9 	bl	80068ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800453c:	200b      	movs	r0, #11
 800453e:	f002 f9f2 	bl	8006926 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004542:	2200      	movs	r2, #0
 8004544:	2100      	movs	r1, #0
 8004546:	200c      	movs	r0, #12
 8004548:	f002 f9d1 	bl	80068ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800454c:	200c      	movs	r0, #12
 800454e:	f002 f9ea 	bl	8006926 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004552:	2200      	movs	r2, #0
 8004554:	2100      	movs	r1, #0
 8004556:	200d      	movs	r0, #13
 8004558:	f002 f9c9 	bl	80068ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800455c:	200d      	movs	r0, #13
 800455e:	f002 f9e2 	bl	8006926 <HAL_NVIC_EnableIRQ>

}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000

08004570 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004584:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	4a49      	ldr	r2, [pc, #292]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 800458a:	f043 0320 	orr.w	r3, r3, #32
 800458e:	6193      	str	r3, [r2, #24]
 8004590:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800459c:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045a2:	f043 0310 	orr.w	r3, r3, #16
 80045a6:	6193      	str	r3, [r2, #24]
 80045a8:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b4:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	4a3d      	ldr	r2, [pc, #244]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	6193      	str	r3, [r2, #24]
 80045c0:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	6193      	str	r3, [r2, #24]
 80045d8:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <_ZL12MX_GPIO_Initv+0x140>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin, GPIO_PIN_RESET);
 80045e4:	2200      	movs	r2, #0
 80045e6:	f241 2101 	movw	r1, #4609	; 0x1201
 80045ea:	4832      	ldr	r0, [pc, #200]	; (80046b4 <_ZL12MX_GPIO_Initv+0x144>)
 80045ec:	f002 ffe3 	bl	80075b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UNLOAD_GPIO_Port, UNLOAD_Pin, GPIO_PIN_RESET);
 80045f0:	2200      	movs	r2, #0
 80045f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045f6:	4830      	ldr	r0, [pc, #192]	; (80046b8 <_ZL12MX_GPIO_Initv+0x148>)
 80045f8:	f002 ffdd 	bl	80075b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VENT_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2130      	movs	r1, #48	; 0x30
 8004600:	482e      	ldr	r0, [pc, #184]	; (80046bc <_ZL12MX_GPIO_Initv+0x14c>)
 8004602:	f002 ffd8 	bl	80075b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_CAN_Pin CONDENS_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin;
 8004606:	f241 2301 	movw	r3, #4609	; 0x1201
 800460a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004614:	2302      	movs	r3, #2
 8004616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004618:	f107 0310 	add.w	r3, r7, #16
 800461c:	4619      	mov	r1, r3
 800461e:	4825      	ldr	r0, [pc, #148]	; (80046b4 <_ZL12MX_GPIO_Initv+0x144>)
 8004620:	f002 fe1e 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASYNC_Pin */
  GPIO_InitStruct.Pin = ASYNC_Pin;
 8004624:	2304      	movs	r3, #4
 8004626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ASYNC_GPIO_Port, &GPIO_InitStruct);
 8004630:	f107 0310 	add.w	r3, r7, #16
 8004634:	4619      	mov	r1, r3
 8004636:	4820      	ldr	r0, [pc, #128]	; (80046b8 <_ZL12MX_GPIO_Initv+0x148>)
 8004638:	f002 fe12 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pin : UNLOAD_Pin */
  GPIO_InitStruct.Pin = UNLOAD_Pin;
 800463c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004642:	2301      	movs	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464a:	2302      	movs	r3, #2
 800464c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UNLOAD_GPIO_Port, &GPIO_InitStruct);
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	4619      	mov	r1, r3
 8004654:	4818      	ldr	r0, [pc, #96]	; (80046b8 <_ZL12MX_GPIO_Initv+0x148>)
 8004656:	f002 fe03 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pin : Contactor_Pin */
  GPIO_InitStruct.Pin = Contactor_Pin;
 800465a:	2304      	movs	r3, #4
 800465c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Contactor_GPIO_Port, &GPIO_InitStruct);
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	4619      	mov	r1, r3
 800466c:	4814      	ldr	r0, [pc, #80]	; (80046c0 <_ZL12MX_GPIO_Initv+0x150>)
 800466e:	f002 fdf7 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pins : VENT_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = VENT_Pin|LED_GREEN_Pin;
 8004672:	2330      	movs	r3, #48	; 0x30
 8004674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004676:	2301      	movs	r3, #1
 8004678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467e:	2302      	movs	r3, #2
 8004680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004682:	f107 0310 	add.w	r3, r7, #16
 8004686:	4619      	mov	r1, r3
 8004688:	480c      	ldr	r0, [pc, #48]	; (80046bc <_ZL12MX_GPIO_Initv+0x14c>)
 800468a:	f002 fde9 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pins : TD_DM_Pin SP_Pin START_Pin */
  GPIO_InitStruct.Pin = TD_DM_Pin|SP_Pin|START_Pin;
 800468e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	4619      	mov	r1, r3
 80046a2:	4806      	ldr	r0, [pc, #24]	; (80046bc <_ZL12MX_GPIO_Initv+0x14c>)
 80046a4:	f002 fddc 	bl	8007260 <HAL_GPIO_Init>

}
 80046a8:	bf00      	nop
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40010800 	.word	0x40010800
 80046bc:	40010c00 	.word	0x40010c00
 80046c0:	40011400 	.word	0x40011400

080046c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046c8:	b672      	cpsid	i
}
 80046ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046cc:	e7fe      	b.n	80046cc <Error_Handler+0x8>

080046ce <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	2b0b      	cmp	r3, #11
 80046de:	d808      	bhi.n	80046f2 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	1c59      	adds	r1, r3, #1
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6311      	str	r1, [r2, #48]	; 0x30
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 800470a:	2300      	movs	r3, #0
 800470c:	73bb      	strb	r3, [r7, #14]
 800470e:	7bba      	ldrb	r2, [r7, #14]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	429a      	cmp	r2, r3
 8004716:	d20d      	bcs.n	8004734 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 8004718:	7bba      	ldrb	r2, [r7, #14]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d102      	bne.n	800472c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 8004726:	7bbb      	ldrb	r3, [r7, #14]
 8004728:	73fb      	strb	r3, [r7, #15]
          break;
 800472a:	e003      	b.n	8004734 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	3301      	adds	r3, #1
 8004730:	73bb      	strb	r3, [r7, #14]
 8004732:	e7ec      	b.n	800470e <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	737b      	strb	r3, [r7, #13]
 8004738:	7b7a      	ldrb	r2, [r7, #13]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	429a      	cmp	r2, r3
 8004740:	d20c      	bcs.n	800475c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 8004742:	7b7b      	ldrb	r3, [r7, #13]
 8004744:	1c59      	adds	r1, r3, #1
 8004746:	7b7a      	ldrb	r2, [r7, #13]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8004754:	7b7b      	ldrb	r3, [r7, #13]
 8004756:	3301      	adds	r3, #1
 8004758:	737b      	strb	r3, [r7, #13]
 800475a:	e7ed      	b.n	8004738 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	b2db      	uxtb	r3, r3
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 80047c0:	f003 faf6 	bl	8007db0 <HAL_RCC_GetHCLKFreq>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 f8b6 	bl	8006942 <HAL_SYSTICK_Config>
	}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	10624dd3 	.word	0x10624dd3

080047e4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80047e4:	b5b0      	push	{r4, r5, r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fb fe6c 	bl	80004cc <__aeabi_i2d>
 80047f4:	4604      	mov	r4, r0
 80047f6:	460d      	mov	r5, r1
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	f7fb fe67 	bl	80004cc <__aeabi_i2d>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f005 fc25 	bl	800a054 <pow>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
    }
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bdb0      	pop	{r4, r5, r7, pc}

08004818 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
		outData.voltage_board  = k_adc * adc[V24] * 100 + 6; // 6 падение на диоде
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fb7e 	bl	8001f28 <_ZN4ADC_ixEh>
 800482c:	4603      	mov	r3, r0
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc fa48 	bl	8000cc4 <__aeabi_i2f>
 8004834:	4603      	mov	r3, r0
 8004836:	49c0      	ldr	r1, [pc, #768]	; (8004b38 <_ZN7ServiceI7In_data8Out_dataEclEv+0x320>)
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc fa97 	bl	8000d6c <__aeabi_fmul>
 800483e:	4603      	mov	r3, r0
 8004840:	49be      	ldr	r1, [pc, #760]	; (8004b3c <_ZN7ServiceI7In_data8Out_dataEclEv+0x324>)
 8004842:	4618      	mov	r0, r3
 8004844:	f7fc fa92 	bl	8000d6c <__aeabi_fmul>
 8004848:	4603      	mov	r3, r0
 800484a:	49bd      	ldr	r1, [pc, #756]	; (8004b40 <_ZN7ServiceI7In_data8Out_dataEclEv+0x328>)
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc f985 	bl	8000b5c <__addsf3>
 8004852:	4603      	mov	r3, r0
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc fc8b 	bl	8001170 <__aeabi_f2uiz>
 800485a:	4603      	mov	r3, r0
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		outData.convertor_temp  = ntc(adc[Trad]);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685c      	ldr	r4, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd fb5a 	bl	8001f28 <_ZN4ADC_ixEh>
 8004874:	4603      	mov	r3, r0
 8004876:	4619      	mov	r1, r3
 8004878:	4620      	mov	r0, r4
 800487a:	f7fd fd67 	bl	800234c <_ZN3NTCclEt>
 800487e:	4603      	mov	r3, r0
 8004880:	b21a      	sxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		outData.current        = (abs(adc.value(PS) - adc.offset_I_S)) * 100 / 21;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd fb5b 	bl	8001f4a <_ZN4ADC_5valueEh>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfb8      	it	lt
 80048a6:	425b      	neglt	r3, r3
 80048a8:	2264      	movs	r2, #100	; 0x64
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	4aa5      	ldr	r2, [pc, #660]	; (8004b44 <_ZN7ServiceI7In_data8Out_dataEclEv+0x32c>)
 80048b0:	fb82 1203 	smull	r1, r2, r2, r3
 80048b4:	1092      	asrs	r2, r2, #2
 80048b6:	17db      	asrs	r3, r3, #31
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		outData.current_A      = adc.current();
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fd fb74 	bl	8001fb4 <_ZN4ADC_7currentEv>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		new_hv = (adc.value_HV() * 350 / 4095 * 45) / 10;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fb77 	bl	8001fce <_ZN4ADC_8value_HVEv>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80048e8:	fb03 f302 	mul.w	r3, r3, r2
 80048ec:	4a96      	ldr	r2, [pc, #600]	; (8004b48 <_ZN7ServiceI7In_data8Out_dataEclEv+0x330>)
 80048ee:	fb82 1203 	smull	r1, r2, r2, r3
 80048f2:	441a      	add	r2, r3
 80048f4:	12d2      	asrs	r2, r2, #11
 80048f6:	17db      	asrs	r3, r3, #31
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	011a      	lsls	r2, r3, #4
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	4a91      	ldr	r2, [pc, #580]	; (8004b4c <_ZN7ServiceI7In_data8Out_dataEclEv+0x334>)
 8004906:	fb82 1203 	smull	r1, r2, r2, r3
 800490a:	1092      	asrs	r2, r2, #2
 800490c:	17db      	asrs	r3, r3, #31
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	b21a      	sxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		if(measure_timer.done()) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3338      	adds	r3, #56	; 0x38
 800491c:	4618      	mov	r0, r3
 800491e:	f7fc fdc1 	bl	80014a4 <_ZN5Timer4doneEv>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d062      	beq.n	80049ee <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d6>
			measure_timer.stop();
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3338      	adds	r3, #56	; 0x38
 800492c:	4618      	mov	r0, r3
 800492e:	f7fc fdaa 	bl	8001486 <_ZN5Timer4stopEv>
			measure_timer.start();
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3338      	adds	r3, #56	; 0x38
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc fdc6 	bl	80014c8 <_ZN5Timer5startEv>
			arr_new_hv[m] = new_hv;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004948:	b291      	uxth	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	3308      	adds	r3, #8
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	460a      	mov	r2, r1
 8004954:	809a      	strh	r2, [r3, #4]
			if (m < (qty_measure - 1)) m++;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800495c:	2b06      	cmp	r3, #6
 800495e:	d808      	bhi.n	8004972 <_ZN7ServiceI7In_data8Out_dataEclEv+0x15a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004966:	3301      	adds	r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004970:	e003      	b.n	800497a <_ZN7ServiceI7In_data8Out_dataEclEv+0x162>
			else m = 0;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			HV_avarage = 0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	84da      	strh	r2, [r3, #38]	; 0x26
			for (auto i = 0; i < qty_measure; i++) {
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b07      	cmp	r3, #7
 8004988:	dc12      	bgt.n	80049b0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x198>
				HV_avarage += arr_new_hv[i];
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004990:	b29a      	uxth	r2, r3
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3308      	adds	r3, #8
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	440b      	add	r3, r1
 800499c:	889b      	ldrh	r3, [r3, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	b21a      	sxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	84da      	strh	r2, [r3, #38]	; 0x26
			for (auto i = 0; i < qty_measure; i++) {
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e7e9      	b.n	8004984 <_ZN7ServiceI7In_data8Out_dataEclEv+0x16c>
			HV_avarage /= qty_measure;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	da00      	bge.n	80049bc <_ZN7ServiceI7In_data8Out_dataEclEv+0x1a4>
 80049ba:	3307      	adds	r3, #7
 80049bc:	10db      	asrs	r3, r3, #3
 80049be:	b21a      	sxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26
			outData.high_voltage  += (HV_avarage - outData.high_voltage) * 10 / 40;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80049d0:	4619      	mov	r1, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80049d8:	1acb      	subs	r3, r1, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da00      	bge.n	80049e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1c8>
 80049de:	3303      	adds	r3, #3
 80049e0:	109b      	asrs	r3, r3, #2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		kolhoz ^= timer.event();
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3328      	adds	r3, #40	; 0x28
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fc fd2d 	bl	8001452 <_ZN5Timer5eventEv>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004a02:	4053      	eors	r3, r2
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		if (event or kolhoz) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d105      	bne.n	8004a2c <_ZN7ServiceI7In_data8Out_dataEclEv+0x214>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80d6 	beq.w	8004bd8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x3c0>
			if(uart.buffer[0] == 4 or kolhoz) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f94d 	bl	8004cd4 <_ZN10Net_bufferILh26EEixEi>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d004      	beq.n	8004a4a <_ZN7ServiceI7In_data8Out_dataEclEv+0x232>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <_ZN7ServiceI7In_data8Out_dataEclEv+0x236>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <_ZN7ServiceI7In_data8Out_dataEclEv+0x238>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d07d      	beq.n	8004b50 <_ZN7ServiceI7In_data8Out_dataEclEv+0x338>
				uart.buffer.clear();
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f949 	bl	8004cf2 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.voltage_board
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 f94e 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004a74:	4602      	mov	r2, r0
						    << outData.pressure
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 f946 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004a84:	4602      	mov	r2, r0
							<< outData.PWM
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 f95c 	bl	8004d4c <_ZN10Net_bufferILh26EElsEs>
 8004a94:	4602      	mov	r2, r0
							<< outData.convertor_temp
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 f954 	bl	8004d4c <_ZN10Net_bufferILh26EElsEs>
 8004aa4:	4602      	mov	r2, r0
							<< outData.current
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 f92e 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004ab4:	4602      	mov	r2, r0
							<< outData.current_A
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 f926 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004ac4:	4602      	mov	r2, r0
							<< outData.current_C
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 f91e 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004ad4:	4602      	mov	r2, r0
							<< outData.high_voltage
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 f916 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004ae4:	4602      	mov	r2, r0
							<< outData.max_current
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 f90e 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004af4:	4602      	mov	r2, r0
							<< outData.max_current_A
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 f906 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004b04:	4602      	mov	r2, r0
							<< outData.max_current_C
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 f8fe 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004b14:	4602      	mov	r2, r0
							<< outData.U_phase
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 f8f6 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004b24:	4602      	mov	r2, r0
							<< arOutData[12];
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f000 f8ee 	bl	8004d10 <_ZN10Net_bufferILh26EElsEt>
 8004b34:	e02f      	b.n	8004b96 <_ZN7ServiceI7In_data8Out_dataEclEv+0x37e>
 8004b36:	bf00      	nop
 8004b38:	3a534067 	.word	0x3a534067
 8004b3c:	42c80000 	.word	0x42c80000
 8004b40:	40c00000 	.word	0x40c00000
 8004b44:	30c30c31 	.word	0x30c30c31
 8004b48:	80080081 	.word	0x80080081
 8004b4c:	66666667 	.word	0x66666667
			} else if(uart.buffer[0] == '+') {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	3304      	adds	r3, #4
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f8bb 	bl	8004cd4 <_ZN10Net_bufferILh26EEixEi>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b2b      	cmp	r3, #43	; 0x2b
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d013      	beq.n	8004b96 <_ZN7ServiceI7In_data8Out_dataEclEv+0x37e>
				uart.buffer.clear();
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 f8bc 	bl	8004cf2 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	214f      	movs	r1, #79	; 0x4f
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f900 	bl	8004d88 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	214b      	movs	r1, #75	; 0x4b
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f8f9 	bl	8004d88 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			kolhoz = false;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			if(uart.buffer.size())
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f908 	bl	8004dc2 <_ZN10Net_bufferILh26EE4sizeEv>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <_ZN7ServiceI7In_data8Out_dataEclEv+0x3b6>
				uart.transmit();
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f90a 	bl	8004de0 <_ZN5UART_ILj26EE8transmitEv>
	}
 8004bcc:	e004      	b.n	8004bd8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x3c0>
				uart.receive();
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f926 	bl	8004e24 <_ZN5UART_ILj26EE7receiveEv>
	}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd90      	pop	{r4, r7, pc}

08004be0 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f931 	bl	8004e5c <_ZN10Net_bufferILh26EEC1Ev>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>:
	Service (
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	60da      	str	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	611a      	str	r2, [r3, #16]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3314      	adds	r3, #20
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3328      	adds	r3, #40	; 0x28
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fc fb9b 	bl	800138c <_ZN5TimerC1Ev>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3338      	adds	r3, #56	; 0x38
 8004c5a:	2119      	movs	r1, #25
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fc fbad 	bl	80013bc <_ZN5TimerC1Em>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3350      	adds	r3, #80	; 0x50
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f8ef 	bl	8004e74 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3358      	adds	r3, #88	; 0x58
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f907 	bl	8004eb0 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3362      	adds	r3, #98	; 0x62
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	609a      	str	r2, [r3, #8]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	611a      	str	r2, [r3, #16]
 8004cb2:	615a      	str	r2, [r3, #20]
 8004cb4:	831a      	strh	r2, [r3, #24]
		uart.receive();
 8004cb6:	6838      	ldr	r0, [r7, #0]
 8004cb8:	f000 f8b4 	bl	8004e24 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(500);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3328      	adds	r3, #40	; 0x28
 8004cc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc fbb1 	bl	800142c <_ZN5Timer5startEm>
	}
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	705a      	strb	r2, [r3, #1]
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004d1c:	f107 030e 	add.w	r3, r7, #14
 8004d20:	f107 020f 	add.w	r2, r7, #15
 8004d24:	8879      	ldrh	r1, [r7, #2]
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8e0 	bl	8004eec <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f8f0 	bl	8004f16 <_ZN10Net_bufferILh26EElsEh>
 8004d36:	4602      	mov	r2, r0
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 f8ea 	bl	8004f16 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004d42:	687b      	ldr	r3, [r7, #4]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <_ZN10Net_bufferILh26EElsEs>:

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (int16_t v)
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004d58:	8879      	ldrh	r1, [r7, #2]
 8004d5a:	f107 030e 	add.w	r3, r7, #14
 8004d5e:	f107 020f 	add.w	r2, r7, #15
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8c2 	bl	8004eec <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f8d2 	bl	8004f16 <_ZN10Net_bufferILh26EElsEh>
 8004d72:	4602      	mov	r2, r0
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 f8cc 	bl	8004f16 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004d7e:	687b      	ldr	r3, [r7, #4]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b19      	cmp	r3, #25
 8004d9a:	d80c      	bhi.n	8004db6 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	461a      	mov	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	3301      	adds	r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	705a      	strb	r2, [r3, #1]
    return *this;
 8004db6:	687b      	ldr	r3, [r7, #4]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	785a      	ldrb	r2, [r3, #1]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f8af 	bl	8004f50 <_ZN10Net_bufferILh26EE3ptrEv>
 8004df2:	4604      	mov	r4, r0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ffe2 	bl	8004dc2 <_ZN10Net_bufferILh26EE4sizeEv>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	4621      	mov	r1, r4
 8004e06:	4806      	ldr	r0, [pc, #24]	; (8004e20 <_ZN5UART_ILj26EE8transmitEv+0x40>)
 8004e08:	f004 fa04 	bl	8009214 <HAL_UART_Transmit_DMA>
		led_red = true;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd fa55 	bl	80022c2 <_ZN3PinaSEb>
	}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}
 8004e20:	20000284 	.word	0x20000284

08004e24 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f88d 	bl	8004f50 <_ZN10Net_bufferILh26EE3ptrEv>
 8004e36:	4603      	mov	r3, r0
 8004e38:	221a      	movs	r2, #26
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4806      	ldr	r0, [pc, #24]	; (8004e58 <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8004e3e:	f004 fa55 	bl	80092ec <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd fa3a 	bl	80022c2 <_ZN3PinaSEb>
	}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000284 	.word	0x20000284

08004e5c <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
      clear();
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff44 	bl	8004cf2 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc fed9 	bl	8001c38 <_ZN12InterruptingC1Ev>
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fc fb2b 	bl	80014f6 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	0800b1d8 	.word	0x0800b1d8

08004eb0 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fc febb 	bl	8001c38 <_ZN12InterruptingC1Ev>
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc fb0d 	bl	80014f6 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	0800b1cc 	.word	0x0800b1cc

08004eec <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8004efc:	897b      	ldrh	r3, [r7, #10]
 8004efe:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8004f00:	7d3a      	ldrb	r2, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8004f06:	7d7a      	ldrb	r2, [r7, #21]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
    }
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b19      	cmp	r3, #25
 8004f28:	d80c      	bhi.n	8004f44 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	705a      	strb	r2, [r3, #1]
    return *this;
 8004f44:	687b      	ldr	r3, [r7, #4]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
	...

08004f68 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d102      	bne.n	8004f88 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8004f82:	4803      	ldr	r0, [pc, #12]	; (8004f90 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004f84:	f7fc f982 	bl	800128c <_ZN11TickUpdaterC1Ev>
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000098 	.word	0x20000098

08004f94 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f811 	bl	8004fc8 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f811 	bl	8004fe2 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
		uart.receive();
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff25 	bl	8004e24 <_ZN5UART_ILj26EE7receiveEv>
	}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
		event = true;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		timer.stop();
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3328      	adds	r3, #40	; 0x28
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc fa45 	bl	8001486 <_ZN5Timer4stopEv>
	}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_GLOBAL__sub_I_systemtick>:
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
 8005008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800500c:	2001      	movs	r0, #1
 800500e:	f7ff ffab 	bl	8004f68 <_Z41__static_initialization_and_destruction_0ii>
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_MspInit+0x5c>)
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	4a14      	ldr	r2, [pc, #80]	; (8005070 <HAL_MspInit+0x5c>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6193      	str	r3, [r2, #24]
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_MspInit+0x5c>)
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_MspInit+0x5c>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <HAL_MspInit+0x5c>)
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503c:	61d3      	str	r3, [r2, #28]
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_MspInit+0x5c>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <HAL_MspInit+0x60>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <HAL_MspInit+0x60>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	40021000 	.word	0x40021000
 8005074:	40010000 	.word	0x40010000

08005078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005080:	f107 0318 	add.w	r3, r7, #24
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a44      	ldr	r2, [pc, #272]	; (80051a4 <HAL_ADC_MspInit+0x12c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d152      	bne.n	800513e <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005098:	4b43      	ldr	r3, [pc, #268]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	4a42      	ldr	r2, [pc, #264]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 800509e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a2:	6193      	str	r3, [r2, #24]
 80050a4:	4b40      	ldr	r3, [pc, #256]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b0:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6193      	str	r3, [r2, #24]
 80050bc:	4b3a      	ldr	r3, [pc, #232]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 80050c8:	238b      	movs	r3, #139	; 0x8b
 80050ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050cc:	2303      	movs	r3, #3
 80050ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d0:	f107 0318 	add.w	r3, r7, #24
 80050d4:	4619      	mov	r1, r3
 80050d6:	4835      	ldr	r0, [pc, #212]	; (80051ac <HAL_ADC_MspInit+0x134>)
 80050d8:	f002 f8c2 	bl	8007260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80050dc:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 80050de:	4a35      	ldr	r2, [pc, #212]	; (80051b4 <HAL_ADC_MspInit+0x13c>)
 80050e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050e2:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050ee:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050f4:	4b2e      	ldr	r3, [pc, #184]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 80050f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050fc:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 80050fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005102:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005104:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 8005106:	2200      	movs	r2, #0
 8005108:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800510a:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 800510c:	2200      	movs	r2, #0
 800510e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005110:	4827      	ldr	r0, [pc, #156]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 8005112:	f001 fc23 	bl	800695c <HAL_DMA_Init>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800511c:	f7ff fad2 	bl	80046c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a23      	ldr	r2, [pc, #140]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 8005124:	621a      	str	r2, [r3, #32]
 8005126:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_ADC_MspInit+0x138>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800512c:	2200      	movs	r2, #0
 800512e:	2101      	movs	r1, #1
 8005130:	2012      	movs	r0, #18
 8005132:	f001 fbdc 	bl	80068ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005136:	2012      	movs	r0, #18
 8005138:	f001 fbf5 	bl	8006926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800513c:	e02e      	b.n	800519c <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_ADC_MspInit+0x140>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d129      	bne.n	800519c <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 800514e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005152:	6193      	str	r3, [r2, #24]
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	6193      	str	r3, [r2, #24]
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_ADC_MspInit+0x130>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005178:	2370      	movs	r3, #112	; 0x70
 800517a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800517c:	2303      	movs	r3, #3
 800517e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005180:	f107 0318 	add.w	r3, r7, #24
 8005184:	4619      	mov	r1, r3
 8005186:	4809      	ldr	r0, [pc, #36]	; (80051ac <HAL_ADC_MspInit+0x134>)
 8005188:	f002 f86a 	bl	8007260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800518c:	2200      	movs	r2, #0
 800518e:	2101      	movs	r1, #1
 8005190:	2012      	movs	r0, #18
 8005192:	f001 fbac 	bl	80068ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005196:	2012      	movs	r0, #18
 8005198:	f001 fbc5 	bl	8006926 <HAL_NVIC_EnableIRQ>
}
 800519c:	bf00      	nop
 800519e:	3728      	adds	r7, #40	; 0x28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40012400 	.word	0x40012400
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40010800 	.word	0x40010800
 80051b0:	20000168 	.word	0x20000168
 80051b4:	40020008 	.word	0x40020008
 80051b8:	40012800 	.word	0x40012800

080051bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a12      	ldr	r2, [pc, #72]	; (8005214 <HAL_TIM_PWM_MspInit+0x58>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10c      	bne.n	80051e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <HAL_TIM_PWM_MspInit+0x5c>)
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	4a11      	ldr	r2, [pc, #68]	; (8005218 <HAL_TIM_PWM_MspInit+0x5c>)
 80051d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051d8:	6193      	str	r3, [r2, #24]
 80051da:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <HAL_TIM_PWM_MspInit+0x5c>)
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80051e6:	e010      	b.n	800520a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0b      	ldr	r2, [pc, #44]	; (800521c <HAL_TIM_PWM_MspInit+0x60>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10b      	bne.n	800520a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_TIM_PWM_MspInit+0x5c>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4a08      	ldr	r2, [pc, #32]	; (8005218 <HAL_TIM_PWM_MspInit+0x5c>)
 80051f8:	f043 0304 	orr.w	r3, r3, #4
 80051fc:	61d3      	str	r3, [r2, #28]
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_TIM_PWM_MspInit+0x5c>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40021000 	.word	0x40021000
 800521c:	40000800 	.word	0x40000800

08005220 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <HAL_TIM_OC_MspInit+0x44>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d113      	bne.n	800525a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_TIM_OC_MspInit+0x48>)
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <HAL_TIM_OC_MspInit+0x48>)
 8005238:	f043 0302 	orr.w	r3, r3, #2
 800523c:	61d3      	str	r3, [r2, #28]
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_TIM_OC_MspInit+0x48>)
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800524a:	2200      	movs	r2, #0
 800524c:	2100      	movs	r1, #0
 800524e:	201d      	movs	r0, #29
 8005250:	f001 fb4d 	bl	80068ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005254:	201d      	movs	r0, #29
 8005256:	f001 fb66 	bl	8006926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40000400 	.word	0x40000400
 8005268:	40021000 	.word	0x40021000

0800526c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005274:	f107 0318 	add.w	r3, r7, #24
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <HAL_TIM_MspPostInit+0xc8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d132      	bne.n	80052f2 <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	4a29      	ldr	r2, [pc, #164]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 8005292:	f043 0308 	orr.w	r3, r3, #8
 8005296:	6193      	str	r3, [r2, #24]
 8005298:	4b27      	ldr	r3, [pc, #156]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a4:	4b24      	ldr	r3, [pc, #144]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	4a23      	ldr	r2, [pc, #140]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6193      	str	r3, [r2, #24]
 80052b0:	4b21      	ldr	r3, [pc, #132]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	693b      	ldr	r3, [r7, #16]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80052bc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80052c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c2:	2302      	movs	r3, #2
 80052c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2302      	movs	r3, #2
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ca:	f107 0318 	add.w	r3, r7, #24
 80052ce:	4619      	mov	r1, r3
 80052d0:	481a      	ldr	r0, [pc, #104]	; (800533c <HAL_TIM_MspPostInit+0xd0>)
 80052d2:	f001 ffc5 	bl	8007260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80052d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80052da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e0:	2302      	movs	r3, #2
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	4619      	mov	r1, r3
 80052ea:	4815      	ldr	r0, [pc, #84]	; (8005340 <HAL_TIM_MspPostInit+0xd4>)
 80052ec:	f001 ffb8 	bl	8007260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80052f0:	e01c      	b.n	800532c <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM4)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <HAL_TIM_MspPostInit+0xd8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d117      	bne.n	800532c <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4a0d      	ldr	r2, [pc, #52]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 8005302:	f043 0308 	orr.w	r3, r3, #8
 8005306:	6193      	str	r3, [r2, #24]
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_TIM_MspPostInit+0xcc>)
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531c:	2302      	movs	r3, #2
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005320:	f107 0318 	add.w	r3, r7, #24
 8005324:	4619      	mov	r1, r3
 8005326:	4805      	ldr	r0, [pc, #20]	; (800533c <HAL_TIM_MspPostInit+0xd0>)
 8005328:	f001 ff9a 	bl	8007260 <HAL_GPIO_Init>
}
 800532c:	bf00      	nop
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40021000 	.word	0x40021000
 800533c:	40010c00 	.word	0x40010c00
 8005340:	40010800 	.word	0x40010800
 8005344:	40000800 	.word	0x40000800

08005348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a50      	ldr	r2, [pc, #320]	; (80054a4 <HAL_UART_MspInit+0x15c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 8099 	bne.w	800549c <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800536a:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <HAL_UART_MspInit+0x160>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4a4e      	ldr	r2, [pc, #312]	; (80054a8 <HAL_UART_MspInit+0x160>)
 8005370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005374:	61d3      	str	r3, [r2, #28]
 8005376:	4b4c      	ldr	r3, [pc, #304]	; (80054a8 <HAL_UART_MspInit+0x160>)
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005382:	4b49      	ldr	r3, [pc, #292]	; (80054a8 <HAL_UART_MspInit+0x160>)
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	4a48      	ldr	r2, [pc, #288]	; (80054a8 <HAL_UART_MspInit+0x160>)
 8005388:	f043 0310 	orr.w	r3, r3, #16
 800538c:	6193      	str	r3, [r2, #24]
 800538e:	4b46      	ldr	r3, [pc, #280]	; (80054a8 <HAL_UART_MspInit+0x160>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800539a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053a4:	2303      	movs	r3, #3
 80053a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a8:	f107 0314 	add.w	r3, r7, #20
 80053ac:	4619      	mov	r1, r3
 80053ae:	483f      	ldr	r0, [pc, #252]	; (80054ac <HAL_UART_MspInit+0x164>)
 80053b0:	f001 ff56 	bl	8007260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80053b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c2:	f107 0314 	add.w	r3, r7, #20
 80053c6:	4619      	mov	r1, r3
 80053c8:	4838      	ldr	r0, [pc, #224]	; (80054ac <HAL_UART_MspInit+0x164>)
 80053ca:	f001 ff49 	bl	8007260 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <HAL_UART_MspInit+0x168>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	f043 0310 	orr.w	r3, r3, #16
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
 80053ec:	4a30      	ldr	r2, [pc, #192]	; (80054b0 <HAL_UART_MspInit+0x168>)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80053f2:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 80053f4:	4a30      	ldr	r2, [pc, #192]	; (80054b8 <HAL_UART_MspInit+0x170>)
 80053f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053f8:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 80053fa:	2210      	movs	r2, #16
 80053fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053fe:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 8005400:	2200      	movs	r2, #0
 8005402:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005410:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 8005412:	2200      	movs	r2, #0
 8005414:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005416:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800541c:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 800541e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005422:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005424:	4823      	ldr	r0, [pc, #140]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 8005426:	f001 fa99 	bl	800695c <HAL_DMA_Init>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8005430:	f7ff f948 	bl	80046c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 8005438:	635a      	str	r2, [r3, #52]	; 0x34
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_UART_MspInit+0x16c>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005440:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005442:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <HAL_UART_MspInit+0x178>)
 8005444:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005448:	2200      	movs	r2, #0
 800544a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_UART_MspInit+0x174>)
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005452:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_UART_MspInit+0x174>)
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005460:	2200      	movs	r2, #0
 8005462:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005464:	4b15      	ldr	r3, [pc, #84]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005466:	2200      	movs	r2, #0
 8005468:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <HAL_UART_MspInit+0x174>)
 800546c:	2200      	movs	r2, #0
 800546e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005470:	4812      	ldr	r0, [pc, #72]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005472:	f001 fa73 	bl	800695c <HAL_DMA_Init>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800547c:	f7ff f922 	bl	80046c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
 8005486:	4a0d      	ldr	r2, [pc, #52]	; (80054bc <HAL_UART_MspInit+0x174>)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 800548c:	2200      	movs	r2, #0
 800548e:	2102      	movs	r1, #2
 8005490:	2027      	movs	r0, #39	; 0x27
 8005492:	f001 fa2c 	bl	80068ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005496:	2027      	movs	r0, #39	; 0x27
 8005498:	f001 fa45 	bl	8006926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800549c:	bf00      	nop
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40004800 	.word	0x40004800
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40011000 	.word	0x40011000
 80054b0:	40010000 	.word	0x40010000
 80054b4:	200002c8 	.word	0x200002c8
 80054b8:	4002001c 	.word	0x4002001c
 80054bc:	2000030c 	.word	0x2000030c
 80054c0:	40020030 	.word	0x40020030

080054c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054c8:	e7fe      	b.n	80054c8 <NMI_Handler+0x4>
	...

080054cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HardFault_Handler+0x70>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80054d6:	4b19      	ldr	r3, [pc, #100]	; (800553c <HardFault_Handler+0x70>)
 80054d8:	2200      	movs	r2, #0
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <HardFault_Handler+0x70>)
 80054de:	2200      	movs	r2, #0
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80054e2:	2100      	movs	r1, #0
 80054e4:	4816      	ldr	r0, [pc, #88]	; (8005540 <HardFault_Handler+0x74>)
 80054e6:	f002 ff4f 	bl	8008388 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80054ea:	2100      	movs	r1, #0
 80054ec:	4814      	ldr	r0, [pc, #80]	; (8005540 <HardFault_Handler+0x74>)
 80054ee:	f003 fcf3 	bl	8008ed8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80054f2:	2104      	movs	r1, #4
 80054f4:	4812      	ldr	r0, [pc, #72]	; (8005540 <HardFault_Handler+0x74>)
 80054f6:	f002 ff47 	bl	8008388 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80054fa:	2104      	movs	r1, #4
 80054fc:	4810      	ldr	r0, [pc, #64]	; (8005540 <HardFault_Handler+0x74>)
 80054fe:	f003 fceb 	bl	8008ed8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8005502:	2108      	movs	r1, #8
 8005504:	480e      	ldr	r0, [pc, #56]	; (8005540 <HardFault_Handler+0x74>)
 8005506:	f002 ff3f 	bl	8008388 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800550a:	2108      	movs	r1, #8
 800550c:	480c      	ldr	r0, [pc, #48]	; (8005540 <HardFault_Handler+0x74>)
 800550e:	f003 fce3 	bl	8008ed8 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 8005512:	480c      	ldr	r0, [pc, #48]	; (8005544 <HardFault_Handler+0x78>)
 8005514:	f002 fdb2 	bl	800807c <HAL_TIM_Base_Stop_IT>

	TIM4->CCR1 = 0;
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HardFault_Handler+0x7c>)
 800551a:	2200      	movs	r2, #0
 800551c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800551e:	2100      	movs	r1, #0
 8005520:	480a      	ldr	r0, [pc, #40]	; (800554c <HardFault_Handler+0x80>)
 8005522:	f002 ff31 	bl	8008388 <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_SET);
 8005526:	2201      	movs	r2, #1
 8005528:	2101      	movs	r1, #1
 800552a:	4809      	ldr	r0, [pc, #36]	; (8005550 <HardFault_Handler+0x84>)
 800552c:	f002 f843 	bl	80075b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);
 8005530:	2201      	movs	r2, #1
 8005532:	2120      	movs	r1, #32
 8005534:	4807      	ldr	r0, [pc, #28]	; (8005554 <HardFault_Handler+0x88>)
 8005536:	f002 f83e 	bl	80075b6 <HAL_GPIO_WritePin>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800553a:	e7fe      	b.n	800553a <HardFault_Handler+0x6e>
 800553c:	40012c00 	.word	0x40012c00
 8005540:	200001ac 	.word	0x200001ac
 8005544:	200001f4 	.word	0x200001f4
 8005548:	40000800 	.word	0x40000800
 800554c:	2000023c 	.word	0x2000023c
 8005550:	40011000 	.word	0x40011000
 8005554:	40010c00 	.word	0x40010c00

08005558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800555c:	e7fe      	b.n	800555c <MemManage_Handler+0x4>

0800555e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005562:	e7fe      	b.n	8005562 <BusFault_Handler+0x4>

08005564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005568:	e7fe      	b.n	8005568 <UsageFault_Handler+0x4>

0800556a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005592:	f7fb fe9f 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055a0:	4802      	ldr	r0, [pc, #8]	; (80055ac <DMA1_Channel1_IRQHandler+0x10>)
 80055a2:	f001 fbf3 	bl	8006d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000168 	.word	0x20000168

080055b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80055b4:	4802      	ldr	r0, [pc, #8]	; (80055c0 <DMA1_Channel2_IRQHandler+0x10>)
 80055b6:	f001 fbe9 	bl	8006d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200002c8 	.word	0x200002c8

080055c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80055c8:	4802      	ldr	r0, [pc, #8]	; (80055d4 <DMA1_Channel3_IRQHandler+0x10>)
 80055ca:	f001 fbdf 	bl	8006d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80055ce:	bf00      	nop
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2000030c 	.word	0x2000030c

080055d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80055dc:	4803      	ldr	r0, [pc, #12]	; (80055ec <ADC1_2_IRQHandler+0x14>)
 80055de:	f000 face 	bl	8005b7e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80055e2:	4803      	ldr	r0, [pc, #12]	; (80055f0 <ADC1_2_IRQHandler+0x18>)
 80055e4:	f000 facb 	bl	8005b7e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80055e8:	bf00      	nop
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000108 	.word	0x20000108
 80055f0:	20000138 	.word	0x20000138

080055f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055f8:	4802      	ldr	r0, [pc, #8]	; (8005604 <TIM3_IRQHandler+0x10>)
 80055fa:	f002 ff35 	bl	8008468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200001f4 	.word	0x200001f4

08005608 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800560c:	4802      	ldr	r0, [pc, #8]	; (8005618 <USART3_IRQHandler+0x10>)
 800560e:	f003 febd 	bl	800938c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000284 	.word	0x20000284

0800561c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
	return 1;
 8005620:	2301      	movs	r3, #1
}
 8005622:	4618      	mov	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <_kill>:

int _kill(int pid, int sig)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005634:	f005 fd02 	bl	800b03c <__errno>
 8005638:	4603      	mov	r3, r0
 800563a:	2216      	movs	r2, #22
 800563c:	601a      	str	r2, [r3, #0]
	return -1;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <_exit>:

void _exit (int status)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005652:	f04f 31ff 	mov.w	r1, #4294967295
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ffe7 	bl	800562a <_kill>
	while (1) {}		/* Make sure we hang here */
 800565c:	e7fe      	b.n	800565c <_exit+0x12>

0800565e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
	...

0800566c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800566c:	480c      	ldr	r0, [pc, #48]	; (80056a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800566e:	490d      	ldr	r1, [pc, #52]	; (80056a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005674:	e002      	b.n	800567c <LoopCopyDataInit>

08005676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800567a:	3304      	adds	r3, #4

0800567c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800567c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800567e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005680:	d3f9      	bcc.n	8005676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005684:	4c0a      	ldr	r4, [pc, #40]	; (80056b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005688:	e001      	b.n	800568e <LoopFillZerobss>

0800568a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800568a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800568c:	3204      	adds	r2, #4

0800568e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800568e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005690:	d3fb      	bcc.n	800568a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005692:	f7ff ffe4 	bl	800565e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005696:	f005 fcd7 	bl	800b048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800569a:	f7fe fb27 	bl	8003cec <main>
  bx lr
 800569e:	4770      	bx	lr
  ldr r0, =_sdata
 80056a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80056a8:	0800b29c 	.word	0x0800b29c
  ldr r2, =_sbss
 80056ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80056b0:	2000036c 	.word	0x2000036c

080056b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056b4:	e7fe      	b.n	80056b4 <ADC3_IRQHandler>
	...

080056b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <HAL_Init+0x28>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <HAL_Init+0x28>)
 80056c2:	f043 0310 	orr.w	r3, r3, #16
 80056c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056c8:	2003      	movs	r0, #3
 80056ca:	f001 f905 	bl	80068d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056ce:	2003      	movs	r0, #3
 80056d0:	f000 f808 	bl	80056e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056d4:	f7ff fc9e 	bl	8005014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40022000 	.word	0x40022000

080056e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056ec:	4b12      	ldr	r3, [pc, #72]	; (8005738 <HAL_InitTick+0x54>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4b12      	ldr	r3, [pc, #72]	; (800573c <HAL_InitTick+0x58>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f91d 	bl	8006942 <HAL_SYSTICK_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e00e      	b.n	8005730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b0f      	cmp	r3, #15
 8005716:	d80a      	bhi.n	800572e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005718:	2200      	movs	r2, #0
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	f001 f8e5 	bl	80068ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005724:	4a06      	ldr	r2, [pc, #24]	; (8005740 <HAL_InitTick+0x5c>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e000      	b.n	8005730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000000 	.word	0x20000000
 800573c:	20000008 	.word	0x20000008
 8005740:	20000004 	.word	0x20000004

08005744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return uwTick;
 8005748:	4b02      	ldr	r3, [pc, #8]	; (8005754 <HAL_GetTick+0x10>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000364 	.word	0x20000364

08005758 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e0ce      	b.n	8005918 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fc6e 	bl	8005078 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fc75 	bl	800608c <ADC_ConversionStop_Disable>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 80a9 	bne.w	8005906 <HAL_ADC_Init+0x1ae>
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 80a5 	bne.w	8005906 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057c4:	f023 0302 	bic.w	r3, r3, #2
 80057c8:	f043 0202 	orr.w	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4951      	ldr	r1, [pc, #324]	; (8005920 <HAL_ADC_Init+0x1c8>)
 80057da:	428b      	cmp	r3, r1
 80057dc:	d10a      	bne.n	80057f4 <HAL_ADC_Init+0x9c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057e6:	d002      	beq.n	80057ee <HAL_ADC_Init+0x96>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	e004      	b.n	80057f8 <HAL_ADC_Init+0xa0>
 80057ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057f2:	e001      	b.n	80057f8 <HAL_ADC_Init+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7b1b      	ldrb	r3, [r3, #12]
 80057fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005800:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	4313      	orrs	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005810:	d003      	beq.n	800581a <HAL_ADC_Init+0xc2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <HAL_ADC_Init+0xc8>
 800581a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800581e:	e000      	b.n	8005822 <HAL_ADC_Init+0xca>
 8005820:	2300      	movs	r3, #0
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7d1b      	ldrb	r3, [r3, #20]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d119      	bne.n	8005864 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7b1b      	ldrb	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	3b01      	subs	r3, #1
 800583e:	035a      	lsls	r2, r3, #13
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e00b      	b.n	8005864 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	4b29      	ldr	r3, [pc, #164]	; (8005924 <HAL_ADC_Init+0x1cc>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	430b      	orrs	r3, r1
 800588a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005894:	d003      	beq.n	800589e <HAL_ADC_Init+0x146>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d104      	bne.n	80058a8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	051b      	lsls	r3, r3, #20
 80058a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	4b19      	ldr	r3, [pc, #100]	; (8005928 <HAL_ADC_Init+0x1d0>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d10b      	bne.n	80058e4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80058e2:	e018      	b.n	8005916 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f023 0312 	bic.w	r3, r3, #18
 80058ec:	f043 0210 	orr.w	r2, r3, #16
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	f043 0201 	orr.w	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005904:	e007      	b.n	8005916 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f043 0210 	orr.w	r2, r3, #16
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40013c00 	.word	0x40013c00
 8005924:	ffe1f7fd 	.word	0xffe1f7fd
 8005928:	ff1f0efe 	.word	0xff1f0efe

0800592c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a64      	ldr	r2, [pc, #400]	; (8005ad4 <HAL_ADC_Start_DMA+0x1a8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_ADC_Start_DMA+0x24>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a63      	ldr	r2, [pc, #396]	; (8005ad8 <HAL_ADC_Start_DMA+0x1ac>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d106      	bne.n	800595e <HAL_ADC_Start_DMA+0x32>
 8005950:	4b60      	ldr	r3, [pc, #384]	; (8005ad4 <HAL_ADC_Start_DMA+0x1a8>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005958:	2b00      	cmp	r3, #0
 800595a:	f040 80b3 	bne.w	8005ac4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_ADC_Start_DMA+0x40>
 8005968:	2302      	movs	r3, #2
 800596a:	e0ae      	b.n	8005aca <HAL_ADC_Start_DMA+0x19e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fb2f 	bl	8005fd8 <ADC_Enable>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 809a 	bne.w	8005aba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <HAL_ADC_Start_DMA+0x1ac>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d105      	bne.n	80059b0 <HAL_ADC_Start_DMA+0x84>
 80059a4:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_ADC_Start_DMA+0x1a8>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d115      	bne.n	80059dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d026      	beq.n	8005a18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059da:	e01d      	b.n	8005a18 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <HAL_ADC_Start_DMA+0x1a8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_ADC_Start_DMA+0xd0>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a38      	ldr	r2, [pc, #224]	; (8005ad8 <HAL_ADC_Start_DMA+0x1ac>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10d      	bne.n	8005a18 <HAL_ADC_Start_DMA+0xec>
 80059fc:	4b35      	ldr	r3, [pc, #212]	; (8005ad4 <HAL_ADC_Start_DMA+0x1a8>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f023 0206 	bic.w	r2, r3, #6
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a30:	e002      	b.n	8005a38 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4a25      	ldr	r2, [pc, #148]	; (8005adc <HAL_ADC_Start_DMA+0x1b0>)
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	4a24      	ldr	r2, [pc, #144]	; (8005ae0 <HAL_ADC_Start_DMA+0x1b4>)
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	4a23      	ldr	r2, [pc, #140]	; (8005ae4 <HAL_ADC_Start_DMA+0x1b8>)
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0202 	mvn.w	r2, #2
 8005a60:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a70:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a18      	ldr	r0, [r3, #32]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	334c      	adds	r3, #76	; 0x4c
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f000 ffe1 	bl	8006a48 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005a90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005a94:	d108      	bne.n	8005aa8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005aa4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005aa6:	e00f      	b.n	8005ac8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ab6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005ab8:	e006      	b.n	8005ac8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005ac2:	e001      	b.n	8005ac8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40012400 	.word	0x40012400
 8005ad8:	40012800 	.word	0x40012800
 8005adc:	0800610f 	.word	0x0800610f
 8005ae0:	0800618b 	.word	0x0800618b
 8005ae4:	080061a7 	.word	0x080061a7

08005ae8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_ADC_Stop_DMA+0x1a>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e039      	b.n	8005b76 <HAL_ADC_Stop_DMA+0x8e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fabe 	bl	800608c <ADC_ConversionStop_Disable>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d128      	bne.n	8005b6c <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b28:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d11a      	bne.n	8005b6c <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ffe3 	bl	8006b06 <HAL_DMA_Abort>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8005b5e:	e005      	b.n	8005b6c <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d140      	bne.n	8005c16 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d139      	bne.n	8005c16 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d105      	bne.n	8005bba <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005bc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005bc8:	d11d      	bne.n	8005c06 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d119      	bne.n	8005c06 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0220 	bic.w	r2, r2, #32
 8005be0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f043 0201 	orr.w	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fc fada 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0212 	mvn.w	r2, #18
 8005c14:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d14f      	bne.n	8005cc4 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d148      	bne.n	8005cc4 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c54:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005c58:	d012      	beq.n	8005c80 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d125      	bne.n	8005cb4 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005c72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005c76:	d11d      	bne.n	8005cb4 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d119      	bne.n	8005cb4 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	f043 0201 	orr.w	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fc fa97 	bl	80021e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 020c 	mvn.w	r2, #12
 8005cc2:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d114      	bne.n	8005cfc <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10d      	bne.n	8005cfc <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f812 	bl	8005d16 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0201 	mvn.w	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x20>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e0dc      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x1da>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b06      	cmp	r3, #6
 8005d6a:	d81c      	bhi.n	8005da6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3b05      	subs	r3, #5
 8005d7e:	221f      	movs	r2, #31
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	4019      	ands	r1, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	3b05      	subs	r3, #5
 8005d98:	fa00 f203 	lsl.w	r2, r0, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	635a      	str	r2, [r3, #52]	; 0x34
 8005da4:	e03c      	b.n	8005e20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d81c      	bhi.n	8005de8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3b23      	subs	r3, #35	; 0x23
 8005dc0:	221f      	movs	r2, #31
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	4019      	ands	r1, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3b23      	subs	r3, #35	; 0x23
 8005dda:	fa00 f203 	lsl.w	r2, r0, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
 8005de6:	e01b      	b.n	8005e20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	3b41      	subs	r3, #65	; 0x41
 8005dfa:	221f      	movs	r2, #31
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	43db      	mvns	r3, r3
 8005e02:	4019      	ands	r1, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	3b41      	subs	r3, #65	; 0x41
 8005e14:	fa00 f203 	lsl.w	r2, r0, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d91c      	bls.n	8005e62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68d9      	ldr	r1, [r3, #12]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	3b1e      	subs	r3, #30
 8005e3a:	2207      	movs	r2, #7
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	4019      	ands	r1, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6898      	ldr	r0, [r3, #8]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	3b1e      	subs	r3, #30
 8005e54:	fa00 f203 	lsl.w	r2, r0, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	e019      	b.n	8005e96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6919      	ldr	r1, [r3, #16]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	2207      	movs	r2, #7
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	4019      	ands	r1, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6898      	ldr	r0, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	4413      	add	r3, r2
 8005e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d003      	beq.n	8005ea6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ea2:	2b11      	cmp	r3, #17
 8005ea4:	d132      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <HAL_ADC_ConfigChannel+0x1e4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d125      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d126      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ecc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d11a      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <HAL_ADC_ConfigChannel+0x1e8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <HAL_ADC_ConfigChannel+0x1ec>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	0c9a      	lsrs	r2, r3, #18
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005eec:	e002      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f9      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x1b2>
 8005efa:	e007      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	40012400 	.word	0x40012400
 8005f24:	20000000 	.word	0x20000000
 8005f28:	431bde83 	.word	0x431bde83

08005f2c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <HAL_ADC_AnalogWDGConfig+0xa0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8005f46:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_ADC_AnalogWDGConfig+0x2a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e035      	b.n	8005fc2 <HAL_ADC_AnalogWDGConfig+0x96>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	7a1b      	ldrb	r3, [r3, #8]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d108      	bne.n	8005f78 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e007      	b.n	8005f88 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f86:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	6852      	ldr	r2, [r2, #4]
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68d2      	ldr	r2, [r2, #12]
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	6912      	ldr	r2, [r2, #16]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	00800200 	.word	0x00800200
 8005fd0:	00400200 	.word	0x00400200
 8005fd4:	ff3ffde0 	.word	0xff3ffde0

08005fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d040      	beq.n	8006078 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006006:	4b1f      	ldr	r3, [pc, #124]	; (8006084 <ADC_Enable+0xac>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1f      	ldr	r2, [pc, #124]	; (8006088 <ADC_Enable+0xb0>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	0c9b      	lsrs	r3, r3, #18
 8006012:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006014:	e002      	b.n	800601c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3b01      	subs	r3, #1
 800601a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f9      	bne.n	8006016 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006022:	f7ff fb8f 	bl	8005744 <HAL_GetTick>
 8006026:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006028:	e01f      	b.n	800606a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800602a:	f7ff fb8b 	bl	8005744 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d918      	bls.n	800606a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d011      	beq.n	800606a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	f043 0210 	orr.w	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e007      	b.n	800607a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d1d8      	bne.n	800602a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000000 	.word	0x20000000
 8006088:	431bde83 	.word	0x431bde83

0800608c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d12e      	bne.n	8006104 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060b6:	f7ff fb45 	bl	8005744 <HAL_GetTick>
 80060ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80060bc:	e01b      	b.n	80060f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80060be:	f7ff fb41 	bl	8005744 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d914      	bls.n	80060f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10d      	bne.n	80060f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f043 0210 	orr.w	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e007      	b.n	8006106 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d0dc      	beq.n	80060be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006124:	2b00      	cmp	r3, #0
 8006126:	d127      	bne.n	8006178 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800613e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006142:	d115      	bne.n	8006170 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f043 0201 	orr.w	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7fc f825 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006176:	e004      	b.n	8006182 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fdb3 	bl	8005d04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	f043 0204 	orr.w	r2, r3, #4
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fdab 	bl	8005d28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e078      	b.n	80062e8 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff feea 	bl	8005fd8 <ADC_Enable>
 8006204:	4603      	mov	r3, r0
 8006206:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d167      	bne.n	80062de <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a32      	ldr	r2, [pc, #200]	; (80062f0 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d105      	bne.n	8006238 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800622c:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
 8006244:	e005      	b.n	8006252 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0204 	mvn.w	r2, #4
 8006274:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006284:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006290:	2b00      	cmp	r3, #0
 8006292:	d128      	bne.n	80062e6 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800629e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80062a2:	d113      	bne.n	80062cc <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80062a8:	4a11      	ldr	r2, [pc, #68]	; (80062f0 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d105      	bne.n	80062ba <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80062ae:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80062c8:	609a      	str	r2, [r3, #8]
 80062ca:	e00c      	b.n	80062e6 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	e003      	b.n	80062e6 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40012800 	.word	0x40012800
 80062f4:	40012400 	.word	0x40012400

080062f8 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800630e:	2302      	movs	r3, #2
 8006310:	e038      	b.n	8006384 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d121      	bne.n	800636a <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11a      	bne.n	800636a <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fea9 	bl	800608c <ADC_ConversionStop_Disable>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006352:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	f043 0201 	orr.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8006368:	e007      	b.n	800637a <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d009      	beq.n	80063b4 <HAL_ADCEx_InjectedGetValue+0x28>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d815      	bhi.n	80063d2 <HAL_ADCEx_InjectedGetValue+0x46>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d00d      	beq.n	80063c8 <HAL_ADCEx_InjectedGetValue+0x3c>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d005      	beq.n	80063be <HAL_ADCEx_InjectedGetValue+0x32>
 80063b2:	e00e      	b.n	80063d2 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ba:	60fb      	str	r3, [r7, #12]
      break;
 80063bc:	e00e      	b.n	80063dc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c4:	60fb      	str	r3, [r7, #12]
      break;
 80063c6:	e009      	b.n	80063dc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	60fb      	str	r3, [r7, #12]
      break;
 80063d0:	e004      	b.n	80063dc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	60fb      	str	r3, [r7, #12]
      break;
 80063da:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80063dc:	68fb      	ldr	r3, [r7, #12]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80063e8:	b490      	push	{r4, r7}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8006404:	2302      	movs	r3, #2
 8006406:	e18d      	b.n	8006724 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d119      	bne.n	800644c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10c      	bne.n	800643a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	0d9b      	lsrs	r3, r3, #22
 8006428:	059b      	lsls	r3, r3, #22
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	03d1      	lsls	r1, r2, #15
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	430b      	orrs	r3, r1
 8006436:	6393      	str	r3, [r2, #56]	; 0x38
 8006438:	e04f      	b.n	80064da <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
 800644a:	e046      	b.n	80064da <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	429a      	cmp	r2, r3
 8006456:	d82a      	bhi.n	80064ae <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	330f      	adds	r3, #15
 8006470:	221f      	movs	r2, #31
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800647a:	43db      	mvns	r3, r3
 800647c:	4019      	ands	r1, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	3b01      	subs	r3, #1
 8006484:	0518      	lsls	r0, r3, #20
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681c      	ldr	r4, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	330f      	adds	r3, #15
 800649c:	fa04 f303 	lsl.w	r3, r4, r3
 80064a0:	ea40 0203 	orr.w	r2, r0, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
 80064ac:	e015      	b.n	80064da <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	330f      	adds	r3, #15
 80064c6:	221f      	movs	r2, #31
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80064d0:	43da      	mvns	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	400a      	ands	r2, r1
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d01c      	beq.n	8006522 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	498d      	ldr	r1, [pc, #564]	; (8006730 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80064fc:	428a      	cmp	r2, r1
 80064fe:	d10a      	bne.n	8006516 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	6992      	ldr	r2, [r2, #24]
 8006504:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8006508:	d002      	beq.n	8006510 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	6992      	ldr	r2, [r2, #24]
 800650e:	e004      	b.n	800651a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8006510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006514:	e001      	b.n	800651a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	6992      	ldr	r2, [r2, #24]
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	6809      	ldr	r1, [r1, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	7d5b      	ldrb	r3, [r3, #21]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d115      	bne.n	8006556 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006532:	d108      	bne.n	8006546 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	e007      	b.n	8006556 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	7d1b      	ldrb	r3, [r3, #20]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d114      	bne.n	8006588 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	7d5b      	ldrb	r3, [r3, #21]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d108      	bne.n	8006578 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	e007      	b.n	8006588 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b09      	cmp	r3, #9
 800658e:	d91c      	bls.n	80065ca <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68d9      	ldr	r1, [r3, #12]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	3b1e      	subs	r3, #30
 80065a2:	2207      	movs	r2, #7
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	4019      	ands	r1, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6898      	ldr	r0, [r3, #8]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	4413      	add	r3, r2
 80065ba:	3b1e      	subs	r3, #30
 80065bc:	fa00 f203 	lsl.w	r2, r0, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	60da      	str	r2, [r3, #12]
 80065c8:	e019      	b.n	80065fe <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6919      	ldr	r1, [r3, #16]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	2207      	movs	r2, #7
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	4019      	ands	r1, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6898      	ldr	r0, [r3, #8]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	fa00 f203 	lsl.w	r2, r0, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b10      	cmp	r3, #16
 8006604:	d003      	beq.n	800660e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800660a:	2b11      	cmp	r3, #17
 800660c:	d107      	bne.n	800661e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800661c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d022      	beq.n	800666c <HAL_ADCEx_InjectedConfigChannel+0x284>
 8006626:	2b03      	cmp	r3, #3
 8006628:	d82e      	bhi.n	8006688 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 800662a:	2b01      	cmp	r3, #1
 800662c:	d002      	beq.n	8006634 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800662e:	2b02      	cmp	r3, #2
 8006630:	d00e      	beq.n	8006650 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8006632:	e029      	b.n	8006688 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800663e:	f023 030f 	bic.w	r3, r3, #15
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	68d1      	ldr	r1, [r2, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	430b      	orrs	r3, r1
 800664c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800664e:	e029      	b.n	80066a4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	68d1      	ldr	r1, [r2, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	430b      	orrs	r3, r1
 8006668:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800666a:	e01b      	b.n	80066a4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006676:	f023 030f 	bic.w	r3, r3, #15
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	68d1      	ldr	r1, [r2, #12]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	430b      	orrs	r3, r1
 8006684:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8006686:	e00d      	b.n	80066a4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006692:	f023 030f 	bic.w	r3, r3, #15
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	68d1      	ldr	r1, [r2, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	430b      	orrs	r3, r1
 80066a0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80066a2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d003      	beq.n	80066b4 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80066b0:	2b11      	cmp	r3, #17
 80066b2:	d132      	bne.n	800671a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d125      	bne.n	800670a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d126      	bne.n	800671a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80066da:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d11a      	bne.n	800671a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80066e4:	4b14      	ldr	r3, [pc, #80]	; (8006738 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a14      	ldr	r2, [pc, #80]	; (800673c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	0c9a      	lsrs	r2, r3, #18
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80066fa:	e002      	b.n	8006702 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	3b01      	subs	r3, #1
 8006700:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f9      	bne.n	80066fc <HAL_ADCEx_InjectedConfigChannel+0x314>
 8006708:	e007      	b.n	800671a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bc90      	pop	{r4, r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40013c00 	.word	0x40013c00
 8006734:	40012400 	.word	0x40012400
 8006738:	20000000 	.word	0x20000000
 800673c:	431bde83 	.word	0x431bde83

08006740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006750:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <__NVIC_SetPriorityGrouping+0x44>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800675c:	4013      	ands	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800676c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <__NVIC_SetPriorityGrouping+0x44>)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	60d3      	str	r3, [r2, #12]
}
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	e000ed00 	.word	0xe000ed00

08006788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800678c:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <__NVIC_GetPriorityGrouping+0x18>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	0a1b      	lsrs	r3, r3, #8
 8006792:	f003 0307 	and.w	r3, r3, #7
}
 8006796:	4618      	mov	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	db0b      	blt.n	80067ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	f003 021f 	and.w	r2, r3, #31
 80067bc:	4906      	ldr	r1, [pc, #24]	; (80067d8 <__NVIC_EnableIRQ+0x34>)
 80067be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	2001      	movs	r0, #1
 80067c6:	fa00 f202 	lsl.w	r2, r0, r2
 80067ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	e000e100 	.word	0xe000e100

080067dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	db0a      	blt.n	8006806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	490c      	ldr	r1, [pc, #48]	; (8006828 <__NVIC_SetPriority+0x4c>)
 80067f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fa:	0112      	lsls	r2, r2, #4
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	440b      	add	r3, r1
 8006800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006804:	e00a      	b.n	800681c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4908      	ldr	r1, [pc, #32]	; (800682c <__NVIC_SetPriority+0x50>)
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	3b04      	subs	r3, #4
 8006814:	0112      	lsls	r2, r2, #4
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	440b      	add	r3, r1
 800681a:	761a      	strb	r2, [r3, #24]
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	e000e100 	.word	0xe000e100
 800682c:	e000ed00 	.word	0xe000ed00

08006830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	; 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f1c3 0307 	rsb	r3, r3, #7
 800684a:	2b04      	cmp	r3, #4
 800684c:	bf28      	it	cs
 800684e:	2304      	movcs	r3, #4
 8006850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3304      	adds	r3, #4
 8006856:	2b06      	cmp	r3, #6
 8006858:	d902      	bls.n	8006860 <NVIC_EncodePriority+0x30>
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3b03      	subs	r3, #3
 800685e:	e000      	b.n	8006862 <NVIC_EncodePriority+0x32>
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006864:	f04f 32ff 	mov.w	r2, #4294967295
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43da      	mvns	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	401a      	ands	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006878:	f04f 31ff 	mov.w	r1, #4294967295
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	fa01 f303 	lsl.w	r3, r1, r3
 8006882:	43d9      	mvns	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006888:	4313      	orrs	r3, r2
         );
}
 800688a:	4618      	mov	r0, r3
 800688c:	3724      	adds	r7, #36	; 0x24
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr

08006894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3b01      	subs	r3, #1
 80068a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068a4:	d301      	bcc.n	80068aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068a6:	2301      	movs	r3, #1
 80068a8:	e00f      	b.n	80068ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <SysTick_Config+0x40>)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068b2:	210f      	movs	r1, #15
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	f7ff ff90 	bl	80067dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <SysTick_Config+0x40>)
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068c2:	4b04      	ldr	r3, [pc, #16]	; (80068d4 <SysTick_Config+0x40>)
 80068c4:	2207      	movs	r2, #7
 80068c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	e000e010 	.word	0xe000e010

080068d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff2d 	bl	8006740 <__NVIC_SetPriorityGrouping>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	4603      	mov	r3, r0
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
 80068fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006900:	f7ff ff42 	bl	8006788 <__NVIC_GetPriorityGrouping>
 8006904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	6978      	ldr	r0, [r7, #20]
 800690c:	f7ff ff90 	bl	8006830 <NVIC_EncodePriority>
 8006910:	4602      	mov	r2, r0
 8006912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff5f 	bl	80067dc <__NVIC_SetPriority>
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	4603      	mov	r3, r0
 800692e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff ff35 	bl	80067a4 <__NVIC_EnableIRQ>
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff ffa2 	bl	8006894 <SysTick_Config>
 8006950:	4603      	mov	r3, r0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e059      	b.n	8006a26 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	4b2d      	ldr	r3, [pc, #180]	; (8006a30 <HAL_DMA_Init+0xd4>)
 800697a:	429a      	cmp	r2, r3
 800697c:	d80f      	bhi.n	800699e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_DMA_Init+0xd8>)
 8006986:	4413      	add	r3, r2
 8006988:	4a2b      	ldr	r2, [pc, #172]	; (8006a38 <HAL_DMA_Init+0xdc>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	009a      	lsls	r2, r3, #2
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a28      	ldr	r2, [pc, #160]	; (8006a3c <HAL_DMA_Init+0xe0>)
 800699a:	63da      	str	r2, [r3, #60]	; 0x3c
 800699c:	e00e      	b.n	80069bc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	4b26      	ldr	r3, [pc, #152]	; (8006a40 <HAL_DMA_Init+0xe4>)
 80069a6:	4413      	add	r3, r2
 80069a8:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <HAL_DMA_Init+0xdc>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	009a      	lsls	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a22      	ldr	r2, [pc, #136]	; (8006a44 <HAL_DMA_Init+0xe8>)
 80069ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80069d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80069d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80069e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr
 8006a30:	40020407 	.word	0x40020407
 8006a34:	bffdfff8 	.word	0xbffdfff8
 8006a38:	cccccccd 	.word	0xcccccccd
 8006a3c:	40020000 	.word	0x40020000
 8006a40:	bffdfbf8 	.word	0xbffdfbf8
 8006a44:	40020400 	.word	0x40020400

08006a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_DMA_Start_IT+0x20>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e04a      	b.n	8006afe <HAL_DMA_Start_IT+0xb6>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d13a      	bne.n	8006af0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fbb0 	bl	8007204 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 020e 	orr.w	r2, r2, #14
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e00f      	b.n	8006ade <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0204 	bic.w	r2, r2, #4
 8006acc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 020a 	orr.w	r2, r2, #10
 8006adc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e005      	b.n	8006afc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
 8006afa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d008      	beq.n	8006b2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2204      	movs	r2, #4
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e020      	b.n	8006b70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 020e 	bic.w	r2, r2, #14
 8006b3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2101      	movs	r1, #1
 8006b58:	fa01 f202 	lsl.w	r2, r1, r2
 8006b5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d005      	beq.n	8006b9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2204      	movs	r2, #4
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]
 8006b9c:	e0d6      	b.n	8006d4c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 020e 	bic.w	r2, r2, #14
 8006bac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b64      	ldr	r3, [pc, #400]	; (8006d58 <HAL_DMA_Abort_IT+0x1dc>)
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d958      	bls.n	8006c7c <HAL_DMA_Abort_IT+0x100>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a63      	ldr	r2, [pc, #396]	; (8006d5c <HAL_DMA_Abort_IT+0x1e0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04f      	beq.n	8006c74 <HAL_DMA_Abort_IT+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a61      	ldr	r2, [pc, #388]	; (8006d60 <HAL_DMA_Abort_IT+0x1e4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d048      	beq.n	8006c70 <HAL_DMA_Abort_IT+0xf4>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a60      	ldr	r2, [pc, #384]	; (8006d64 <HAL_DMA_Abort_IT+0x1e8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <HAL_DMA_Abort_IT+0xee>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a5e      	ldr	r2, [pc, #376]	; (8006d68 <HAL_DMA_Abort_IT+0x1ec>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d038      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xe8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a5d      	ldr	r2, [pc, #372]	; (8006d6c <HAL_DMA_Abort_IT+0x1f0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d030      	beq.n	8006c5e <HAL_DMA_Abort_IT+0xe2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a5b      	ldr	r2, [pc, #364]	; (8006d70 <HAL_DMA_Abort_IT+0x1f4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d028      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xdc>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a53      	ldr	r2, [pc, #332]	; (8006d58 <HAL_DMA_Abort_IT+0x1dc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d020      	beq.n	8006c52 <HAL_DMA_Abort_IT+0xd6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a57      	ldr	r2, [pc, #348]	; (8006d74 <HAL_DMA_Abort_IT+0x1f8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d019      	beq.n	8006c4e <HAL_DMA_Abort_IT+0xd2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a56      	ldr	r2, [pc, #344]	; (8006d78 <HAL_DMA_Abort_IT+0x1fc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d012      	beq.n	8006c4a <HAL_DMA_Abort_IT+0xce>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a54      	ldr	r2, [pc, #336]	; (8006d7c <HAL_DMA_Abort_IT+0x200>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00a      	beq.n	8006c44 <HAL_DMA_Abort_IT+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a53      	ldr	r2, [pc, #332]	; (8006d80 <HAL_DMA_Abort_IT+0x204>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d102      	bne.n	8006c3e <HAL_DMA_Abort_IT+0xc2>
 8006c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c3c:	e01b      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c42:	e018      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c48:	e015      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c4a:	2310      	movs	r3, #16
 8006c4c:	e013      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e011      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c56:	e00e      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c5c:	e00b      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c62:	e008      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c68:	e005      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c6e:	e002      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c70:	2310      	movs	r3, #16
 8006c72:	e000      	b.n	8006c76 <HAL_DMA_Abort_IT+0xfa>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4a43      	ldr	r2, [pc, #268]	; (8006d84 <HAL_DMA_Abort_IT+0x208>)
 8006c78:	6053      	str	r3, [r2, #4]
 8006c7a:	e057      	b.n	8006d2c <HAL_DMA_Abort_IT+0x1b0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a36      	ldr	r2, [pc, #216]	; (8006d5c <HAL_DMA_Abort_IT+0x1e0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d04f      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x1aa>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a35      	ldr	r2, [pc, #212]	; (8006d60 <HAL_DMA_Abort_IT+0x1e4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d048      	beq.n	8006d22 <HAL_DMA_Abort_IT+0x1a6>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a33      	ldr	r2, [pc, #204]	; (8006d64 <HAL_DMA_Abort_IT+0x1e8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d040      	beq.n	8006d1c <HAL_DMA_Abort_IT+0x1a0>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a32      	ldr	r2, [pc, #200]	; (8006d68 <HAL_DMA_Abort_IT+0x1ec>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d038      	beq.n	8006d16 <HAL_DMA_Abort_IT+0x19a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a30      	ldr	r2, [pc, #192]	; (8006d6c <HAL_DMA_Abort_IT+0x1f0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d030      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x194>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <HAL_DMA_Abort_IT+0x1f4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d028      	beq.n	8006d0a <HAL_DMA_Abort_IT+0x18e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_DMA_Abort_IT+0x1dc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d020      	beq.n	8006d04 <HAL_DMA_Abort_IT+0x188>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2b      	ldr	r2, [pc, #172]	; (8006d74 <HAL_DMA_Abort_IT+0x1f8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d019      	beq.n	8006d00 <HAL_DMA_Abort_IT+0x184>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <HAL_DMA_Abort_IT+0x1fc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d012      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x180>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a28      	ldr	r2, [pc, #160]	; (8006d7c <HAL_DMA_Abort_IT+0x200>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00a      	beq.n	8006cf6 <HAL_DMA_Abort_IT+0x17a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <HAL_DMA_Abort_IT+0x204>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d102      	bne.n	8006cf0 <HAL_DMA_Abort_IT+0x174>
 8006cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cee:	e01b      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cf4:	e018      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cfa:	e015      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	e013      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e011      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d08:	e00e      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d0e:	e00b      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d14:	e008      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d1a:	e005      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d20:	e002      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d22:	2310      	movs	r3, #16
 8006d24:	e000      	b.n	8006d28 <HAL_DMA_Abort_IT+0x1ac>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <HAL_DMA_Abort_IT+0x20c>)
 8006d2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
    } 
  }
  return status;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40020080 	.word	0x40020080
 8006d5c:	40020008 	.word	0x40020008
 8006d60:	4002001c 	.word	0x4002001c
 8006d64:	40020030 	.word	0x40020030
 8006d68:	40020044 	.word	0x40020044
 8006d6c:	40020058 	.word	0x40020058
 8006d70:	4002006c 	.word	0x4002006c
 8006d74:	40020408 	.word	0x40020408
 8006d78:	4002041c 	.word	0x4002041c
 8006d7c:	40020430 	.word	0x40020430
 8006d80:	40020444 	.word	0x40020444
 8006d84:	40020400 	.word	0x40020400
 8006d88:	40020000 	.word	0x40020000

08006d8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2204      	movs	r2, #4
 8006daa:	409a      	lsls	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80d6 	beq.w	8006f62 <HAL_DMA_IRQHandler+0x1d6>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80d0 	beq.w	8006f62 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d107      	bne.n	8006de0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0204 	bic.w	r2, r2, #4
 8006dde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	4b9b      	ldr	r3, [pc, #620]	; (8007054 <HAL_DMA_IRQHandler+0x2c8>)
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d958      	bls.n	8006e9e <HAL_DMA_IRQHandler+0x112>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a99      	ldr	r2, [pc, #612]	; (8007058 <HAL_DMA_IRQHandler+0x2cc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d04f      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x10a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a98      	ldr	r2, [pc, #608]	; (800705c <HAL_DMA_IRQHandler+0x2d0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d048      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x106>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a96      	ldr	r2, [pc, #600]	; (8007060 <HAL_DMA_IRQHandler+0x2d4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d040      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x100>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a95      	ldr	r2, [pc, #596]	; (8007064 <HAL_DMA_IRQHandler+0x2d8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d038      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xfa>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a93      	ldr	r2, [pc, #588]	; (8007068 <HAL_DMA_IRQHandler+0x2dc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d030      	beq.n	8006e80 <HAL_DMA_IRQHandler+0xf4>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a92      	ldr	r2, [pc, #584]	; (800706c <HAL_DMA_IRQHandler+0x2e0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d028      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xee>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a89      	ldr	r2, [pc, #548]	; (8007054 <HAL_DMA_IRQHandler+0x2c8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d020      	beq.n	8006e74 <HAL_DMA_IRQHandler+0xe8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a8e      	ldr	r2, [pc, #568]	; (8007070 <HAL_DMA_IRQHandler+0x2e4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d019      	beq.n	8006e70 <HAL_DMA_IRQHandler+0xe4>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a8c      	ldr	r2, [pc, #560]	; (8007074 <HAL_DMA_IRQHandler+0x2e8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d012      	beq.n	8006e6c <HAL_DMA_IRQHandler+0xe0>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a8b      	ldr	r2, [pc, #556]	; (8007078 <HAL_DMA_IRQHandler+0x2ec>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00a      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xda>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a89      	ldr	r2, [pc, #548]	; (800707c <HAL_DMA_IRQHandler+0x2f0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d102      	bne.n	8006e60 <HAL_DMA_IRQHandler+0xd4>
 8006e5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e5e:	e01b      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e64:	e018      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e6a:	e015      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	e013      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e70:	2304      	movs	r3, #4
 8006e72:	e011      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e78:	e00e      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e7e:	e00b      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e84:	e008      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e8a:	e005      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e90:	e002      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e92:	2340      	movs	r3, #64	; 0x40
 8006e94:	e000      	b.n	8006e98 <HAL_DMA_IRQHandler+0x10c>
 8006e96:	2304      	movs	r3, #4
 8006e98:	4a79      	ldr	r2, [pc, #484]	; (8007080 <HAL_DMA_IRQHandler+0x2f4>)
 8006e9a:	6053      	str	r3, [r2, #4]
 8006e9c:	e057      	b.n	8006f4e <HAL_DMA_IRQHandler+0x1c2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a6d      	ldr	r2, [pc, #436]	; (8007058 <HAL_DMA_IRQHandler+0x2cc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d04f      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x1bc>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a6b      	ldr	r2, [pc, #428]	; (800705c <HAL_DMA_IRQHandler+0x2d0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d048      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x1b8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a6a      	ldr	r2, [pc, #424]	; (8007060 <HAL_DMA_IRQHandler+0x2d4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d040      	beq.n	8006f3e <HAL_DMA_IRQHandler+0x1b2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a68      	ldr	r2, [pc, #416]	; (8007064 <HAL_DMA_IRQHandler+0x2d8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d038      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x1ac>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a67      	ldr	r2, [pc, #412]	; (8007068 <HAL_DMA_IRQHandler+0x2dc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d030      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x1a6>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a65      	ldr	r2, [pc, #404]	; (800706c <HAL_DMA_IRQHandler+0x2e0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d028      	beq.n	8006f2c <HAL_DMA_IRQHandler+0x1a0>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a5d      	ldr	r2, [pc, #372]	; (8007054 <HAL_DMA_IRQHandler+0x2c8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d020      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x19a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a61      	ldr	r2, [pc, #388]	; (8007070 <HAL_DMA_IRQHandler+0x2e4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d019      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x196>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a60      	ldr	r2, [pc, #384]	; (8007074 <HAL_DMA_IRQHandler+0x2e8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d012      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x192>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a5e      	ldr	r2, [pc, #376]	; (8007078 <HAL_DMA_IRQHandler+0x2ec>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00a      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x18c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a5d      	ldr	r2, [pc, #372]	; (800707c <HAL_DMA_IRQHandler+0x2f0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d102      	bne.n	8006f12 <HAL_DMA_IRQHandler+0x186>
 8006f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f10:	e01b      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f16:	e018      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f1c:	e015      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	e013      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f22:	2304      	movs	r3, #4
 8006f24:	e011      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f2a:	e00e      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f30:	e00b      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f36:	e008      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f3c:	e005      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f42:	e002      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f44:	2340      	movs	r3, #64	; 0x40
 8006f46:	e000      	b.n	8006f4a <HAL_DMA_IRQHandler+0x1be>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	4a4e      	ldr	r2, [pc, #312]	; (8007084 <HAL_DMA_IRQHandler+0x2f8>)
 8006f4c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8136 	beq.w	80071c4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006f60:	e130      	b.n	80071c4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	2202      	movs	r2, #2
 8006f68:	409a      	lsls	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80f8 	beq.w	8007164 <HAL_DMA_IRQHandler+0x3d8>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80f2 	beq.w	8007164 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 020a 	bic.w	r2, r2, #10
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b29      	ldr	r3, [pc, #164]	; (8007054 <HAL_DMA_IRQHandler+0x2c8>)
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d973      	bls.n	800709a <HAL_DMA_IRQHandler+0x30e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a28      	ldr	r2, [pc, #160]	; (8007058 <HAL_DMA_IRQHandler+0x2cc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d06a      	beq.n	8007092 <HAL_DMA_IRQHandler+0x306>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	; (800705c <HAL_DMA_IRQHandler+0x2d0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d063      	beq.n	800708e <HAL_DMA_IRQHandler+0x302>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_DMA_IRQHandler+0x2d4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d05b      	beq.n	8007088 <HAL_DMA_IRQHandler+0x2fc>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	; (8007064 <HAL_DMA_IRQHandler+0x2d8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d038      	beq.n	800704c <HAL_DMA_IRQHandler+0x2c0>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_DMA_IRQHandler+0x2dc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d030      	beq.n	8007046 <HAL_DMA_IRQHandler+0x2ba>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a20      	ldr	r2, [pc, #128]	; (800706c <HAL_DMA_IRQHandler+0x2e0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d028      	beq.n	8007040 <HAL_DMA_IRQHandler+0x2b4>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_DMA_IRQHandler+0x2c8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d020      	beq.n	800703a <HAL_DMA_IRQHandler+0x2ae>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <HAL_DMA_IRQHandler+0x2e4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d019      	beq.n	8007036 <HAL_DMA_IRQHandler+0x2aa>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <HAL_DMA_IRQHandler+0x2e8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d012      	beq.n	8007032 <HAL_DMA_IRQHandler+0x2a6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a19      	ldr	r2, [pc, #100]	; (8007078 <HAL_DMA_IRQHandler+0x2ec>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d00a      	beq.n	800702c <HAL_DMA_IRQHandler+0x2a0>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_DMA_IRQHandler+0x2f0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d102      	bne.n	8007026 <HAL_DMA_IRQHandler+0x29a>
 8007020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007024:	e036      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800702a:	e033      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 800702c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007030:	e030      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007032:	2320      	movs	r3, #32
 8007034:	e02e      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007036:	2302      	movs	r3, #2
 8007038:	e02c      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 800703a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800703e:	e029      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007044:	e026      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800704a:	e023      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 800704c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007050:	e020      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007052:	bf00      	nop
 8007054:	40020080 	.word	0x40020080
 8007058:	40020008 	.word	0x40020008
 800705c:	4002001c 	.word	0x4002001c
 8007060:	40020030 	.word	0x40020030
 8007064:	40020044 	.word	0x40020044
 8007068:	40020058 	.word	0x40020058
 800706c:	4002006c 	.word	0x4002006c
 8007070:	40020408 	.word	0x40020408
 8007074:	4002041c 	.word	0x4002041c
 8007078:	40020430 	.word	0x40020430
 800707c:	40020444 	.word	0x40020444
 8007080:	40020400 	.word	0x40020400
 8007084:	40020000 	.word	0x40020000
 8007088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800708c:	e002      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 800708e:	2320      	movs	r3, #32
 8007090:	e000      	b.n	8007094 <HAL_DMA_IRQHandler+0x308>
 8007092:	2302      	movs	r3, #2
 8007094:	4a4e      	ldr	r2, [pc, #312]	; (80071d0 <HAL_DMA_IRQHandler+0x444>)
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	e057      	b.n	800714a <HAL_DMA_IRQHandler+0x3be>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a4d      	ldr	r2, [pc, #308]	; (80071d4 <HAL_DMA_IRQHandler+0x448>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d04f      	beq.n	8007144 <HAL_DMA_IRQHandler+0x3b8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a4b      	ldr	r2, [pc, #300]	; (80071d8 <HAL_DMA_IRQHandler+0x44c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d048      	beq.n	8007140 <HAL_DMA_IRQHandler+0x3b4>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a4a      	ldr	r2, [pc, #296]	; (80071dc <HAL_DMA_IRQHandler+0x450>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d040      	beq.n	800713a <HAL_DMA_IRQHandler+0x3ae>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a48      	ldr	r2, [pc, #288]	; (80071e0 <HAL_DMA_IRQHandler+0x454>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d038      	beq.n	8007134 <HAL_DMA_IRQHandler+0x3a8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a47      	ldr	r2, [pc, #284]	; (80071e4 <HAL_DMA_IRQHandler+0x458>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d030      	beq.n	800712e <HAL_DMA_IRQHandler+0x3a2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a45      	ldr	r2, [pc, #276]	; (80071e8 <HAL_DMA_IRQHandler+0x45c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d028      	beq.n	8007128 <HAL_DMA_IRQHandler+0x39c>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a44      	ldr	r2, [pc, #272]	; (80071ec <HAL_DMA_IRQHandler+0x460>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d020      	beq.n	8007122 <HAL_DMA_IRQHandler+0x396>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a42      	ldr	r2, [pc, #264]	; (80071f0 <HAL_DMA_IRQHandler+0x464>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d019      	beq.n	800711e <HAL_DMA_IRQHandler+0x392>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a41      	ldr	r2, [pc, #260]	; (80071f4 <HAL_DMA_IRQHandler+0x468>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d012      	beq.n	800711a <HAL_DMA_IRQHandler+0x38e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3f      	ldr	r2, [pc, #252]	; (80071f8 <HAL_DMA_IRQHandler+0x46c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00a      	beq.n	8007114 <HAL_DMA_IRQHandler+0x388>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a3e      	ldr	r2, [pc, #248]	; (80071fc <HAL_DMA_IRQHandler+0x470>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d102      	bne.n	800710e <HAL_DMA_IRQHandler+0x382>
 8007108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800710c:	e01b      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 800710e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007112:	e018      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 8007114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007118:	e015      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 800711a:	2320      	movs	r3, #32
 800711c:	e013      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 800711e:	2302      	movs	r3, #2
 8007120:	e011      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 8007122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007126:	e00e      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 8007128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800712c:	e00b      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 800712e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007132:	e008      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 8007134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007138:	e005      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 800713a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713e:	e002      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 8007140:	2320      	movs	r3, #32
 8007142:	e000      	b.n	8007146 <HAL_DMA_IRQHandler+0x3ba>
 8007144:	2302      	movs	r3, #2
 8007146:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <HAL_DMA_IRQHandler+0x474>)
 8007148:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d034      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007162:	e02f      	b.n	80071c4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	2208      	movs	r2, #8
 800716a:	409a      	lsls	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d028      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x43a>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d023      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 020e 	bic.w	r2, r2, #14
 800718c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	2101      	movs	r1, #1
 8007198:	fa01 f202 	lsl.w	r2, r1, r2
 800719c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
    }
  }
  return;
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
}
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40020400 	.word	0x40020400
 80071d4:	40020008 	.word	0x40020008
 80071d8:	4002001c 	.word	0x4002001c
 80071dc:	40020030 	.word	0x40020030
 80071e0:	40020044 	.word	0x40020044
 80071e4:	40020058 	.word	0x40020058
 80071e8:	4002006c 	.word	0x4002006c
 80071ec:	40020080 	.word	0x40020080
 80071f0:	40020408 	.word	0x40020408
 80071f4:	4002041c 	.word	0x4002041c
 80071f8:	40020430 	.word	0x40020430
 80071fc:	40020444 	.word	0x40020444
 8007200:	40020000 	.word	0x40020000

08007204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	2101      	movs	r1, #1
 800721c:	fa01 f202 	lsl.w	r2, r1, r2
 8007220:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2b10      	cmp	r3, #16
 8007230:	d108      	bne.n	8007244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007242:	e007      	b.n	8007254 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
}
 8007254:	bf00      	nop
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr
	...

08007260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007260:	b480      	push	{r7}
 8007262:	b08b      	sub	sp, #44	; 0x2c
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800726e:	2300      	movs	r3, #0
 8007270:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007272:	e179      	b.n	8007568 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007274:	2201      	movs	r2, #1
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	4013      	ands	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	429a      	cmp	r2, r3
 800728e:	f040 8168 	bne.w	8007562 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	4aa0      	ldr	r2, [pc, #640]	; (8007518 <HAL_GPIO_Init+0x2b8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d05e      	beq.n	800735a <HAL_GPIO_Init+0xfa>
 800729c:	4a9e      	ldr	r2, [pc, #632]	; (8007518 <HAL_GPIO_Init+0x2b8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d875      	bhi.n	800738e <HAL_GPIO_Init+0x12e>
 80072a2:	4a9e      	ldr	r2, [pc, #632]	; (800751c <HAL_GPIO_Init+0x2bc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d058      	beq.n	800735a <HAL_GPIO_Init+0xfa>
 80072a8:	4a9c      	ldr	r2, [pc, #624]	; (800751c <HAL_GPIO_Init+0x2bc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d86f      	bhi.n	800738e <HAL_GPIO_Init+0x12e>
 80072ae:	4a9c      	ldr	r2, [pc, #624]	; (8007520 <HAL_GPIO_Init+0x2c0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d052      	beq.n	800735a <HAL_GPIO_Init+0xfa>
 80072b4:	4a9a      	ldr	r2, [pc, #616]	; (8007520 <HAL_GPIO_Init+0x2c0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d869      	bhi.n	800738e <HAL_GPIO_Init+0x12e>
 80072ba:	4a9a      	ldr	r2, [pc, #616]	; (8007524 <HAL_GPIO_Init+0x2c4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d04c      	beq.n	800735a <HAL_GPIO_Init+0xfa>
 80072c0:	4a98      	ldr	r2, [pc, #608]	; (8007524 <HAL_GPIO_Init+0x2c4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d863      	bhi.n	800738e <HAL_GPIO_Init+0x12e>
 80072c6:	4a98      	ldr	r2, [pc, #608]	; (8007528 <HAL_GPIO_Init+0x2c8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d046      	beq.n	800735a <HAL_GPIO_Init+0xfa>
 80072cc:	4a96      	ldr	r2, [pc, #600]	; (8007528 <HAL_GPIO_Init+0x2c8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d85d      	bhi.n	800738e <HAL_GPIO_Init+0x12e>
 80072d2:	2b12      	cmp	r3, #18
 80072d4:	d82a      	bhi.n	800732c <HAL_GPIO_Init+0xcc>
 80072d6:	2b12      	cmp	r3, #18
 80072d8:	d859      	bhi.n	800738e <HAL_GPIO_Init+0x12e>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_GPIO_Init+0x80>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	0800735b 	.word	0x0800735b
 80072e4:	08007335 	.word	0x08007335
 80072e8:	08007347 	.word	0x08007347
 80072ec:	08007389 	.word	0x08007389
 80072f0:	0800738f 	.word	0x0800738f
 80072f4:	0800738f 	.word	0x0800738f
 80072f8:	0800738f 	.word	0x0800738f
 80072fc:	0800738f 	.word	0x0800738f
 8007300:	0800738f 	.word	0x0800738f
 8007304:	0800738f 	.word	0x0800738f
 8007308:	0800738f 	.word	0x0800738f
 800730c:	0800738f 	.word	0x0800738f
 8007310:	0800738f 	.word	0x0800738f
 8007314:	0800738f 	.word	0x0800738f
 8007318:	0800738f 	.word	0x0800738f
 800731c:	0800738f 	.word	0x0800738f
 8007320:	0800738f 	.word	0x0800738f
 8007324:	0800733d 	.word	0x0800733d
 8007328:	08007351 	.word	0x08007351
 800732c:	4a7f      	ldr	r2, [pc, #508]	; (800752c <HAL_GPIO_Init+0x2cc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007332:	e02c      	b.n	800738e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	623b      	str	r3, [r7, #32]
          break;
 800733a:	e029      	b.n	8007390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	3304      	adds	r3, #4
 8007342:	623b      	str	r3, [r7, #32]
          break;
 8007344:	e024      	b.n	8007390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	3308      	adds	r3, #8
 800734c:	623b      	str	r3, [r7, #32]
          break;
 800734e:	e01f      	b.n	8007390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	330c      	adds	r3, #12
 8007356:	623b      	str	r3, [r7, #32]
          break;
 8007358:	e01a      	b.n	8007390 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007362:	2304      	movs	r3, #4
 8007364:	623b      	str	r3, [r7, #32]
          break;
 8007366:	e013      	b.n	8007390 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007370:	2308      	movs	r3, #8
 8007372:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	611a      	str	r2, [r3, #16]
          break;
 800737a:	e009      	b.n	8007390 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800737c:	2308      	movs	r3, #8
 800737e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	615a      	str	r2, [r3, #20]
          break;
 8007386:	e003      	b.n	8007390 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007388:	2300      	movs	r3, #0
 800738a:	623b      	str	r3, [r7, #32]
          break;
 800738c:	e000      	b.n	8007390 <HAL_GPIO_Init+0x130>
          break;
 800738e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2bff      	cmp	r3, #255	; 0xff
 8007394:	d801      	bhi.n	800739a <HAL_GPIO_Init+0x13a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	e001      	b.n	800739e <HAL_GPIO_Init+0x13e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3304      	adds	r3, #4
 800739e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2bff      	cmp	r3, #255	; 0xff
 80073a4:	d802      	bhi.n	80073ac <HAL_GPIO_Init+0x14c>
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	e002      	b.n	80073b2 <HAL_GPIO_Init+0x152>
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	3b08      	subs	r3, #8
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	210f      	movs	r1, #15
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	fa01 f303 	lsl.w	r3, r1, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	6a39      	ldr	r1, [r7, #32]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	431a      	orrs	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80c1 	beq.w	8007562 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80073e0:	4b53      	ldr	r3, [pc, #332]	; (8007530 <HAL_GPIO_Init+0x2d0>)
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	4a52      	ldr	r2, [pc, #328]	; (8007530 <HAL_GPIO_Init+0x2d0>)
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	6193      	str	r3, [r2, #24]
 80073ec:	4b50      	ldr	r3, [pc, #320]	; (8007530 <HAL_GPIO_Init+0x2d0>)
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80073f8:	4a4e      	ldr	r2, [pc, #312]	; (8007534 <HAL_GPIO_Init+0x2d4>)
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	089b      	lsrs	r3, r3, #2
 80073fe:	3302      	adds	r3, #2
 8007400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007404:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	220f      	movs	r2, #15
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	43db      	mvns	r3, r3
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a46      	ldr	r2, [pc, #280]	; (8007538 <HAL_GPIO_Init+0x2d8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d01f      	beq.n	8007464 <HAL_GPIO_Init+0x204>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a45      	ldr	r2, [pc, #276]	; (800753c <HAL_GPIO_Init+0x2dc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d019      	beq.n	8007460 <HAL_GPIO_Init+0x200>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a44      	ldr	r2, [pc, #272]	; (8007540 <HAL_GPIO_Init+0x2e0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d013      	beq.n	800745c <HAL_GPIO_Init+0x1fc>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a43      	ldr	r2, [pc, #268]	; (8007544 <HAL_GPIO_Init+0x2e4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00d      	beq.n	8007458 <HAL_GPIO_Init+0x1f8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a42      	ldr	r2, [pc, #264]	; (8007548 <HAL_GPIO_Init+0x2e8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <HAL_GPIO_Init+0x1f4>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a41      	ldr	r2, [pc, #260]	; (800754c <HAL_GPIO_Init+0x2ec>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d101      	bne.n	8007450 <HAL_GPIO_Init+0x1f0>
 800744c:	2305      	movs	r3, #5
 800744e:	e00a      	b.n	8007466 <HAL_GPIO_Init+0x206>
 8007450:	2306      	movs	r3, #6
 8007452:	e008      	b.n	8007466 <HAL_GPIO_Init+0x206>
 8007454:	2304      	movs	r3, #4
 8007456:	e006      	b.n	8007466 <HAL_GPIO_Init+0x206>
 8007458:	2303      	movs	r3, #3
 800745a:	e004      	b.n	8007466 <HAL_GPIO_Init+0x206>
 800745c:	2302      	movs	r3, #2
 800745e:	e002      	b.n	8007466 <HAL_GPIO_Init+0x206>
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <HAL_GPIO_Init+0x206>
 8007464:	2300      	movs	r3, #0
 8007466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007468:	f002 0203 	and.w	r2, r2, #3
 800746c:	0092      	lsls	r2, r2, #2
 800746e:	4093      	lsls	r3, r2
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007476:	492f      	ldr	r1, [pc, #188]	; (8007534 <HAL_GPIO_Init+0x2d4>)
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	089b      	lsrs	r3, r3, #2
 800747c:	3302      	adds	r3, #2
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007490:	4b2f      	ldr	r3, [pc, #188]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	492e      	ldr	r1, [pc, #184]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	4313      	orrs	r3, r2
 800749a:	600b      	str	r3, [r1, #0]
 800749c:	e006      	b.n	80074ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800749e:	4b2c      	ldr	r3, [pc, #176]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	492a      	ldr	r1, [pc, #168]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80074b8:	4b25      	ldr	r3, [pc, #148]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4924      	ldr	r1, [pc, #144]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	604b      	str	r3, [r1, #4]
 80074c4:	e006      	b.n	80074d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80074c6:	4b22      	ldr	r3, [pc, #136]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	4920      	ldr	r1, [pc, #128]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80074e0:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	491a      	ldr	r1, [pc, #104]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	608b      	str	r3, [r1, #8]
 80074ec:	e006      	b.n	80074fc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80074ee:	4b18      	ldr	r3, [pc, #96]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	43db      	mvns	r3, r3
 80074f6:	4916      	ldr	r1, [pc, #88]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d025      	beq.n	8007554 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	4910      	ldr	r1, [pc, #64]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	60cb      	str	r3, [r1, #12]
 8007514:	e025      	b.n	8007562 <HAL_GPIO_Init+0x302>
 8007516:	bf00      	nop
 8007518:	10320000 	.word	0x10320000
 800751c:	10310000 	.word	0x10310000
 8007520:	10220000 	.word	0x10220000
 8007524:	10210000 	.word	0x10210000
 8007528:	10120000 	.word	0x10120000
 800752c:	10110000 	.word	0x10110000
 8007530:	40021000 	.word	0x40021000
 8007534:	40010000 	.word	0x40010000
 8007538:	40010800 	.word	0x40010800
 800753c:	40010c00 	.word	0x40010c00
 8007540:	40011000 	.word	0x40011000
 8007544:	40011400 	.word	0x40011400
 8007548:	40011800 	.word	0x40011800
 800754c:	40011c00 	.word	0x40011c00
 8007550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <HAL_GPIO_Init+0x324>)
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	43db      	mvns	r3, r3
 800755c:	4909      	ldr	r1, [pc, #36]	; (8007584 <HAL_GPIO_Init+0x324>)
 800755e:	4013      	ands	r3, r2
 8007560:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	3301      	adds	r3, #1
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	fa22 f303 	lsr.w	r3, r2, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	f47f ae7e 	bne.w	8007274 <HAL_GPIO_Init+0x14>
  }
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	372c      	adds	r7, #44	; 0x2c
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr
 8007584:	40010400 	.word	0x40010400

08007588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	887b      	ldrh	r3, [r7, #2]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e001      	b.n	80075aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	807b      	strh	r3, [r7, #2]
 80075c2:	4613      	mov	r3, r2
 80075c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075c6:	787b      	ldrb	r3, [r7, #1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075cc:	887a      	ldrh	r2, [r7, #2]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80075d2:	e003      	b.n	80075dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80075d4:	887b      	ldrh	r3, [r7, #2]
 80075d6:	041a      	lsls	r2, r3, #16
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr

080075e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4013      	ands	r3, r2
 80075fe:	041a      	lsls	r2, r3, #16
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	43d9      	mvns	r1, r3
 8007604:	887b      	ldrh	r3, [r7, #2]
 8007606:	400b      	ands	r3, r1
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	611a      	str	r2, [r3, #16]
}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e26c      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8087 	beq.w	8007746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007638:	4b92      	ldr	r3, [pc, #584]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b04      	cmp	r3, #4
 8007642:	d00c      	beq.n	800765e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007644:	4b8f      	ldr	r3, [pc, #572]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f003 030c 	and.w	r3, r3, #12
 800764c:	2b08      	cmp	r3, #8
 800764e:	d112      	bne.n	8007676 <HAL_RCC_OscConfig+0x5e>
 8007650:	4b8c      	ldr	r3, [pc, #560]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765c:	d10b      	bne.n	8007676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800765e:	4b89      	ldr	r3, [pc, #548]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d06c      	beq.n	8007744 <HAL_RCC_OscConfig+0x12c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d168      	bne.n	8007744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e246      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767e:	d106      	bne.n	800768e <HAL_RCC_OscConfig+0x76>
 8007680:	4b80      	ldr	r3, [pc, #512]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a7f      	ldr	r2, [pc, #508]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	e02e      	b.n	80076ec <HAL_RCC_OscConfig+0xd4>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10c      	bne.n	80076b0 <HAL_RCC_OscConfig+0x98>
 8007696:	4b7b      	ldr	r3, [pc, #492]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a7a      	ldr	r2, [pc, #488]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 800769c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	4b78      	ldr	r3, [pc, #480]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a77      	ldr	r2, [pc, #476]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e01d      	b.n	80076ec <HAL_RCC_OscConfig+0xd4>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076b8:	d10c      	bne.n	80076d4 <HAL_RCC_OscConfig+0xbc>
 80076ba:	4b72      	ldr	r3, [pc, #456]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a71      	ldr	r2, [pc, #452]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b6f      	ldr	r3, [pc, #444]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a6e      	ldr	r2, [pc, #440]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e00b      	b.n	80076ec <HAL_RCC_OscConfig+0xd4>
 80076d4:	4b6b      	ldr	r3, [pc, #428]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a6a      	ldr	r2, [pc, #424]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	4b68      	ldr	r3, [pc, #416]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a67      	ldr	r2, [pc, #412]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80076e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d013      	beq.n	800771c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f4:	f7fe f826 	bl	8005744 <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076fc:	f7fe f822 	bl	8005744 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b64      	cmp	r3, #100	; 0x64
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e1fa      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770e:	4b5d      	ldr	r3, [pc, #372]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f0      	beq.n	80076fc <HAL_RCC_OscConfig+0xe4>
 800771a:	e014      	b.n	8007746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fe f812 	bl	8005744 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007724:	f7fe f80e 	bl	8005744 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b64      	cmp	r3, #100	; 0x64
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e1e6      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007736:	4b53      	ldr	r3, [pc, #332]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x10c>
 8007742:	e000      	b.n	8007746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d063      	beq.n	800781a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007752:	4b4c      	ldr	r3, [pc, #304]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f003 030c 	and.w	r3, r3, #12
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800775e:	4b49      	ldr	r3, [pc, #292]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b08      	cmp	r3, #8
 8007768:	d11c      	bne.n	80077a4 <HAL_RCC_OscConfig+0x18c>
 800776a:	4b46      	ldr	r3, [pc, #280]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d116      	bne.n	80077a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007776:	4b43      	ldr	r3, [pc, #268]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_RCC_OscConfig+0x176>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d001      	beq.n	800778e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e1ba      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800778e:	4b3d      	ldr	r3, [pc, #244]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4939      	ldr	r1, [pc, #228]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a2:	e03a      	b.n	800781a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d020      	beq.n	80077ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077ac:	4b36      	ldr	r3, [pc, #216]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b2:	f7fd ffc7 	bl	8005744 <HAL_GetTick>
 80077b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b8:	e008      	b.n	80077cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ba:	f7fd ffc3 	bl	8005744 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e19b      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077cc:	4b2d      	ldr	r3, [pc, #180]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0f0      	beq.n	80077ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d8:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4927      	ldr	r1, [pc, #156]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]
 80077ec:	e015      	b.n	800781a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ee:	4b26      	ldr	r3, [pc, #152]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f4:	f7fd ffa6 	bl	8005744 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077fc:	f7fd ffa2 	bl	8005744 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e17a      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800780e:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f0      	bne.n	80077fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d03a      	beq.n	800789c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d019      	beq.n	8007862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800782e:	4b17      	ldr	r3, [pc, #92]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007834:	f7fd ff86 	bl	8005744 <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800783c:	f7fd ff82 	bl	8005744 <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e15a      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <HAL_RCC_OscConfig+0x26c>)
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0f0      	beq.n	800783c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800785a:	2001      	movs	r0, #1
 800785c:	f000 fada 	bl	8007e14 <RCC_Delay>
 8007860:	e01c      	b.n	800789c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007868:	f7fd ff6c 	bl	8005744 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800786e:	e00f      	b.n	8007890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007870:	f7fd ff68 	bl	8005744 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d908      	bls.n	8007890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e140      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
 8007882:	bf00      	nop
 8007884:	40021000 	.word	0x40021000
 8007888:	42420000 	.word	0x42420000
 800788c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007890:	4b9e      	ldr	r3, [pc, #632]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e9      	bne.n	8007870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80a6 	beq.w	80079f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078aa:	2300      	movs	r3, #0
 80078ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ae:	4b97      	ldr	r3, [pc, #604]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ba:	4b94      	ldr	r3, [pc, #592]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	4a93      	ldr	r2, [pc, #588]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80078c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c4:	61d3      	str	r3, [r2, #28]
 80078c6:	4b91      	ldr	r3, [pc, #580]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d6:	4b8e      	ldr	r3, [pc, #568]	; (8007b10 <HAL_RCC_OscConfig+0x4f8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d118      	bne.n	8007914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078e2:	4b8b      	ldr	r3, [pc, #556]	; (8007b10 <HAL_RCC_OscConfig+0x4f8>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a8a      	ldr	r2, [pc, #552]	; (8007b10 <HAL_RCC_OscConfig+0x4f8>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ee:	f7fd ff29 	bl	8005744 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f6:	f7fd ff25 	bl	8005744 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b64      	cmp	r3, #100	; 0x64
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e0fd      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007908:	4b81      	ldr	r3, [pc, #516]	; (8007b10 <HAL_RCC_OscConfig+0x4f8>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0f0      	beq.n	80078f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d106      	bne.n	800792a <HAL_RCC_OscConfig+0x312>
 800791c:	4b7b      	ldr	r3, [pc, #492]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	4a7a      	ldr	r2, [pc, #488]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	6213      	str	r3, [r2, #32]
 8007928:	e02d      	b.n	8007986 <HAL_RCC_OscConfig+0x36e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <HAL_RCC_OscConfig+0x334>
 8007932:	4b76      	ldr	r3, [pc, #472]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	4a75      	ldr	r2, [pc, #468]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	6213      	str	r3, [r2, #32]
 800793e:	4b73      	ldr	r3, [pc, #460]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	4a72      	ldr	r2, [pc, #456]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007944:	f023 0304 	bic.w	r3, r3, #4
 8007948:	6213      	str	r3, [r2, #32]
 800794a:	e01c      	b.n	8007986 <HAL_RCC_OscConfig+0x36e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b05      	cmp	r3, #5
 8007952:	d10c      	bne.n	800796e <HAL_RCC_OscConfig+0x356>
 8007954:	4b6d      	ldr	r3, [pc, #436]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	4a6c      	ldr	r2, [pc, #432]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 800795a:	f043 0304 	orr.w	r3, r3, #4
 800795e:	6213      	str	r3, [r2, #32]
 8007960:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	4a69      	ldr	r2, [pc, #420]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	6213      	str	r3, [r2, #32]
 800796c:	e00b      	b.n	8007986 <HAL_RCC_OscConfig+0x36e>
 800796e:	4b67      	ldr	r3, [pc, #412]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	4a66      	ldr	r2, [pc, #408]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007974:	f023 0301 	bic.w	r3, r3, #1
 8007978:	6213      	str	r3, [r2, #32]
 800797a:	4b64      	ldr	r3, [pc, #400]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	4a63      	ldr	r2, [pc, #396]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007980:	f023 0304 	bic.w	r3, r3, #4
 8007984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d015      	beq.n	80079ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798e:	f7fd fed9 	bl	8005744 <HAL_GetTick>
 8007992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007994:	e00a      	b.n	80079ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007996:	f7fd fed5 	bl	8005744 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d901      	bls.n	80079ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e0ab      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ac:	4b57      	ldr	r3, [pc, #348]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0ee      	beq.n	8007996 <HAL_RCC_OscConfig+0x37e>
 80079b8:	e014      	b.n	80079e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ba:	f7fd fec3 	bl	8005744 <HAL_GetTick>
 80079be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c0:	e00a      	b.n	80079d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079c2:	f7fd febf 	bl	8005744 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e095      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d8:	4b4c      	ldr	r3, [pc, #304]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1ee      	bne.n	80079c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ea:	4b48      	ldr	r3, [pc, #288]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	4a47      	ldr	r2, [pc, #284]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 80079f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8081 	beq.w	8007b02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a00:	4b42      	ldr	r3, [pc, #264]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f003 030c 	and.w	r3, r3, #12
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d061      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d146      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a14:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <HAL_RCC_OscConfig+0x4fc>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1a:	f7fd fe93 	bl	8005744 <HAL_GetTick>
 8007a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a20:	e008      	b.n	8007a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a22:	f7fd fe8f 	bl	8005744 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d901      	bls.n	8007a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e067      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a34:	4b35      	ldr	r3, [pc, #212]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f0      	bne.n	8007a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d108      	bne.n	8007a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a4a:	4b30      	ldr	r3, [pc, #192]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	492d      	ldr	r1, [pc, #180]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a5c:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a19      	ldr	r1, [r3, #32]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	4927      	ldr	r1, [pc, #156]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <HAL_RCC_OscConfig+0x4fc>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7a:	f7fd fe63 	bl	8005744 <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a82:	f7fd fe5f 	bl	8005744 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e037      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <HAL_RCC_OscConfig+0x46a>
 8007aa0:	e02f      	b.n	8007b02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <HAL_RCC_OscConfig+0x4fc>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fd fe4c 	bl	8005744 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab0:	f7fd fe48 	bl	8005744 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e020      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x498>
 8007ace:	e018      	b.n	8007b02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e013      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007adc:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <HAL_RCC_OscConfig+0x4f4>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d106      	bne.n	8007afe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d001      	beq.n	8007b02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	40007000 	.word	0x40007000
 8007b14:	42420060 	.word	0x42420060

08007b18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0d0      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b2c:	4b6a      	ldr	r3, [pc, #424]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d910      	bls.n	8007b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	4b67      	ldr	r3, [pc, #412]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f023 0207 	bic.w	r2, r3, #7
 8007b42:	4965      	ldr	r1, [pc, #404]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b4a:	4b63      	ldr	r3, [pc, #396]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d001      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e0b8      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d020      	beq.n	8007baa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b74:	4b59      	ldr	r3, [pc, #356]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a58      	ldr	r2, [pc, #352]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b8c:	4b53      	ldr	r3, [pc, #332]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a52      	ldr	r2, [pc, #328]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007b92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b98:	4b50      	ldr	r3, [pc, #320]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	494d      	ldr	r1, [pc, #308]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d040      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d107      	bne.n	8007bce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bbe:	4b47      	ldr	r3, [pc, #284]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d115      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e07f      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd6:	4b41      	ldr	r3, [pc, #260]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e073      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007be6:	4b3d      	ldr	r3, [pc, #244]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e06b      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f023 0203 	bic.w	r2, r3, #3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	4936      	ldr	r1, [pc, #216]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c08:	f7fd fd9c 	bl	8005744 <HAL_GetTick>
 8007c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c0e:	e00a      	b.n	8007c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c10:	f7fd fd98 	bl	8005744 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e053      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c26:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f003 020c 	and.w	r2, r3, #12
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d1eb      	bne.n	8007c10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c38:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d210      	bcs.n	8007c68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c46:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f023 0207 	bic.w	r2, r3, #7
 8007c4e:	4922      	ldr	r1, [pc, #136]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c56:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d001      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e032      	b.n	8007cce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c74:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	4916      	ldr	r1, [pc, #88]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c92:	4b12      	ldr	r3, [pc, #72]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	490e      	ldr	r1, [pc, #56]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ca6:	f000 f821 	bl	8007cec <HAL_RCC_GetSysClockFreq>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	490a      	ldr	r1, [pc, #40]	; (8007ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb8:	5ccb      	ldrb	r3, [r1, r3]
 8007cba:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbe:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <HAL_RCC_ClockConfig+0x1cc>)
 8007cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <HAL_RCC_ClockConfig+0x1d0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fd0c 	bl	80056e4 <HAL_InitTick>

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40022000 	.word	0x40022000
 8007cdc:	40021000 	.word	0x40021000
 8007ce0:	0800b230 	.word	0x0800b230
 8007ce4:	20000000 	.word	0x20000000
 8007ce8:	20000004 	.word	0x20000004

08007cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cec:	b490      	push	{r4, r7}
 8007cee:	b08a      	sub	sp, #40	; 0x28
 8007cf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007cf2:	4b2a      	ldr	r3, [pc, #168]	; (8007d9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007cf4:	1d3c      	adds	r4, r7, #4
 8007cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007cfc:	f240 2301 	movw	r3, #513	; 0x201
 8007d00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	2300      	movs	r3, #0
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d16:	4b22      	ldr	r3, [pc, #136]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d002      	beq.n	8007d2c <HAL_RCC_GetSysClockFreq+0x40>
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d003      	beq.n	8007d32 <HAL_RCC_GetSysClockFreq+0x46>
 8007d2a:	e02d      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d2c:	4b1d      	ldr	r3, [pc, #116]	; (8007da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d2e:	623b      	str	r3, [r7, #32]
      break;
 8007d30:	e02d      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	0c9b      	lsrs	r3, r3, #18
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d3e:	4413      	add	r3, r2
 8007d40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007d44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d013      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d50:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	0c5b      	lsrs	r3, r3, #17
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d5e:	4413      	add	r3, r2
 8007d60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007d64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4a0e      	ldr	r2, [pc, #56]	; (8007da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d6a:	fb02 f203 	mul.w	r2, r2, r3
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
 8007d76:	e004      	b.n	8007d82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4a0b      	ldr	r2, [pc, #44]	; (8007da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d7c:	fb02 f303 	mul.w	r3, r2, r3
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	623b      	str	r3, [r7, #32]
      break;
 8007d86:	e002      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d88:	4b08      	ldr	r3, [pc, #32]	; (8007dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d8a:	623b      	str	r3, [r7, #32]
      break;
 8007d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3728      	adds	r7, #40	; 0x28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc90      	pop	{r4, r7}
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	0800b1a8 	.word	0x0800b1a8
 8007da0:	40021000 	.word	0x40021000
 8007da4:	00f42400 	.word	0x00f42400
 8007da8:	003d0900 	.word	0x003d0900
 8007dac:	007a1200 	.word	0x007a1200

08007db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007db6:	681b      	ldr	r3, [r3, #0]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr
 8007dc0:	20000000 	.word	0x20000000

08007dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dc8:	f7ff fff2 	bl	8007db0 <HAL_RCC_GetHCLKFreq>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	4903      	ldr	r1, [pc, #12]	; (8007de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dda:	5ccb      	ldrb	r3, [r1, r3]
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40021000 	.word	0x40021000
 8007de8:	0800b240 	.word	0x0800b240

08007dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007df0:	f7ff ffde 	bl	8007db0 <HAL_RCC_GetHCLKFreq>
 8007df4:	4602      	mov	r2, r0
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	0adb      	lsrs	r3, r3, #11
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	4903      	ldr	r1, [pc, #12]	; (8007e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e02:	5ccb      	ldrb	r3, [r1, r3]
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	40021000 	.word	0x40021000
 8007e10:	0800b240 	.word	0x0800b240

08007e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <RCC_Delay+0x34>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <RCC_Delay+0x38>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	0a5b      	lsrs	r3, r3, #9
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	fb02 f303 	mul.w	r3, r2, r3
 8007e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e30:	bf00      	nop
  }
  while (Delay --);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	60fa      	str	r2, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f9      	bne.n	8007e30 <RCC_Delay+0x1c>
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	20000000 	.word	0x20000000
 8007e4c:	10624dd3 	.word	0x10624dd3

08007e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d07d      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e70:	4b4f      	ldr	r3, [pc, #316]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10d      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7c:	4b4c      	ldr	r3, [pc, #304]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	4a4b      	ldr	r2, [pc, #300]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e86:	61d3      	str	r3, [r2, #28]
 8007e88:	4b49      	ldr	r3, [pc, #292]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e98:	4b46      	ldr	r3, [pc, #280]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d118      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ea4:	4b43      	ldr	r3, [pc, #268]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a42      	ldr	r2, [pc, #264]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eb0:	f7fd fc48 	bl	8005744 <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb6:	e008      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eb8:	f7fd fc44 	bl	8005744 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b64      	cmp	r3, #100	; 0x64
 8007ec4:	d901      	bls.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e06d      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eca:	4b3a      	ldr	r3, [pc, #232]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ed6:	4b36      	ldr	r3, [pc, #216]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ede:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02e      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d027      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ef4:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007efe:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f04:	4b2c      	ldr	r3, [pc, #176]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007f0a:	4a29      	ldr	r2, [pc, #164]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d014      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f1a:	f7fd fc13 	bl	8005744 <HAL_GetTick>
 8007f1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f20:	e00a      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f22:	f7fd fc0f 	bl	8005744 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d901      	bls.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e036      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f38:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0ee      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f44:	4b1a      	ldr	r3, [pc, #104]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4917      	ldr	r1, [pc, #92]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d105      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f5c:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	4a13      	ldr	r2, [pc, #76]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f74:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	490b      	ldr	r1, [pc, #44]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f92:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	4904      	ldr	r1, [pc, #16]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40021000 	.word	0x40021000
 8007fb4:	40007000 	.word	0x40007000
 8007fb8:	42420440 	.word	0x42420440

08007fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d001      	beq.n	8007fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e044      	b.n	800805e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1d      	ldr	r2, [pc, #116]	; (8008068 <HAL_TIM_Base_Start_IT+0xac>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d018      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x6c>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1c      	ldr	r2, [pc, #112]	; (800806c <HAL_TIM_Base_Start_IT+0xb0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d013      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x6c>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008008:	d00e      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x6c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a18      	ldr	r2, [pc, #96]	; (8008070 <HAL_TIM_Base_Start_IT+0xb4>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d009      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x6c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a16      	ldr	r2, [pc, #88]	; (8008074 <HAL_TIM_Base_Start_IT+0xb8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x6c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a15      	ldr	r2, [pc, #84]	; (8008078 <HAL_TIM_Base_Start_IT+0xbc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d111      	bne.n	800804c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b06      	cmp	r3, #6
 8008038:	d010      	beq.n	800805c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804a:	e007      	b.n	800805c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40013400 	.word	0x40013400
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00

0800807c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	f241 1311 	movw	r3, #4369	; 0x1111
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <HAL_TIM_Base_Stop_IT+0x48>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6a1a      	ldr	r2, [r3, #32]
 80080aa:	f240 4344 	movw	r3, #1092	; 0x444
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d107      	bne.n	80080c4 <HAL_TIM_Base_Stop_IT+0x48>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0201 	bic.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e041      	b.n	800816e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fd f88e 	bl	8005220 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3304      	adds	r3, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f000 fbe8 	bl	80088ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e041      	b.n	800820c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fd f80d 	bl	80051bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f000 fb99 	bl	80088ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_TIM_PWM_Start+0x24>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	e022      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b04      	cmp	r3, #4
 800823c:	d109      	bne.n	8008252 <HAL_TIM_PWM_Start+0x3e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	bf14      	ite	ne
 800824a:	2301      	movne	r3, #1
 800824c:	2300      	moveq	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	e015      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d109      	bne.n	800826c <HAL_TIM_PWM_Start+0x58>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e008      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e072      	b.n	800836c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <HAL_TIM_PWM_Start+0x82>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008294:	e013      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_PWM_Start+0x92>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a4:	e00b      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d104      	bne.n	80082b6 <HAL_TIM_PWM_Start+0xa2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b4:	e003      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fd36 	bl	8008d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a28      	ldr	r2, [pc, #160]	; (8008374 <HAL_TIM_PWM_Start+0x160>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d004      	beq.n	80082e0 <HAL_TIM_PWM_Start+0xcc>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a27      	ldr	r2, [pc, #156]	; (8008378 <HAL_TIM_PWM_Start+0x164>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d101      	bne.n	80082e4 <HAL_TIM_PWM_Start+0xd0>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <HAL_TIM_PWM_Start+0xd2>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1d      	ldr	r2, [pc, #116]	; (8008374 <HAL_TIM_PWM_Start+0x160>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d018      	beq.n	8008336 <HAL_TIM_PWM_Start+0x122>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1b      	ldr	r2, [pc, #108]	; (8008378 <HAL_TIM_PWM_Start+0x164>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d013      	beq.n	8008336 <HAL_TIM_PWM_Start+0x122>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008316:	d00e      	beq.n	8008336 <HAL_TIM_PWM_Start+0x122>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a17      	ldr	r2, [pc, #92]	; (800837c <HAL_TIM_PWM_Start+0x168>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d009      	beq.n	8008336 <HAL_TIM_PWM_Start+0x122>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a16      	ldr	r2, [pc, #88]	; (8008380 <HAL_TIM_PWM_Start+0x16c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d004      	beq.n	8008336 <HAL_TIM_PWM_Start+0x122>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a14      	ldr	r2, [pc, #80]	; (8008384 <HAL_TIM_PWM_Start+0x170>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d111      	bne.n	800835a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b06      	cmp	r3, #6
 8008346:	d010      	beq.n	800836a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008358:	e007      	b.n	800836a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0201 	orr.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40012c00 	.word	0x40012c00
 8008378:	40013400 	.word	0x40013400
 800837c:	40000400 	.word	0x40000400
 8008380:	40000800 	.word	0x40000800
 8008384:	40000c00 	.word	0x40000c00

08008388 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2200      	movs	r2, #0
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fccc 	bl	8008d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a2e      	ldr	r2, [pc, #184]	; (8008460 <HAL_TIM_PWM_Stop+0xd8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d004      	beq.n	80083b4 <HAL_TIM_PWM_Stop+0x2c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a2d      	ldr	r2, [pc, #180]	; (8008464 <HAL_TIM_PWM_Stop+0xdc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d101      	bne.n	80083b8 <HAL_TIM_PWM_Stop+0x30>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <HAL_TIM_PWM_Stop+0x32>
 80083b8:	2300      	movs	r3, #0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d017      	beq.n	80083ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6a1a      	ldr	r2, [r3, #32]
 80083c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10f      	bne.n	80083ee <HAL_TIM_PWM_Stop+0x66>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	f240 4344 	movw	r3, #1092	; 0x444
 80083d8:	4013      	ands	r3, r2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d107      	bne.n	80083ee <HAL_TIM_PWM_Stop+0x66>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6a1a      	ldr	r2, [r3, #32]
 80083f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10f      	bne.n	800841e <HAL_TIM_PWM_Stop+0x96>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6a1a      	ldr	r2, [r3, #32]
 8008404:	f240 4344 	movw	r3, #1092	; 0x444
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d107      	bne.n	800841e <HAL_TIM_PWM_Stop+0x96>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0201 	bic.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <HAL_TIM_PWM_Stop+0xa6>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800842c:	e013      	b.n	8008456 <HAL_TIM_PWM_Stop+0xce>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d104      	bne.n	800843e <HAL_TIM_PWM_Stop+0xb6>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800843c:	e00b      	b.n	8008456 <HAL_TIM_PWM_Stop+0xce>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d104      	bne.n	800844e <HAL_TIM_PWM_Stop+0xc6>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800844c:	e003      	b.n	8008456 <HAL_TIM_PWM_Stop+0xce>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40013400 	.word	0x40013400

08008468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d122      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d11b      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0202 	mvn.w	r2, #2
 8008494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa03 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f9f6 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fa05 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d122      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d11b      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0204 	mvn.w	r2, #4
 80084e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2202      	movs	r2, #2
 80084ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f9d9 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9cc 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f9db 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b08      	cmp	r3, #8
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b08      	cmp	r3, #8
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0208 	mvn.w	r2, #8
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2204      	movs	r2, #4
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f9af 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f9a2 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f9b1 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b10      	cmp	r3, #16
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b10      	cmp	r3, #16
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0210 	mvn.w	r2, #16
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2208      	movs	r2, #8
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f985 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f978 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f987 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10e      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d107      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0201 	mvn.w	r2, #1
 80085e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7fb fb6c 	bl	8003cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d10e      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d107      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fd84 	bl	8009120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d10e      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d107      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800863c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f94b 	bl	80088da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b20      	cmp	r3, #32
 8008650:	d10e      	bne.n	8008670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d107      	bne.n	8008670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0220 	mvn.w	r2, #32
 8008668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fd4f 	bl	800910e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_TIM_OC_ConfigChannel+0x1a>
 800868e:	2302      	movs	r3, #2
 8008690:	e046      	b.n	8008720 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b0c      	cmp	r3, #12
 800869e:	d839      	bhi.n	8008714 <HAL_TIM_OC_ConfigChannel+0x9c>
 80086a0:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80086a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a6:	bf00      	nop
 80086a8:	080086dd 	.word	0x080086dd
 80086ac:	08008715 	.word	0x08008715
 80086b0:	08008715 	.word	0x08008715
 80086b4:	08008715 	.word	0x08008715
 80086b8:	080086eb 	.word	0x080086eb
 80086bc:	08008715 	.word	0x08008715
 80086c0:	08008715 	.word	0x08008715
 80086c4:	08008715 	.word	0x08008715
 80086c8:	080086f9 	.word	0x080086f9
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008715 	.word	0x08008715
 80086d4:	08008715 	.word	0x08008715
 80086d8:	08008707 	.word	0x08008707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f97c 	bl	80089e0 <TIM_OC1_SetConfig>
      break;
 80086e8:	e015      	b.n	8008716 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f9e5 	bl	8008ac0 <TIM_OC2_SetConfig>
      break;
 80086f6:	e00e      	b.n	8008716 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fa52 	bl	8008ba8 <TIM_OC3_SetConfig>
      break;
 8008704:	e007      	b.n	8008716 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fabf 	bl	8008c90 <TIM_OC4_SetConfig>
      break;
 8008712:	e000      	b.n	8008716 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800873e:	2302      	movs	r3, #2
 8008740:	e0ac      	b.n	800889c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b0c      	cmp	r3, #12
 800874e:	f200 809f 	bhi.w	8008890 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800878d 	.word	0x0800878d
 800875c:	08008891 	.word	0x08008891
 8008760:	08008891 	.word	0x08008891
 8008764:	08008891 	.word	0x08008891
 8008768:	080087cd 	.word	0x080087cd
 800876c:	08008891 	.word	0x08008891
 8008770:	08008891 	.word	0x08008891
 8008774:	08008891 	.word	0x08008891
 8008778:	0800880f 	.word	0x0800880f
 800877c:	08008891 	.word	0x08008891
 8008780:	08008891 	.word	0x08008891
 8008784:	08008891 	.word	0x08008891
 8008788:	0800884f 	.word	0x0800884f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f924 	bl	80089e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0208 	orr.w	r2, r2, #8
 80087a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0204 	bic.w	r2, r2, #4
 80087b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6999      	ldr	r1, [r3, #24]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	619a      	str	r2, [r3, #24]
      break;
 80087ca:	e062      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f974 	bl	8008ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	619a      	str	r2, [r3, #24]
      break;
 800880c:	e041      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f9c7 	bl	8008ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0208 	orr.w	r2, r2, #8
 8008828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0204 	bic.w	r2, r2, #4
 8008838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69d9      	ldr	r1, [r3, #28]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	61da      	str	r2, [r3, #28]
      break;
 800884c:	e021      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fa1b 	bl	8008c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	021a      	lsls	r2, r3, #8
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	61da      	str	r2, [r3, #28]
      break;
 800888e:	e000      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr

080088da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr

080088ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a33      	ldr	r2, [pc, #204]	; (80089cc <TIM_Base_SetConfig+0xe0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <TIM_Base_SetConfig+0x40>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a32      	ldr	r2, [pc, #200]	; (80089d0 <TIM_Base_SetConfig+0xe4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00f      	beq.n	800892c <TIM_Base_SetConfig+0x40>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008912:	d00b      	beq.n	800892c <TIM_Base_SetConfig+0x40>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2f      	ldr	r2, [pc, #188]	; (80089d4 <TIM_Base_SetConfig+0xe8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d007      	beq.n	800892c <TIM_Base_SetConfig+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a2e      	ldr	r2, [pc, #184]	; (80089d8 <TIM_Base_SetConfig+0xec>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_Base_SetConfig+0x40>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a2d      	ldr	r2, [pc, #180]	; (80089dc <TIM_Base_SetConfig+0xf0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d108      	bne.n	800893e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a22      	ldr	r2, [pc, #136]	; (80089cc <TIM_Base_SetConfig+0xe0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d013      	beq.n	800896e <TIM_Base_SetConfig+0x82>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <TIM_Base_SetConfig+0xe4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00f      	beq.n	800896e <TIM_Base_SetConfig+0x82>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d00b      	beq.n	800896e <TIM_Base_SetConfig+0x82>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1e      	ldr	r2, [pc, #120]	; (80089d4 <TIM_Base_SetConfig+0xe8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d007      	beq.n	800896e <TIM_Base_SetConfig+0x82>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1d      	ldr	r2, [pc, #116]	; (80089d8 <TIM_Base_SetConfig+0xec>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d003      	beq.n	800896e <TIM_Base_SetConfig+0x82>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <TIM_Base_SetConfig+0xf0>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d108      	bne.n	8008980 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a09      	ldr	r2, [pc, #36]	; (80089cc <TIM_Base_SetConfig+0xe0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_Base_SetConfig+0xc8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a08      	ldr	r2, [pc, #32]	; (80089d0 <TIM_Base_SetConfig+0xe4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d103      	bne.n	80089bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	615a      	str	r2, [r3, #20]
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr
 80089cc:	40012c00 	.word	0x40012c00
 80089d0:	40013400 	.word	0x40013400
 80089d4:	40000400 	.word	0x40000400
 80089d8:	40000800 	.word	0x40000800
 80089dc:	40000c00 	.word	0x40000c00

080089e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f023 0201 	bic.w	r2, r3, #1
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f023 0302 	bic.w	r3, r3, #2
 8008a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <TIM_OC1_SetConfig+0xd8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_OC1_SetConfig+0x64>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1f      	ldr	r2, [pc, #124]	; (8008abc <TIM_OC1_SetConfig+0xdc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d10c      	bne.n	8008a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0308 	bic.w	r3, r3, #8
 8008a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f023 0304 	bic.w	r3, r3, #4
 8008a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <TIM_OC1_SetConfig+0xd8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_OC1_SetConfig+0x8e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a14      	ldr	r2, [pc, #80]	; (8008abc <TIM_OC1_SetConfig+0xdc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d111      	bne.n	8008a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40012c00 	.word	0x40012c00
 8008abc:	40013400 	.word	0x40013400

08008ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f023 0210 	bic.w	r2, r3, #16
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f023 0320 	bic.w	r3, r3, #32
 8008b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a21      	ldr	r2, [pc, #132]	; (8008ba0 <TIM_OC2_SetConfig+0xe0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_OC2_SetConfig+0x68>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a20      	ldr	r2, [pc, #128]	; (8008ba4 <TIM_OC2_SetConfig+0xe4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d10d      	bne.n	8008b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <TIM_OC2_SetConfig+0xe0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d003      	beq.n	8008b54 <TIM_OC2_SetConfig+0x94>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <TIM_OC2_SetConfig+0xe4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d113      	bne.n	8008b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	621a      	str	r2, [r3, #32]
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bc80      	pop	{r7}
 8008b9e:	4770      	bx	lr
 8008ba0:	40012c00 	.word	0x40012c00
 8008ba4:	40013400 	.word	0x40013400

08008ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a21      	ldr	r2, [pc, #132]	; (8008c88 <TIM_OC3_SetConfig+0xe0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d003      	beq.n	8008c0e <TIM_OC3_SetConfig+0x66>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a20      	ldr	r2, [pc, #128]	; (8008c8c <TIM_OC3_SetConfig+0xe4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d10d      	bne.n	8008c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <TIM_OC3_SetConfig+0xe0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC3_SetConfig+0x92>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <TIM_OC3_SetConfig+0xe4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d113      	bne.n	8008c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	bf00      	nop
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40013400 	.word	0x40013400

08008c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	031b      	lsls	r3, r3, #12
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a11      	ldr	r2, [pc, #68]	; (8008d30 <TIM_OC4_SetConfig+0xa0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC4_SetConfig+0x68>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a10      	ldr	r2, [pc, #64]	; (8008d34 <TIM_OC4_SetConfig+0xa4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d109      	bne.n	8008d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	019b      	lsls	r3, r3, #6
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr
 8008d30:	40012c00 	.word	0x40012c00
 8008d34:	40013400 	.word	0x40013400

08008d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	401a      	ands	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a1a      	ldr	r2, [r3, #32]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f003 031f 	and.w	r3, r3, #31
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d70:	431a      	orrs	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bc80      	pop	{r7}
 8008d7e:	4770      	bx	lr

08008d80 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <HAL_TIMEx_PWMN_Start+0x24>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	e022      	b.n	8008dea <HAL_TIMEx_PWMN_Start+0x6a>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	d109      	bne.n	8008dbe <HAL_TIMEx_PWMN_Start+0x3e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	bf14      	ite	ne
 8008db6:	2301      	movne	r3, #1
 8008db8:	2300      	moveq	r3, #0
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	e015      	b.n	8008dea <HAL_TIMEx_PWMN_Start+0x6a>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d109      	bne.n	8008dd8 <HAL_TIMEx_PWMN_Start+0x58>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	bf14      	ite	ne
 8008dd0:	2301      	movne	r3, #1
 8008dd2:	2300      	moveq	r3, #0
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	e008      	b.n	8008dea <HAL_TIMEx_PWMN_Start+0x6a>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	bf14      	ite	ne
 8008de4:	2301      	movne	r3, #1
 8008de6:	2300      	moveq	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e063      	b.n	8008eba <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <HAL_TIMEx_PWMN_Start+0x82>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e00:	e013      	b.n	8008e2a <HAL_TIMEx_PWMN_Start+0xaa>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d104      	bne.n	8008e12 <HAL_TIMEx_PWMN_Start+0x92>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e10:	e00b      	b.n	8008e2a <HAL_TIMEx_PWMN_Start+0xaa>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d104      	bne.n	8008e22 <HAL_TIMEx_PWMN_Start+0xa2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e20:	e003      	b.n	8008e2a <HAL_TIMEx_PWMN_Start+0xaa>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2202      	movs	r2, #2
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f97d 	bl	8009132 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ec4 <HAL_TIMEx_PWMN_Start+0x144>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d018      	beq.n	8008e84 <HAL_TIMEx_PWMN_Start+0x104>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1c      	ldr	r2, [pc, #112]	; (8008ec8 <HAL_TIMEx_PWMN_Start+0x148>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d013      	beq.n	8008e84 <HAL_TIMEx_PWMN_Start+0x104>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e64:	d00e      	beq.n	8008e84 <HAL_TIMEx_PWMN_Start+0x104>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a18      	ldr	r2, [pc, #96]	; (8008ecc <HAL_TIMEx_PWMN_Start+0x14c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d009      	beq.n	8008e84 <HAL_TIMEx_PWMN_Start+0x104>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <HAL_TIMEx_PWMN_Start+0x150>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d004      	beq.n	8008e84 <HAL_TIMEx_PWMN_Start+0x104>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a15      	ldr	r2, [pc, #84]	; (8008ed4 <HAL_TIMEx_PWMN_Start+0x154>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d111      	bne.n	8008ea8 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b06      	cmp	r3, #6
 8008e94:	d010      	beq.n	8008eb8 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0201 	orr.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea6:	e007      	b.n	8008eb8 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40012c00 	.word	0x40012c00
 8008ec8:	40013400 	.word	0x40013400
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00

08008ed8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f921 	bl	8009132 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6a1a      	ldr	r2, [r3, #32]
 8008ef6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10f      	bne.n	8008f20 <HAL_TIMEx_PWMN_Stop+0x48>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	f240 4344 	movw	r3, #1092	; 0x444
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d107      	bne.n	8008f20 <HAL_TIMEx_PWMN_Stop+0x48>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10f      	bne.n	8008f50 <HAL_TIMEx_PWMN_Stop+0x78>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	f240 4344 	movw	r3, #1092	; 0x444
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d107      	bne.n	8008f50 <HAL_TIMEx_PWMN_Stop+0x78>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0201 	bic.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d104      	bne.n	8008f60 <HAL_TIMEx_PWMN_Stop+0x88>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f5e:	e013      	b.n	8008f88 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d104      	bne.n	8008f70 <HAL_TIMEx_PWMN_Stop+0x98>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f6e:	e00b      	b.n	8008f88 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d104      	bne.n	8008f80 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f7e:	e003      	b.n	8008f88 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	e050      	b.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a1b      	ldr	r2, [pc, #108]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d018      	beq.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a19      	ldr	r2, [pc, #100]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d013      	beq.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009002:	d00e      	beq.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a15      	ldr	r2, [pc, #84]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d009      	beq.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a14      	ldr	r2, [pc, #80]	; (8009064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d004      	beq.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a12      	ldr	r2, [pc, #72]	; (8009068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d10c      	bne.n	800903c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4313      	orrs	r3, r2
 8009032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	bc80      	pop	{r7}
 8009056:	4770      	bx	lr
 8009058:	40012c00 	.word	0x40012c00
 800905c:	40013400 	.word	0x40013400
 8009060:	40000400 	.word	0x40000400
 8009064:	40000800 	.word	0x40000800
 8009068:	40000c00 	.word	0x40000c00

0800906c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009084:	2302      	movs	r3, #2
 8009086:	e03d      	b.n	8009104 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr

0800910e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	bc80      	pop	{r7}
 800911e:	4770      	bx	lr

08009120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr

08009132 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009132:	b480      	push	{r7}
 8009134:	b087      	sub	sp, #28
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	2204      	movs	r2, #4
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a1a      	ldr	r2, [r3, #32]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	43db      	mvns	r3, r3
 8009154:	401a      	ands	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a1a      	ldr	r2, [r3, #32]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	431a      	orrs	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	621a      	str	r2, [r3, #32]
}
 8009170:	bf00      	nop
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr

0800917a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e03f      	b.n	800920c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7fc f8d1 	bl	8005348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2224      	movs	r2, #36	; 0x24
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fd64 	bl	8009c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691a      	ldr	r2, [r3, #16]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	695a      	ldr	r2, [r3, #20]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2220      	movs	r2, #32
 8009206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b20      	cmp	r3, #32
 800922c:	d153      	bne.n	80092d6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <HAL_UART_Transmit_DMA+0x26>
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e04c      	b.n	80092d8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_UART_Transmit_DMA+0x38>
 8009248:	2302      	movs	r3, #2
 800924a:	e045      	b.n	80092d8 <HAL_UART_Transmit_DMA+0xc4>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	88fa      	ldrh	r2, [r7, #6]
 800925e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	88fa      	ldrh	r2, [r7, #6]
 8009264:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2221      	movs	r2, #33	; 0x21
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	4a19      	ldr	r2, [pc, #100]	; (80092e0 <HAL_UART_Transmit_DMA+0xcc>)
 800927a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	4a18      	ldr	r2, [pc, #96]	; (80092e4 <HAL_UART_Transmit_DMA+0xd0>)
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <HAL_UART_Transmit_DMA+0xd4>)
 800928a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009290:	2200      	movs	r2, #0
 8009292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009294:	f107 0308 	add.w	r3, r7, #8
 8009298:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	6819      	ldr	r1, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3304      	adds	r3, #4
 80092a8:	461a      	mov	r2, r3
 80092aa:	88fb      	ldrh	r3, [r7, #6]
 80092ac:	f7fd fbcc 	bl	8006a48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695a      	ldr	r2, [r3, #20]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092d0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e000      	b.n	80092d8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80092d6:	2302      	movs	r3, #2
  }
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	08009729 	.word	0x08009729
 80092e4:	0800977b 	.word	0x0800977b
 80092e8:	08009863 	.word	0x08009863

080092ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b20      	cmp	r3, #32
 8009304:	d13c      	bne.n	8009380 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e035      	b.n	8009382 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009320:	2302      	movs	r3, #2
 8009322:	e02e      	b.n	8009382 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2201      	movs	r2, #1
 8009330:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	461a      	mov	r2, r3
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fadd 	bl	80098f8 <UART_Start_Receive_DMA>
 800933e:	4603      	mov	r3, r0
 8009340:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d119      	bne.n	800937c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	2b01      	cmp	r3, #1
 800934e:	d113      	bne.n	8009378 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0210 	orr.w	r2, r2, #16
 8009374:	60da      	str	r2, [r3, #12]
 8009376:	e001      	b.n	800937c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	e000      	b.n	8009382 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	; 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10d      	bne.n	80093de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d008      	beq.n	80093de <HAL_UART_IRQHandler+0x52>
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	f003 0320 	and.w	r3, r3, #32
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fbae 	bl	8009b38 <UART_Receive_IT>
      return;
 80093dc:	e17b      	b.n	80096d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 80b1 	beq.w	8009548 <HAL_UART_IRQHandler+0x1bc>
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d105      	bne.n	80093fc <HAL_UART_IRQHandler+0x70>
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80a6 	beq.w	8009548 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <HAL_UART_IRQHandler+0x90>
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	f043 0201 	orr.w	r2, r3, #1
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <HAL_UART_IRQHandler+0xb0>
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009434:	f043 0202 	orr.w	r2, r3, #2
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <HAL_UART_IRQHandler+0xd0>
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	f043 0204 	orr.w	r2, r3, #4
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00f      	beq.n	8009486 <HAL_UART_IRQHandler+0xfa>
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d104      	bne.n	800947a <HAL_UART_IRQHandler+0xee>
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	f043 0208 	orr.w	r2, r3, #8
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 811e 	beq.w	80096cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_UART_IRQHandler+0x11e>
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb47 	bl	8009b38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <HAL_UART_IRQHandler+0x146>
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d031      	beq.n	8009536 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa89 	bl	80099ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d023      	beq.n	800952e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695a      	ldr	r2, [r3, #20]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d013      	beq.n	8009526 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	4a76      	ldr	r2, [pc, #472]	; (80096dc <HAL_UART_IRQHandler+0x350>)
 8009504:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd fb36 	bl	8006b7c <HAL_DMA_Abort_IT>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d016      	beq.n	8009544 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009524:	e00e      	b.n	8009544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f8f5 	bl	8009716 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952c:	e00a      	b.n	8009544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f8f1 	bl	8009716 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009534:	e006      	b.n	8009544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f8ed 	bl	8009716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009542:	e0c3      	b.n	80096cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009544:	bf00      	nop
    return;
 8009546:	e0c1      	b.n	80096cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954c:	2b01      	cmp	r3, #1
 800954e:	f040 80a1 	bne.w	8009694 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 809b 	beq.w	8009694 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8095 	beq.w	8009694 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958a:	2b00      	cmp	r3, #0
 800958c:	d04e      	beq.n	800962c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009598:	8a3b      	ldrh	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 8098 	beq.w	80096d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095a4:	8a3a      	ldrh	r2, [r7, #16]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	f080 8092 	bcs.w	80096d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8a3a      	ldrh	r2, [r7, #16]
 80095b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d02b      	beq.n	8009614 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0201 	bic.w	r2, r2, #1
 80095da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	695a      	ldr	r2, [r3, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0210 	bic.w	r2, r2, #16
 8009608:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	4618      	mov	r0, r3
 8009610:	f7fd fa79 	bl	8006b06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800961c:	b29b      	uxth	r3, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	b29b      	uxth	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7f8 ff13 	bl	8002450 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800962a:	e051      	b.n	80096d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009634:	b29b      	uxth	r3, r3
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d047      	beq.n	80096d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009644:	8a7b      	ldrh	r3, [r7, #18]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d044      	beq.n	80096d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009658:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	695a      	ldr	r2, [r3, #20]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 0210 	bic.w	r2, r2, #16
 8009686:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009688:	8a7b      	ldrh	r3, [r7, #18]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7f8 fedf 	bl	8002450 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009692:	e01f      	b.n	80096d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d008      	beq.n	80096b0 <HAL_UART_IRQHandler+0x324>
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f9de 	bl	8009a6a <UART_Transmit_IT>
    return;
 80096ae:	e012      	b.n	80096d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00d      	beq.n	80096d6 <HAL_UART_IRQHandler+0x34a>
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa1f 	bl	8009b08 <UART_EndTransmit_IT>
    return;
 80096ca:	e004      	b.n	80096d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80096cc:	bf00      	nop
 80096ce:	e002      	b.n	80096d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80096d0:	bf00      	nop
 80096d2:	e000      	b.n	80096d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80096d4:	bf00      	nop
  }
}
 80096d6:	3728      	adds	r7, #40	; 0x28
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	08009a43 	.word	0x08009a43

080096e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr

080096f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b083      	sub	sp, #12
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80096fa:	bf00      	nop
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	bc80      	pop	{r7}
 8009714:	4770      	bx	lr

08009716 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr

08009728 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d113      	bne.n	800976c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695a      	ldr	r2, [r3, #20]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009758:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009768:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800976a:	e002      	b.n	8009772 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7f8 fe5b 	bl	8002428 <HAL_UART_TxCpltCallback>
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f7ff ffa9 	bl	80096e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d12a      	bne.n	8009808 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097c6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	695a      	ldr	r2, [r3, #20]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0201 	bic.w	r2, r2, #1
 80097d6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695a      	ldr	r2, [r3, #20]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097e6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2220      	movs	r2, #32
 80097ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d107      	bne.n	8009808 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0210 	bic.w	r2, r2, #16
 8009806:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	2b01      	cmp	r3, #1
 800980e:	d106      	bne.n	800981e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009814:	4619      	mov	r1, r3
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7f8 fe1a 	bl	8002450 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800981c:	e002      	b.n	8009824 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff ff67 	bl	80096f2 <HAL_UART_RxCpltCallback>
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	2b01      	cmp	r3, #1
 8009840:	d108      	bne.n	8009854 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	b29b      	uxth	r3, r3
 800984a:	4619      	mov	r1, r3
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7f8 fdff 	bl	8002450 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009852:	e002      	b.n	800985a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff ff55 	bl	8009704 <HAL_UART_RxHalfCpltCallback>
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987e:	2b00      	cmp	r3, #0
 8009880:	bf14      	ite	ne
 8009882:	2301      	movne	r3, #1
 8009884:	2300      	moveq	r3, #0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b21      	cmp	r3, #33	; 0x21
 8009894:	d108      	bne.n	80098a8 <UART_DMAError+0x46>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80098a2:	68b8      	ldr	r0, [r7, #8]
 80098a4:	f000 f88c 	bl	80099c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bf14      	ite	ne
 80098b6:	2301      	movne	r3, #1
 80098b8:	2300      	moveq	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b22      	cmp	r3, #34	; 0x22
 80098c8:	d108      	bne.n	80098dc <UART_DMAError+0x7a>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2200      	movs	r2, #0
 80098d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80098d6:	68b8      	ldr	r0, [r7, #8]
 80098d8:	f000 f887 	bl	80099ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	f043 0210 	orr.w	r2, r3, #16
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098e8:	68b8      	ldr	r0, [r7, #8]
 80098ea:	f7ff ff14 	bl	8009716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2222      	movs	r2, #34	; 0x22
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	4a23      	ldr	r2, [pc, #140]	; (80099b4 <UART_Start_Receive_DMA+0xbc>)
 8009926:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	4a22      	ldr	r2, [pc, #136]	; (80099b8 <UART_Start_Receive_DMA+0xc0>)
 800992e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	4a21      	ldr	r2, [pc, #132]	; (80099bc <UART_Start_Receive_DMA+0xc4>)
 8009936:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	2200      	movs	r2, #0
 800993e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009940:	f107 0308 	add.w	r3, r7, #8
 8009944:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3304      	adds	r3, #4
 8009950:	4619      	mov	r1, r3
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	f7fd f876 	bl	8006a48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009988:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	695a      	ldr	r2, [r3, #20]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0201 	orr.w	r2, r2, #1
 8009998:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695a      	ldr	r2, [r3, #20]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	08009797 	.word	0x08009797
 80099b8:	0800982d 	.word	0x0800982d
 80099bc:	08009863 	.word	0x08009863

080099c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80099d6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr

080099ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a00:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	695a      	ldr	r2, [r3, #20]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d107      	bne.n	8009a2a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0210 	bic.w	r2, r2, #16
 8009a28:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bc80      	pop	{r7}
 8009a40:	4770      	bx	lr

08009a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff fe5a 	bl	8009716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b21      	cmp	r3, #33	; 0x21
 8009a7c:	d13e      	bne.n	8009afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a86:	d114      	bne.n	8009ab2 <UART_Transmit_IT+0x48>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d110      	bne.n	8009ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	1c9a      	adds	r2, r3, #2
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	621a      	str	r2, [r3, #32]
 8009ab0:	e008      	b.n	8009ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6211      	str	r1, [r2, #32]
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10f      	bne.n	8009af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	e000      	b.n	8009afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009afc:	2302      	movs	r3, #2
  }
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bc80      	pop	{r7}
 8009b06:	4770      	bx	lr

08009b08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7f8 fc7d 	bl	8002428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b22      	cmp	r3, #34	; 0x22
 8009b4a:	f040 8099 	bne.w	8009c80 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b56:	d117      	bne.n	8009b88 <UART_Receive_IT+0x50>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d113      	bne.n	8009b88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	629a      	str	r2, [r3, #40]	; 0x28
 8009b86:	e026      	b.n	8009bd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9a:	d007      	beq.n	8009bac <UART_Receive_IT+0x74>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10a      	bne.n	8009bba <UART_Receive_IT+0x82>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	e008      	b.n	8009bcc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	4619      	mov	r1, r3
 8009be4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d148      	bne.n	8009c7c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0220 	bic.w	r2, r2, #32
 8009bf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	695a      	ldr	r2, [r3, #20]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0201 	bic.w	r2, r2, #1
 8009c18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d123      	bne.n	8009c72 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0210 	bic.w	r2, r2, #16
 8009c3e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0310 	and.w	r3, r3, #16
 8009c4a:	2b10      	cmp	r3, #16
 8009c4c:	d10a      	bne.n	8009c64 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7f8 fbf0 	bl	8002450 <HAL_UARTEx_RxEventCallback>
 8009c70:	e002      	b.n	8009c78 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fd3d 	bl	80096f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e002      	b.n	8009c82 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e000      	b.n	8009c82 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009c80:	2302      	movs	r3, #2
  }
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009cc6:	f023 030c 	bic.w	r3, r3, #12
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a2c      	ldr	r2, [pc, #176]	; (8009da0 <UART_SetConfig+0x114>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d103      	bne.n	8009cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009cf4:	f7fe f87a 	bl	8007dec <HAL_RCC_GetPCLK2Freq>
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	e002      	b.n	8009d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009cfc:	f7fe f862 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8009d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009a      	lsls	r2, r3, #2
 8009d0c:	441a      	add	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d18:	4a22      	ldr	r2, [pc, #136]	; (8009da4 <UART_SetConfig+0x118>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	095b      	lsrs	r3, r3, #5
 8009d20:	0119      	lsls	r1, r3, #4
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	009a      	lsls	r2, r3, #2
 8009d2c:	441a      	add	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d38:	4b1a      	ldr	r3, [pc, #104]	; (8009da4 <UART_SetConfig+0x118>)
 8009d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8009d3e:	095b      	lsrs	r3, r3, #5
 8009d40:	2064      	movs	r0, #100	; 0x64
 8009d42:	fb00 f303 	mul.w	r3, r0, r3
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	3332      	adds	r3, #50	; 0x32
 8009d4c:	4a15      	ldr	r2, [pc, #84]	; (8009da4 <UART_SetConfig+0x118>)
 8009d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d58:	4419      	add	r1, r3
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	009a      	lsls	r2, r3, #2
 8009d64:	441a      	add	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d70:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <UART_SetConfig+0x118>)
 8009d72:	fba3 0302 	umull	r0, r3, r3, r2
 8009d76:	095b      	lsrs	r3, r3, #5
 8009d78:	2064      	movs	r0, #100	; 0x64
 8009d7a:	fb00 f303 	mul.w	r3, r0, r3
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	3332      	adds	r3, #50	; 0x32
 8009d84:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <UART_SetConfig+0x118>)
 8009d86:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	440a      	add	r2, r1
 8009d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009d98:	bf00      	nop
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	40013800 	.word	0x40013800
 8009da4:	51eb851f 	.word	0x51eb851f

08009da8 <__cxa_pure_virtual>:
 8009da8:	b508      	push	{r3, lr}
 8009daa:	f000 f80d 	bl	8009dc8 <_ZSt9terminatev>

08009dae <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009dae:	b508      	push	{r3, lr}
 8009db0:	4780      	blx	r0
 8009db2:	f001 f93b 	bl	800b02c <abort>
	...

08009db8 <_ZSt13get_terminatev>:
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <_ZSt13get_terminatev+0xc>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	f3bf 8f5b 	dmb	ish
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	2000000c 	.word	0x2000000c

08009dc8 <_ZSt9terminatev>:
 8009dc8:	b508      	push	{r3, lr}
 8009dca:	f7ff fff5 	bl	8009db8 <_ZSt13get_terminatev>
 8009dce:	f7ff ffee 	bl	8009dae <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009dd4 <log1pf>:
 8009dd4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ddc:	4604      	mov	r4, r0
 8009dde:	4605      	mov	r5, r0
 8009de0:	db06      	blt.n	8009df0 <log1pf+0x1c>
 8009de2:	4601      	mov	r1, r0
 8009de4:	f7f6 feba 	bl	8000b5c <__addsf3>
 8009de8:	4604      	mov	r4, r0
 8009dea:	4620      	mov	r0, r4
 8009dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df0:	4b8b      	ldr	r3, [pc, #556]	; (800a020 <log1pf+0x24c>)
 8009df2:	4298      	cmp	r0, r3
 8009df4:	dc7d      	bgt.n	8009ef2 <log1pf+0x11e>
 8009df6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009dfa:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8009dfe:	db0d      	blt.n	8009e1c <log1pf+0x48>
 8009e00:	4988      	ldr	r1, [pc, #544]	; (800a024 <log1pf+0x250>)
 8009e02:	f7f7 f947 	bl	8001094 <__aeabi_fcmpeq>
 8009e06:	b120      	cbz	r0, 8009e12 <log1pf+0x3e>
 8009e08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f000 bfc5 	b.w	800ad9c <__math_divzerof>
 8009e12:	4620      	mov	r0, r4
 8009e14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	f000 bfd0 	b.w	800adbc <__math_invalidf>
 8009e1c:	f1b6 5f44 	cmp.w	r6, #822083584	; 0x31000000
 8009e20:	da14      	bge.n	8009e4c <log1pf+0x78>
 8009e22:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009e26:	f7f6 fe99 	bl	8000b5c <__addsf3>
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	f7f7 f95a 	bl	80010e4 <__aeabi_fcmpgt>
 8009e30:	b110      	cbz	r0, 8009e38 <log1pf+0x64>
 8009e32:	f1b6 5f12 	cmp.w	r6, #612368384	; 0x24800000
 8009e36:	dbd8      	blt.n	8009dea <log1pf+0x16>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7f6 ff96 	bl	8000d6c <__aeabi_fmul>
 8009e40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e44:	f7f6 ff92 	bl	8000d6c <__aeabi_fmul>
 8009e48:	4601      	mov	r1, r0
 8009e4a:	e072      	b.n	8009f32 <log1pf+0x15e>
 8009e4c:	4b76      	ldr	r3, [pc, #472]	; (800a028 <log1pf+0x254>)
 8009e4e:	441d      	add	r5, r3
 8009e50:	429d      	cmp	r5, r3
 8009e52:	d85c      	bhi.n	8009f0e <log1pf+0x13a>
 8009e54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7f6 fe7f 	bl	8000b5c <__addsf3>
 8009e5e:	15c6      	asrs	r6, r0, #23
 8009e60:	3e7f      	subs	r6, #127	; 0x7f
 8009e62:	2e00      	cmp	r6, #0
 8009e64:	4607      	mov	r7, r0
 8009e66:	4605      	mov	r5, r0
 8009e68:	dd4a      	ble.n	8009f00 <log1pf+0x12c>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	f7f6 fe74 	bl	8000b58 <__aeabi_fsub>
 8009e70:	4601      	mov	r1, r0
 8009e72:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009e76:	f7f6 fe6f 	bl	8000b58 <__aeabi_fsub>
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f7 f82a 	bl	8000ed4 <__aeabi_fdiv>
 8009e80:	4607      	mov	r7, r0
 8009e82:	4b6a      	ldr	r3, [pc, #424]	; (800a02c <log1pf+0x258>)
 8009e84:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009e88:	429d      	cmp	r5, r3
 8009e8a:	bfc8      	it	gt
 8009e8c:	f045 507c 	orrgt.w	r0, r5, #1056964608	; 0x3f000000
 8009e90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e94:	bfc9      	itett	gt
 8009e96:	f5c5 0500 	rsbgt	r5, r5, #8388608	; 0x800000
 8009e9a:	f045 507e 	orrle.w	r0, r5, #1065353216	; 0x3f800000
 8009e9e:	3601      	addgt	r6, #1
 8009ea0:	10ad      	asrgt	r5, r5, #2
 8009ea2:	f7f6 fe59 	bl	8000b58 <__aeabi_fsub>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009eac:	4620      	mov	r0, r4
 8009eae:	f7f6 ff5d 	bl	8000d6c <__aeabi_fmul>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f7f6 ff5a 	bl	8000d6c <__aeabi_fmul>
 8009eb8:	4680      	mov	r8, r0
 8009eba:	2d00      	cmp	r5, #0
 8009ebc:	d156      	bne.n	8009f6c <log1pf+0x198>
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7f7 f8e7 	bl	8001094 <__aeabi_fcmpeq>
 8009ec6:	b328      	cbz	r0, 8009f14 <log1pf+0x140>
 8009ec8:	2e00      	cmp	r6, #0
 8009eca:	f000 80a6 	beq.w	800a01a <log1pf+0x246>
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f7f6 fef8 	bl	8000cc4 <__aeabi_i2f>
 8009ed4:	4956      	ldr	r1, [pc, #344]	; (800a030 <log1pf+0x25c>)
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	f7f6 ff48 	bl	8000d6c <__aeabi_fmul>
 8009edc:	4639      	mov	r1, r7
 8009ede:	f7f6 fe3d 	bl	8000b5c <__addsf3>
 8009ee2:	4954      	ldr	r1, [pc, #336]	; (800a034 <log1pf+0x260>)
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f7f6 ff40 	bl	8000d6c <__aeabi_fmul>
 8009eec:	4601      	mov	r1, r0
 8009eee:	4620      	mov	r0, r4
 8009ef0:	e778      	b.n	8009de4 <log1pf+0x10>
 8009ef2:	f1b0 4fb4 	cmp.w	r0, #1509949440	; 0x5a000000
 8009ef6:	dbad      	blt.n	8009e54 <log1pf+0x80>
 8009ef8:	15c6      	asrs	r6, r0, #23
 8009efa:	2700      	movs	r7, #0
 8009efc:	3e7f      	subs	r6, #127	; 0x7f
 8009efe:	e7c0      	b.n	8009e82 <log1pf+0xae>
 8009f00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f04:	f7f6 fe28 	bl	8000b58 <__aeabi_fsub>
 8009f08:	4601      	mov	r1, r0
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	e7b3      	b.n	8009e76 <log1pf+0xa2>
 8009f0e:	2501      	movs	r5, #1
 8009f10:	2600      	movs	r6, #0
 8009f12:	e7c9      	b.n	8009ea8 <log1pf+0xd4>
 8009f14:	4948      	ldr	r1, [pc, #288]	; (800a038 <log1pf+0x264>)
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7f6 ff28 	bl	8000d6c <__aeabi_fmul>
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009f22:	f7f6 fe19 	bl	8000b58 <__aeabi_fsub>
 8009f26:	4641      	mov	r1, r8
 8009f28:	f7f6 ff20 	bl	8000d6c <__aeabi_fmul>
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	b926      	cbnz	r6, 8009f3a <log1pf+0x166>
 8009f30:	4601      	mov	r1, r0
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7f6 fe10 	bl	8000b58 <__aeabi_fsub>
 8009f38:	e756      	b.n	8009de8 <log1pf+0x14>
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7f6 fec2 	bl	8000cc4 <__aeabi_i2f>
 8009f40:	493c      	ldr	r1, [pc, #240]	; (800a034 <log1pf+0x260>)
 8009f42:	4680      	mov	r8, r0
 8009f44:	f7f6 ff12 	bl	8000d6c <__aeabi_fmul>
 8009f48:	4939      	ldr	r1, [pc, #228]	; (800a030 <log1pf+0x25c>)
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	f7f6 ff0d 	bl	8000d6c <__aeabi_fmul>
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fe02 	bl	8000b5c <__addsf3>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f7f6 fdfc 	bl	8000b58 <__aeabi_fsub>
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7f6 fdf9 	bl	8000b58 <__aeabi_fsub>
 8009f66:	4601      	mov	r1, r0
 8009f68:	4630      	mov	r0, r6
 8009f6a:	e7e3      	b.n	8009f34 <log1pf+0x160>
 8009f6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7f6 fdf3 	bl	8000b5c <__addsf3>
 8009f76:	4601      	mov	r1, r0
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7f6 ffab 	bl	8000ed4 <__aeabi_fdiv>
 8009f7e:	4601      	mov	r1, r0
 8009f80:	4681      	mov	r9, r0
 8009f82:	f7f6 fef3 	bl	8000d6c <__aeabi_fmul>
 8009f86:	4605      	mov	r5, r0
 8009f88:	492c      	ldr	r1, [pc, #176]	; (800a03c <log1pf+0x268>)
 8009f8a:	f7f6 feef 	bl	8000d6c <__aeabi_fmul>
 8009f8e:	492c      	ldr	r1, [pc, #176]	; (800a040 <log1pf+0x26c>)
 8009f90:	f7f6 fde4 	bl	8000b5c <__addsf3>
 8009f94:	4629      	mov	r1, r5
 8009f96:	f7f6 fee9 	bl	8000d6c <__aeabi_fmul>
 8009f9a:	492a      	ldr	r1, [pc, #168]	; (800a044 <log1pf+0x270>)
 8009f9c:	f7f6 fdde 	bl	8000b5c <__addsf3>
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 fee3 	bl	8000d6c <__aeabi_fmul>
 8009fa6:	4928      	ldr	r1, [pc, #160]	; (800a048 <log1pf+0x274>)
 8009fa8:	f7f6 fdd8 	bl	8000b5c <__addsf3>
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 fedd 	bl	8000d6c <__aeabi_fmul>
 8009fb2:	4926      	ldr	r1, [pc, #152]	; (800a04c <log1pf+0x278>)
 8009fb4:	f7f6 fdd2 	bl	8000b5c <__addsf3>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 fed7 	bl	8000d6c <__aeabi_fmul>
 8009fbe:	4924      	ldr	r1, [pc, #144]	; (800a050 <log1pf+0x27c>)
 8009fc0:	f7f6 fdcc 	bl	8000b5c <__addsf3>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f7f6 fed1 	bl	8000d6c <__aeabi_fmul>
 8009fca:	491b      	ldr	r1, [pc, #108]	; (800a038 <log1pf+0x264>)
 8009fcc:	f7f6 fdc6 	bl	8000b5c <__addsf3>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7f6 fecb 	bl	8000d6c <__aeabi_fmul>
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	f7f6 fdc0 	bl	8000b5c <__addsf3>
 8009fdc:	4649      	mov	r1, r9
 8009fde:	f7f6 fec5 	bl	8000d6c <__aeabi_fmul>
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	b926      	cbnz	r6, 8009ff0 <log1pf+0x21c>
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	4640      	mov	r0, r8
 8009fea:	f7f6 fdb5 	bl	8000b58 <__aeabi_fsub>
 8009fee:	e72b      	b.n	8009e48 <log1pf+0x74>
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7f6 fe67 	bl	8000cc4 <__aeabi_i2f>
 8009ff6:	490f      	ldr	r1, [pc, #60]	; (800a034 <log1pf+0x260>)
 8009ff8:	4681      	mov	r9, r0
 8009ffa:	f7f6 feb7 	bl	8000d6c <__aeabi_fmul>
 8009ffe:	490c      	ldr	r1, [pc, #48]	; (800a030 <log1pf+0x25c>)
 800a000:	4606      	mov	r6, r0
 800a002:	4648      	mov	r0, r9
 800a004:	f7f6 feb2 	bl	8000d6c <__aeabi_fmul>
 800a008:	4639      	mov	r1, r7
 800a00a:	f7f6 fda7 	bl	8000b5c <__addsf3>
 800a00e:	4629      	mov	r1, r5
 800a010:	f7f6 fda4 	bl	8000b5c <__addsf3>
 800a014:	4601      	mov	r1, r0
 800a016:	4640      	mov	r0, r8
 800a018:	e7a0      	b.n	8009f5c <log1pf+0x188>
 800a01a:	2400      	movs	r4, #0
 800a01c:	e6e5      	b.n	8009dea <log1pf+0x16>
 800a01e:	bf00      	nop
 800a020:	3ed413d6 	.word	0x3ed413d6
 800a024:	bf800000 	.word	0xbf800000
 800a028:	416a09e0 	.word	0x416a09e0
 800a02c:	003504f6 	.word	0x003504f6
 800a030:	3717f7d1 	.word	0x3717f7d1
 800a034:	3f317180 	.word	0x3f317180
 800a038:	3f2aaaab 	.word	0x3f2aaaab
 800a03c:	3e178897 	.word	0x3e178897
 800a040:	3e1cd04f 	.word	0x3e1cd04f
 800a044:	3e3a3325 	.word	0x3e3a3325
 800a048:	3e638e29 	.word	0x3e638e29
 800a04c:	3e924925 	.word	0x3e924925
 800a050:	3ecccccd 	.word	0x3ecccccd

0800a054 <pow>:
 800a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a058:	461f      	mov	r7, r3
 800a05a:	4680      	mov	r8, r0
 800a05c:	4689      	mov	r9, r1
 800a05e:	4616      	mov	r6, r2
 800a060:	f000 f8d2 	bl	800a208 <__ieee754_pow>
 800a064:	4b4d      	ldr	r3, [pc, #308]	; (800a19c <pow+0x148>)
 800a066:	4604      	mov	r4, r0
 800a068:	f993 3000 	ldrsb.w	r3, [r3]
 800a06c:	460d      	mov	r5, r1
 800a06e:	3301      	adds	r3, #1
 800a070:	d015      	beq.n	800a09e <pow+0x4a>
 800a072:	4632      	mov	r2, r6
 800a074:	463b      	mov	r3, r7
 800a076:	4630      	mov	r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	f7f6 fd2b 	bl	8000ad4 <__aeabi_dcmpun>
 800a07e:	b970      	cbnz	r0, 800a09e <pow+0x4a>
 800a080:	4642      	mov	r2, r8
 800a082:	464b      	mov	r3, r9
 800a084:	4640      	mov	r0, r8
 800a086:	4649      	mov	r1, r9
 800a088:	f7f6 fd24 	bl	8000ad4 <__aeabi_dcmpun>
 800a08c:	2200      	movs	r2, #0
 800a08e:	2300      	movs	r3, #0
 800a090:	b148      	cbz	r0, 800a0a6 <pow+0x52>
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	f7f6 fceb 	bl	8000a70 <__aeabi_dcmpeq>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d17b      	bne.n	800a196 <pow+0x142>
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	f7f6 fce1 	bl	8000a70 <__aeabi_dcmpeq>
 800a0ae:	b1e0      	cbz	r0, 800a0ea <pow+0x96>
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7f6 fcda 	bl	8000a70 <__aeabi_dcmpeq>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d16a      	bne.n	800a196 <pow+0x142>
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f000 fe93 	bl	800adee <finite>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0e8      	beq.n	800a09e <pow+0x4a>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	f7f6 fcd6 	bl	8000a84 <__aeabi_dcmplt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d0e0      	beq.n	800a09e <pow+0x4a>
 800a0dc:	f000 ffae 	bl	800b03c <__errno>
 800a0e0:	2321      	movs	r3, #33	; 0x21
 800a0e2:	2400      	movs	r4, #0
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	4d2e      	ldr	r5, [pc, #184]	; (800a1a0 <pow+0x14c>)
 800a0e8:	e7d9      	b.n	800a09e <pow+0x4a>
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f000 fe7e 	bl	800adee <finite>
 800a0f2:	bba8      	cbnz	r0, 800a160 <pow+0x10c>
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	f000 fe79 	bl	800adee <finite>
 800a0fc:	b380      	cbz	r0, 800a160 <pow+0x10c>
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	f000 fe74 	bl	800adee <finite>
 800a106:	b358      	cbz	r0, 800a160 <pow+0x10c>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	4620      	mov	r0, r4
 800a10e:	4629      	mov	r1, r5
 800a110:	f7f6 fce0 	bl	8000ad4 <__aeabi_dcmpun>
 800a114:	b160      	cbz	r0, 800a130 <pow+0xdc>
 800a116:	f000 ff91 	bl	800b03c <__errno>
 800a11a:	2321      	movs	r3, #33	; 0x21
 800a11c:	2200      	movs	r2, #0
 800a11e:	6003      	str	r3, [r0, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	4610      	mov	r0, r2
 800a124:	4619      	mov	r1, r3
 800a126:	f7f6 fb65 	bl	80007f4 <__aeabi_ddiv>
 800a12a:	4604      	mov	r4, r0
 800a12c:	460d      	mov	r5, r1
 800a12e:	e7b6      	b.n	800a09e <pow+0x4a>
 800a130:	f000 ff84 	bl	800b03c <__errno>
 800a134:	2322      	movs	r3, #34	; 0x22
 800a136:	2200      	movs	r2, #0
 800a138:	6003      	str	r3, [r0, #0]
 800a13a:	4649      	mov	r1, r9
 800a13c:	2300      	movs	r3, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	f7f6 fca0 	bl	8000a84 <__aeabi_dcmplt>
 800a144:	2400      	movs	r4, #0
 800a146:	b148      	cbz	r0, 800a15c <pow+0x108>
 800a148:	4630      	mov	r0, r6
 800a14a:	4639      	mov	r1, r7
 800a14c:	f000 fe5c 	bl	800ae08 <rint>
 800a150:	4632      	mov	r2, r6
 800a152:	463b      	mov	r3, r7
 800a154:	f7f6 fc8c 	bl	8000a70 <__aeabi_dcmpeq>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0c4      	beq.n	800a0e6 <pow+0x92>
 800a15c:	4d11      	ldr	r5, [pc, #68]	; (800a1a4 <pow+0x150>)
 800a15e:	e79e      	b.n	800a09e <pow+0x4a>
 800a160:	2200      	movs	r2, #0
 800a162:	2300      	movs	r3, #0
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 fc82 	bl	8000a70 <__aeabi_dcmpeq>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d096      	beq.n	800a09e <pow+0x4a>
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f000 fe3b 	bl	800adee <finite>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d090      	beq.n	800a09e <pow+0x4a>
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f000 fe35 	bl	800adee <finite>
 800a184:	2800      	cmp	r0, #0
 800a186:	d08a      	beq.n	800a09e <pow+0x4a>
 800a188:	f000 ff58 	bl	800b03c <__errno>
 800a18c:	2322      	movs	r3, #34	; 0x22
 800a18e:	2400      	movs	r4, #0
 800a190:	2500      	movs	r5, #0
 800a192:	6003      	str	r3, [r0, #0]
 800a194:	e783      	b.n	800a09e <pow+0x4a>
 800a196:	2400      	movs	r4, #0
 800a198:	4d03      	ldr	r5, [pc, #12]	; (800a1a8 <pow+0x154>)
 800a19a:	e780      	b.n	800a09e <pow+0x4a>
 800a19c:	20000010 	.word	0x20000010
 800a1a0:	fff00000 	.word	0xfff00000
 800a1a4:	7ff00000 	.word	0x7ff00000
 800a1a8:	3ff00000 	.word	0x3ff00000

0800a1ac <sqrt>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460f      	mov	r7, r1
 800a1b2:	f000 fd3f 	bl	800ac34 <__ieee754_sqrt>
 800a1b6:	4b12      	ldr	r3, [pc, #72]	; (800a200 <sqrt+0x54>)
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	f993 3000 	ldrsb.w	r3, [r3]
 800a1be:	460d      	mov	r5, r1
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	d019      	beq.n	800a1f8 <sqrt+0x4c>
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 fc82 	bl	8000ad4 <__aeabi_dcmpun>
 800a1d0:	b990      	cbnz	r0, 800a1f8 <sqrt+0x4c>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	f7f6 fc53 	bl	8000a84 <__aeabi_dcmplt>
 800a1de:	b158      	cbz	r0, 800a1f8 <sqrt+0x4c>
 800a1e0:	f000 ff2c 	bl	800b03c <__errno>
 800a1e4:	2321      	movs	r3, #33	; 0x21
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	6003      	str	r3, [r0, #0]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f7f6 fb00 	bl	80007f4 <__aeabi_ddiv>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000010 	.word	0x20000010
 800a204:	00000000 	.word	0x00000000

0800a208 <__ieee754_pow>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	b093      	sub	sp, #76	; 0x4c
 800a20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a212:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a216:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a21a:	ea55 0302 	orrs.w	r3, r5, r2
 800a21e:	4607      	mov	r7, r0
 800a220:	4688      	mov	r8, r1
 800a222:	f000 84bf 	beq.w	800aba4 <__ieee754_pow+0x99c>
 800a226:	4b7e      	ldr	r3, [pc, #504]	; (800a420 <__ieee754_pow+0x218>)
 800a228:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a22c:	429c      	cmp	r4, r3
 800a22e:	4689      	mov	r9, r1
 800a230:	4682      	mov	sl, r0
 800a232:	dc09      	bgt.n	800a248 <__ieee754_pow+0x40>
 800a234:	d103      	bne.n	800a23e <__ieee754_pow+0x36>
 800a236:	b978      	cbnz	r0, 800a258 <__ieee754_pow+0x50>
 800a238:	42a5      	cmp	r5, r4
 800a23a:	dd02      	ble.n	800a242 <__ieee754_pow+0x3a>
 800a23c:	e00c      	b.n	800a258 <__ieee754_pow+0x50>
 800a23e:	429d      	cmp	r5, r3
 800a240:	dc02      	bgt.n	800a248 <__ieee754_pow+0x40>
 800a242:	429d      	cmp	r5, r3
 800a244:	d10e      	bne.n	800a264 <__ieee754_pow+0x5c>
 800a246:	b16a      	cbz	r2, 800a264 <__ieee754_pow+0x5c>
 800a248:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a24c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a250:	ea54 030a 	orrs.w	r3, r4, sl
 800a254:	f000 84a6 	beq.w	800aba4 <__ieee754_pow+0x99c>
 800a258:	4872      	ldr	r0, [pc, #456]	; (800a424 <__ieee754_pow+0x21c>)
 800a25a:	b013      	add	sp, #76	; 0x4c
 800a25c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	f000 bdcc 	b.w	800adfc <nan>
 800a264:	f1b9 0f00 	cmp.w	r9, #0
 800a268:	da39      	bge.n	800a2de <__ieee754_pow+0xd6>
 800a26a:	4b6f      	ldr	r3, [pc, #444]	; (800a428 <__ieee754_pow+0x220>)
 800a26c:	429d      	cmp	r5, r3
 800a26e:	dc54      	bgt.n	800a31a <__ieee754_pow+0x112>
 800a270:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a274:	429d      	cmp	r5, r3
 800a276:	f340 84a6 	ble.w	800abc6 <__ieee754_pow+0x9be>
 800a27a:	152b      	asrs	r3, r5, #20
 800a27c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a280:	2b14      	cmp	r3, #20
 800a282:	dd0f      	ble.n	800a2a4 <__ieee754_pow+0x9c>
 800a284:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a288:	fa22 f103 	lsr.w	r1, r2, r3
 800a28c:	fa01 f303 	lsl.w	r3, r1, r3
 800a290:	4293      	cmp	r3, r2
 800a292:	f040 8498 	bne.w	800abc6 <__ieee754_pow+0x9be>
 800a296:	f001 0101 	and.w	r1, r1, #1
 800a29a:	f1c1 0302 	rsb	r3, r1, #2
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	b182      	cbz	r2, 800a2c4 <__ieee754_pow+0xbc>
 800a2a2:	e05e      	b.n	800a362 <__ieee754_pow+0x15a>
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	d15a      	bne.n	800a35e <__ieee754_pow+0x156>
 800a2a8:	f1c3 0314 	rsb	r3, r3, #20
 800a2ac:	fa45 f103 	asr.w	r1, r5, r3
 800a2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b4:	42ab      	cmp	r3, r5
 800a2b6:	f040 8483 	bne.w	800abc0 <__ieee754_pow+0x9b8>
 800a2ba:	f001 0101 	and.w	r1, r1, #1
 800a2be:	f1c1 0302 	rsb	r3, r1, #2
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	4b59      	ldr	r3, [pc, #356]	; (800a42c <__ieee754_pow+0x224>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	d130      	bne.n	800a32c <__ieee754_pow+0x124>
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	f280 8474 	bge.w	800abb8 <__ieee754_pow+0x9b0>
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	4643      	mov	r3, r8
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	4955      	ldr	r1, [pc, #340]	; (800a42c <__ieee754_pow+0x224>)
 800a2d8:	f7f6 fa8c 	bl	80007f4 <__aeabi_ddiv>
 800a2dc:	e02f      	b.n	800a33e <__ieee754_pow+0x136>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d13d      	bne.n	800a362 <__ieee754_pow+0x15a>
 800a2e6:	4b4e      	ldr	r3, [pc, #312]	; (800a420 <__ieee754_pow+0x218>)
 800a2e8:	429d      	cmp	r5, r3
 800a2ea:	d1eb      	bne.n	800a2c4 <__ieee754_pow+0xbc>
 800a2ec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a2f0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a2f4:	ea53 030a 	orrs.w	r3, r3, sl
 800a2f8:	f000 8454 	beq.w	800aba4 <__ieee754_pow+0x99c>
 800a2fc:	4b4c      	ldr	r3, [pc, #304]	; (800a430 <__ieee754_pow+0x228>)
 800a2fe:	429c      	cmp	r4, r3
 800a300:	dd0d      	ble.n	800a31e <__ieee754_pow+0x116>
 800a302:	2e00      	cmp	r6, #0
 800a304:	f280 8454 	bge.w	800abb0 <__ieee754_pow+0x9a8>
 800a308:	f04f 0b00 	mov.w	fp, #0
 800a30c:	f04f 0c00 	mov.w	ip, #0
 800a310:	4658      	mov	r0, fp
 800a312:	4661      	mov	r1, ip
 800a314:	b013      	add	sp, #76	; 0x4c
 800a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	2302      	movs	r3, #2
 800a31c:	e7e0      	b.n	800a2e0 <__ieee754_pow+0xd8>
 800a31e:	2e00      	cmp	r6, #0
 800a320:	daf2      	bge.n	800a308 <__ieee754_pow+0x100>
 800a322:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a326:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a32a:	e7f1      	b.n	800a310 <__ieee754_pow+0x108>
 800a32c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a330:	d108      	bne.n	800a344 <__ieee754_pow+0x13c>
 800a332:	463a      	mov	r2, r7
 800a334:	4643      	mov	r3, r8
 800a336:	4638      	mov	r0, r7
 800a338:	4641      	mov	r1, r8
 800a33a:	f7f6 f931 	bl	80005a0 <__aeabi_dmul>
 800a33e:	4683      	mov	fp, r0
 800a340:	468c      	mov	ip, r1
 800a342:	e7e5      	b.n	800a310 <__ieee754_pow+0x108>
 800a344:	4b3b      	ldr	r3, [pc, #236]	; (800a434 <__ieee754_pow+0x22c>)
 800a346:	429e      	cmp	r6, r3
 800a348:	d10b      	bne.n	800a362 <__ieee754_pow+0x15a>
 800a34a:	f1b9 0f00 	cmp.w	r9, #0
 800a34e:	db08      	blt.n	800a362 <__ieee754_pow+0x15a>
 800a350:	4638      	mov	r0, r7
 800a352:	4641      	mov	r1, r8
 800a354:	b013      	add	sp, #76	; 0x4c
 800a356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	f000 bc6b 	b.w	800ac34 <__ieee754_sqrt>
 800a35e:	2300      	movs	r3, #0
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4638      	mov	r0, r7
 800a364:	4641      	mov	r1, r8
 800a366:	f000 fd3f 	bl	800ade8 <fabs>
 800a36a:	4683      	mov	fp, r0
 800a36c:	468c      	mov	ip, r1
 800a36e:	f1ba 0f00 	cmp.w	sl, #0
 800a372:	d129      	bne.n	800a3c8 <__ieee754_pow+0x1c0>
 800a374:	b124      	cbz	r4, 800a380 <__ieee754_pow+0x178>
 800a376:	4b2d      	ldr	r3, [pc, #180]	; (800a42c <__ieee754_pow+0x224>)
 800a378:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d123      	bne.n	800a3c8 <__ieee754_pow+0x1c0>
 800a380:	2e00      	cmp	r6, #0
 800a382:	da07      	bge.n	800a394 <__ieee754_pow+0x18c>
 800a384:	465a      	mov	r2, fp
 800a386:	4663      	mov	r3, ip
 800a388:	2000      	movs	r0, #0
 800a38a:	4928      	ldr	r1, [pc, #160]	; (800a42c <__ieee754_pow+0x224>)
 800a38c:	f7f6 fa32 	bl	80007f4 <__aeabi_ddiv>
 800a390:	4683      	mov	fp, r0
 800a392:	468c      	mov	ip, r1
 800a394:	f1b9 0f00 	cmp.w	r9, #0
 800a398:	daba      	bge.n	800a310 <__ieee754_pow+0x108>
 800a39a:	9b00      	ldr	r3, [sp, #0]
 800a39c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3a4:	4323      	orrs	r3, r4
 800a3a6:	d108      	bne.n	800a3ba <__ieee754_pow+0x1b2>
 800a3a8:	465a      	mov	r2, fp
 800a3aa:	4663      	mov	r3, ip
 800a3ac:	4658      	mov	r0, fp
 800a3ae:	4661      	mov	r1, ip
 800a3b0:	f7f5 ff3e 	bl	8000230 <__aeabi_dsub>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	e78e      	b.n	800a2d8 <__ieee754_pow+0xd0>
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d1a7      	bne.n	800a310 <__ieee754_pow+0x108>
 800a3c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a3c4:	469c      	mov	ip, r3
 800a3c6:	e7a3      	b.n	800a310 <__ieee754_pow+0x108>
 800a3c8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	d104      	bne.n	800a3e2 <__ieee754_pow+0x1da>
 800a3d8:	463a      	mov	r2, r7
 800a3da:	4643      	mov	r3, r8
 800a3dc:	4638      	mov	r0, r7
 800a3de:	4641      	mov	r1, r8
 800a3e0:	e7e6      	b.n	800a3b0 <__ieee754_pow+0x1a8>
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <__ieee754_pow+0x230>)
 800a3e4:	429d      	cmp	r5, r3
 800a3e6:	f340 80f9 	ble.w	800a5dc <__ieee754_pow+0x3d4>
 800a3ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a3ee:	429d      	cmp	r5, r3
 800a3f0:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <__ieee754_pow+0x228>)
 800a3f2:	dd09      	ble.n	800a408 <__ieee754_pow+0x200>
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	dc0c      	bgt.n	800a412 <__ieee754_pow+0x20a>
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	da85      	bge.n	800a308 <__ieee754_pow+0x100>
 800a3fc:	a306      	add	r3, pc, #24	; (adr r3, 800a418 <__ieee754_pow+0x210>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	4610      	mov	r0, r2
 800a404:	4619      	mov	r1, r3
 800a406:	e798      	b.n	800a33a <__ieee754_pow+0x132>
 800a408:	429c      	cmp	r4, r3
 800a40a:	dbf5      	blt.n	800a3f8 <__ieee754_pow+0x1f0>
 800a40c:	4b07      	ldr	r3, [pc, #28]	; (800a42c <__ieee754_pow+0x224>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	dd14      	ble.n	800a43c <__ieee754_pow+0x234>
 800a412:	2e00      	cmp	r6, #0
 800a414:	dcf2      	bgt.n	800a3fc <__ieee754_pow+0x1f4>
 800a416:	e777      	b.n	800a308 <__ieee754_pow+0x100>
 800a418:	8800759c 	.word	0x8800759c
 800a41c:	7e37e43c 	.word	0x7e37e43c
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	0800b248 	.word	0x0800b248
 800a428:	433fffff 	.word	0x433fffff
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	3fefffff 	.word	0x3fefffff
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	41e00000 	.word	0x41e00000
 800a43c:	4661      	mov	r1, ip
 800a43e:	2200      	movs	r2, #0
 800a440:	4658      	mov	r0, fp
 800a442:	4b61      	ldr	r3, [pc, #388]	; (800a5c8 <__ieee754_pow+0x3c0>)
 800a444:	f7f5 fef4 	bl	8000230 <__aeabi_dsub>
 800a448:	a355      	add	r3, pc, #340	; (adr r3, 800a5a0 <__ieee754_pow+0x398>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	4604      	mov	r4, r0
 800a450:	460d      	mov	r5, r1
 800a452:	f7f6 f8a5 	bl	80005a0 <__aeabi_dmul>
 800a456:	a354      	add	r3, pc, #336	; (adr r3, 800a5a8 <__ieee754_pow+0x3a0>)
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7f6 f89c 	bl	80005a0 <__aeabi_dmul>
 800a468:	2200      	movs	r2, #0
 800a46a:	4682      	mov	sl, r0
 800a46c:	468b      	mov	fp, r1
 800a46e:	4620      	mov	r0, r4
 800a470:	4629      	mov	r1, r5
 800a472:	4b56      	ldr	r3, [pc, #344]	; (800a5cc <__ieee754_pow+0x3c4>)
 800a474:	f7f6 f894 	bl	80005a0 <__aeabi_dmul>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	a14c      	add	r1, pc, #304	; (adr r1, 800a5b0 <__ieee754_pow+0x3a8>)
 800a47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a482:	f7f5 fed5 	bl	8000230 <__aeabi_dsub>
 800a486:	4622      	mov	r2, r4
 800a488:	462b      	mov	r3, r5
 800a48a:	f7f6 f889 	bl	80005a0 <__aeabi_dmul>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	2000      	movs	r0, #0
 800a494:	494e      	ldr	r1, [pc, #312]	; (800a5d0 <__ieee754_pow+0x3c8>)
 800a496:	f7f5 fecb 	bl	8000230 <__aeabi_dsub>
 800a49a:	4622      	mov	r2, r4
 800a49c:	462b      	mov	r3, r5
 800a49e:	4680      	mov	r8, r0
 800a4a0:	4689      	mov	r9, r1
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	f7f6 f87b 	bl	80005a0 <__aeabi_dmul>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	f7f6 f875 	bl	80005a0 <__aeabi_dmul>
 800a4b6:	a340      	add	r3, pc, #256	; (adr r3, 800a5b8 <__ieee754_pow+0x3b0>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f6 f870 	bl	80005a0 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	4659      	mov	r1, fp
 800a4c8:	f7f5 feb2 	bl	8000230 <__aeabi_dsub>
 800a4cc:	f04f 0a00 	mov.w	sl, #0
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	4630      	mov	r0, r6
 800a4da:	4639      	mov	r1, r7
 800a4dc:	f7f5 feaa 	bl	8000234 <__adddf3>
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	468b      	mov	fp, r1
 800a4e8:	f7f5 fea2 	bl	8000230 <__aeabi_dsub>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	f7f5 fe9c 	bl	8000230 <__aeabi_dsub>
 800a4f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a500:	3b01      	subs	r3, #1
 800a502:	4313      	orrs	r3, r2
 800a504:	f04f 0600 	mov.w	r6, #0
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	bf0c      	ite	eq
 800a50e:	4b31      	ldreq	r3, [pc, #196]	; (800a5d4 <__ieee754_pow+0x3cc>)
 800a510:	4b2d      	ldrne	r3, [pc, #180]	; (800a5c8 <__ieee754_pow+0x3c0>)
 800a512:	4604      	mov	r4, r0
 800a514:	460d      	mov	r5, r1
 800a516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a51a:	e9cd 2300 	strd	r2, r3, [sp]
 800a51e:	4632      	mov	r2, r6
 800a520:	463b      	mov	r3, r7
 800a522:	f7f5 fe85 	bl	8000230 <__aeabi_dsub>
 800a526:	4652      	mov	r2, sl
 800a528:	465b      	mov	r3, fp
 800a52a:	f7f6 f839 	bl	80005a0 <__aeabi_dmul>
 800a52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a532:	4680      	mov	r8, r0
 800a534:	4689      	mov	r9, r1
 800a536:	4620      	mov	r0, r4
 800a538:	4629      	mov	r1, r5
 800a53a:	f7f6 f831 	bl	80005a0 <__aeabi_dmul>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4640      	mov	r0, r8
 800a544:	4649      	mov	r1, r9
 800a546:	f7f5 fe75 	bl	8000234 <__adddf3>
 800a54a:	4632      	mov	r2, r6
 800a54c:	463b      	mov	r3, r7
 800a54e:	4680      	mov	r8, r0
 800a550:	4689      	mov	r9, r1
 800a552:	4650      	mov	r0, sl
 800a554:	4659      	mov	r1, fp
 800a556:	f7f6 f823 	bl	80005a0 <__aeabi_dmul>
 800a55a:	4604      	mov	r4, r0
 800a55c:	460d      	mov	r5, r1
 800a55e:	460b      	mov	r3, r1
 800a560:	4602      	mov	r2, r0
 800a562:	4649      	mov	r1, r9
 800a564:	4640      	mov	r0, r8
 800a566:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a56a:	f7f5 fe63 	bl	8000234 <__adddf3>
 800a56e:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <__ieee754_pow+0x3d0>)
 800a570:	4682      	mov	sl, r0
 800a572:	4299      	cmp	r1, r3
 800a574:	460f      	mov	r7, r1
 800a576:	460e      	mov	r6, r1
 800a578:	f340 82ed 	ble.w	800ab56 <__ieee754_pow+0x94e>
 800a57c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a580:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a584:	4303      	orrs	r3, r0
 800a586:	f000 81e7 	beq.w	800a958 <__ieee754_pow+0x750>
 800a58a:	a30d      	add	r3, pc, #52	; (adr r3, 800a5c0 <__ieee754_pow+0x3b8>)
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a594:	f7f6 f804 	bl	80005a0 <__aeabi_dmul>
 800a598:	a309      	add	r3, pc, #36	; (adr r3, 800a5c0 <__ieee754_pow+0x3b8>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	e6cc      	b.n	800a33a <__ieee754_pow+0x132>
 800a5a0:	60000000 	.word	0x60000000
 800a5a4:	3ff71547 	.word	0x3ff71547
 800a5a8:	f85ddf44 	.word	0xf85ddf44
 800a5ac:	3e54ae0b 	.word	0x3e54ae0b
 800a5b0:	55555555 	.word	0x55555555
 800a5b4:	3fd55555 	.word	0x3fd55555
 800a5b8:	652b82fe 	.word	0x652b82fe
 800a5bc:	3ff71547 	.word	0x3ff71547
 800a5c0:	8800759c 	.word	0x8800759c
 800a5c4:	7e37e43c 	.word	0x7e37e43c
 800a5c8:	3ff00000 	.word	0x3ff00000
 800a5cc:	3fd00000 	.word	0x3fd00000
 800a5d0:	3fe00000 	.word	0x3fe00000
 800a5d4:	bff00000 	.word	0xbff00000
 800a5d8:	408fffff 	.word	0x408fffff
 800a5dc:	4bd4      	ldr	r3, [pc, #848]	; (800a930 <__ieee754_pow+0x728>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	ea09 0303 	and.w	r3, r9, r3
 800a5e4:	b943      	cbnz	r3, 800a5f8 <__ieee754_pow+0x3f0>
 800a5e6:	4658      	mov	r0, fp
 800a5e8:	4661      	mov	r1, ip
 800a5ea:	4bd2      	ldr	r3, [pc, #840]	; (800a934 <__ieee754_pow+0x72c>)
 800a5ec:	f7f5 ffd8 	bl	80005a0 <__aeabi_dmul>
 800a5f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a5f4:	4683      	mov	fp, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	1523      	asrs	r3, r4, #20
 800a5fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a5fe:	4413      	add	r3, r2
 800a600:	930b      	str	r3, [sp, #44]	; 0x2c
 800a602:	4bcd      	ldr	r3, [pc, #820]	; (800a938 <__ieee754_pow+0x730>)
 800a604:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a608:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a60c:	429c      	cmp	r4, r3
 800a60e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a612:	dd08      	ble.n	800a626 <__ieee754_pow+0x41e>
 800a614:	4bc9      	ldr	r3, [pc, #804]	; (800a93c <__ieee754_pow+0x734>)
 800a616:	429c      	cmp	r4, r3
 800a618:	f340 819c 	ble.w	800a954 <__ieee754_pow+0x74c>
 800a61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a61e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a622:	3301      	adds	r3, #1
 800a624:	930b      	str	r3, [sp, #44]	; 0x2c
 800a626:	2600      	movs	r6, #0
 800a628:	00f3      	lsls	r3, r6, #3
 800a62a:	930d      	str	r3, [sp, #52]	; 0x34
 800a62c:	4bc4      	ldr	r3, [pc, #784]	; (800a940 <__ieee754_pow+0x738>)
 800a62e:	4658      	mov	r0, fp
 800a630:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a634:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a638:	4629      	mov	r1, r5
 800a63a:	461a      	mov	r2, r3
 800a63c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a640:	4623      	mov	r3, r4
 800a642:	f7f5 fdf5 	bl	8000230 <__aeabi_dsub>
 800a646:	46da      	mov	sl, fp
 800a648:	462b      	mov	r3, r5
 800a64a:	4652      	mov	r2, sl
 800a64c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a650:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a654:	f7f5 fdee 	bl	8000234 <__adddf3>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	2000      	movs	r0, #0
 800a65e:	49b9      	ldr	r1, [pc, #740]	; (800a944 <__ieee754_pow+0x73c>)
 800a660:	f7f6 f8c8 	bl	80007f4 <__aeabi_ddiv>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a66c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a670:	f7f5 ff96 	bl	80005a0 <__aeabi_dmul>
 800a674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a678:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a67c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a680:	2300      	movs	r3, #0
 800a682:	2200      	movs	r2, #0
 800a684:	46ab      	mov	fp, r5
 800a686:	106d      	asrs	r5, r5, #1
 800a688:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a692:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a696:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	4614      	mov	r4, r2
 800a6a0:	461d      	mov	r5, r3
 800a6a2:	f7f5 ff7d 	bl	80005a0 <__aeabi_dmul>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6ae:	f7f5 fdbf 	bl	8000230 <__aeabi_dsub>
 800a6b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	4629      	mov	r1, r5
 800a6be:	f7f5 fdb7 	bl	8000230 <__aeabi_dsub>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	4659      	mov	r1, fp
 800a6ca:	f7f5 fdb1 	bl	8000230 <__aeabi_dsub>
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	f7f5 ff65 	bl	80005a0 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4630      	mov	r0, r6
 800a6dc:	4639      	mov	r1, r7
 800a6de:	f7f5 fda7 	bl	8000230 <__aeabi_dsub>
 800a6e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6e6:	f7f5 ff5b 	bl	80005a0 <__aeabi_dmul>
 800a6ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f7f5 ff53 	bl	80005a0 <__aeabi_dmul>
 800a6fa:	a37b      	add	r3, pc, #492	; (adr r3, 800a8e8 <__ieee754_pow+0x6e0>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	f7f5 ff4c 	bl	80005a0 <__aeabi_dmul>
 800a708:	a379      	add	r3, pc, #484	; (adr r3, 800a8f0 <__ieee754_pow+0x6e8>)
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f7f5 fd91 	bl	8000234 <__adddf3>
 800a712:	4622      	mov	r2, r4
 800a714:	462b      	mov	r3, r5
 800a716:	f7f5 ff43 	bl	80005a0 <__aeabi_dmul>
 800a71a:	a377      	add	r3, pc, #476	; (adr r3, 800a8f8 <__ieee754_pow+0x6f0>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 fd88 	bl	8000234 <__adddf3>
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	f7f5 ff3a 	bl	80005a0 <__aeabi_dmul>
 800a72c:	a374      	add	r3, pc, #464	; (adr r3, 800a900 <__ieee754_pow+0x6f8>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f7f5 fd7f 	bl	8000234 <__adddf3>
 800a736:	4622      	mov	r2, r4
 800a738:	462b      	mov	r3, r5
 800a73a:	f7f5 ff31 	bl	80005a0 <__aeabi_dmul>
 800a73e:	a372      	add	r3, pc, #456	; (adr r3, 800a908 <__ieee754_pow+0x700>)
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	f7f5 fd76 	bl	8000234 <__adddf3>
 800a748:	4622      	mov	r2, r4
 800a74a:	462b      	mov	r3, r5
 800a74c:	f7f5 ff28 	bl	80005a0 <__aeabi_dmul>
 800a750:	a36f      	add	r3, pc, #444	; (adr r3, 800a910 <__ieee754_pow+0x708>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 fd6d 	bl	8000234 <__adddf3>
 800a75a:	4622      	mov	r2, r4
 800a75c:	4606      	mov	r6, r0
 800a75e:	460f      	mov	r7, r1
 800a760:	462b      	mov	r3, r5
 800a762:	4620      	mov	r0, r4
 800a764:	4629      	mov	r1, r5
 800a766:	f7f5 ff1b 	bl	80005a0 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 ff15 	bl	80005a0 <__aeabi_dmul>
 800a776:	4604      	mov	r4, r0
 800a778:	460d      	mov	r5, r1
 800a77a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a77e:	4642      	mov	r2, r8
 800a780:	464b      	mov	r3, r9
 800a782:	f7f5 fd57 	bl	8000234 <__adddf3>
 800a786:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a78a:	f7f5 ff09 	bl	80005a0 <__aeabi_dmul>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 fd4f 	bl	8000234 <__adddf3>
 800a796:	4642      	mov	r2, r8
 800a798:	4606      	mov	r6, r0
 800a79a:	460f      	mov	r7, r1
 800a79c:	464b      	mov	r3, r9
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	f7f5 fefd 	bl	80005a0 <__aeabi_dmul>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4b67      	ldr	r3, [pc, #412]	; (800a948 <__ieee754_pow+0x740>)
 800a7aa:	4682      	mov	sl, r0
 800a7ac:	468b      	mov	fp, r1
 800a7ae:	f7f5 fd41 	bl	8000234 <__adddf3>
 800a7b2:	4632      	mov	r2, r6
 800a7b4:	463b      	mov	r3, r7
 800a7b6:	f7f5 fd3d 	bl	8000234 <__adddf3>
 800a7ba:	9c04      	ldr	r4, [sp, #16]
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4622      	mov	r2, r4
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	f7f5 feeb 	bl	80005a0 <__aeabi_dmul>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4b5c      	ldr	r3, [pc, #368]	; (800a948 <__ieee754_pow+0x740>)
 800a7d6:	f7f5 fd2b 	bl	8000230 <__aeabi_dsub>
 800a7da:	4652      	mov	r2, sl
 800a7dc:	465b      	mov	r3, fp
 800a7de:	f7f5 fd27 	bl	8000230 <__aeabi_dsub>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 fd21 	bl	8000230 <__aeabi_dsub>
 800a7ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7f2:	f7f5 fed5 	bl	80005a0 <__aeabi_dmul>
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a800:	462b      	mov	r3, r5
 800a802:	f7f5 fecd 	bl	80005a0 <__aeabi_dmul>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f5 fd11 	bl	8000234 <__adddf3>
 800a812:	4606      	mov	r6, r0
 800a814:	460f      	mov	r7, r1
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	f7f5 fd09 	bl	8000234 <__adddf3>
 800a822:	a33d      	add	r3, pc, #244	; (adr r3, 800a918 <__ieee754_pow+0x710>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	9c04      	ldr	r4, [sp, #16]
 800a82a:	460d      	mov	r5, r1
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7f5 feb7 	bl	80005a0 <__aeabi_dmul>
 800a832:	4642      	mov	r2, r8
 800a834:	464b      	mov	r3, r9
 800a836:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a83a:	4620      	mov	r0, r4
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f5 fcf7 	bl	8000230 <__aeabi_dsub>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4630      	mov	r0, r6
 800a848:	4639      	mov	r1, r7
 800a84a:	f7f5 fcf1 	bl	8000230 <__aeabi_dsub>
 800a84e:	a334      	add	r3, pc, #208	; (adr r3, 800a920 <__ieee754_pow+0x718>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fea4 	bl	80005a0 <__aeabi_dmul>
 800a858:	a333      	add	r3, pc, #204	; (adr r3, 800a928 <__ieee754_pow+0x720>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	4606      	mov	r6, r0
 800a860:	460f      	mov	r7, r1
 800a862:	4620      	mov	r0, r4
 800a864:	4629      	mov	r1, r5
 800a866:	f7f5 fe9b 	bl	80005a0 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fcdf 	bl	8000234 <__adddf3>
 800a876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a878:	4b34      	ldr	r3, [pc, #208]	; (800a94c <__ieee754_pow+0x744>)
 800a87a:	4413      	add	r3, r2
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fcd8 	bl	8000234 <__adddf3>
 800a884:	4680      	mov	r8, r0
 800a886:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a888:	4689      	mov	r9, r1
 800a88a:	f7f5 fe1f 	bl	80004cc <__aeabi_i2d>
 800a88e:	4604      	mov	r4, r0
 800a890:	460d      	mov	r5, r1
 800a892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a894:	4b2e      	ldr	r3, [pc, #184]	; (800a950 <__ieee754_pow+0x748>)
 800a896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a89a:	4413      	add	r3, r2
 800a89c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	f7f5 fcc6 	bl	8000234 <__adddf3>
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	463b      	mov	r3, r7
 800a8ac:	f7f5 fcc2 	bl	8000234 <__adddf3>
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	f7f5 fcbe 	bl	8000234 <__adddf3>
 800a8b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a8bc:	4622      	mov	r2, r4
 800a8be:	462b      	mov	r3, r5
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	468b      	mov	fp, r1
 800a8c4:	f7f5 fcb4 	bl	8000230 <__aeabi_dsub>
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	f7f5 fcb0 	bl	8000230 <__aeabi_dsub>
 800a8d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8d4:	f7f5 fcac 	bl	8000230 <__aeabi_dsub>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4640      	mov	r0, r8
 800a8de:	4649      	mov	r1, r9
 800a8e0:	e608      	b.n	800a4f4 <__ieee754_pow+0x2ec>
 800a8e2:	bf00      	nop
 800a8e4:	f3af 8000 	nop.w
 800a8e8:	4a454eef 	.word	0x4a454eef
 800a8ec:	3fca7e28 	.word	0x3fca7e28
 800a8f0:	93c9db65 	.word	0x93c9db65
 800a8f4:	3fcd864a 	.word	0x3fcd864a
 800a8f8:	a91d4101 	.word	0xa91d4101
 800a8fc:	3fd17460 	.word	0x3fd17460
 800a900:	518f264d 	.word	0x518f264d
 800a904:	3fd55555 	.word	0x3fd55555
 800a908:	db6fabff 	.word	0xdb6fabff
 800a90c:	3fdb6db6 	.word	0x3fdb6db6
 800a910:	33333303 	.word	0x33333303
 800a914:	3fe33333 	.word	0x3fe33333
 800a918:	e0000000 	.word	0xe0000000
 800a91c:	3feec709 	.word	0x3feec709
 800a920:	dc3a03fd 	.word	0xdc3a03fd
 800a924:	3feec709 	.word	0x3feec709
 800a928:	145b01f5 	.word	0x145b01f5
 800a92c:	be3e2fe0 	.word	0xbe3e2fe0
 800a930:	7ff00000 	.word	0x7ff00000
 800a934:	43400000 	.word	0x43400000
 800a938:	0003988e 	.word	0x0003988e
 800a93c:	000bb679 	.word	0x000bb679
 800a940:	0800b250 	.word	0x0800b250
 800a944:	3ff00000 	.word	0x3ff00000
 800a948:	40080000 	.word	0x40080000
 800a94c:	0800b270 	.word	0x0800b270
 800a950:	0800b260 	.word	0x0800b260
 800a954:	2601      	movs	r6, #1
 800a956:	e667      	b.n	800a628 <__ieee754_pow+0x420>
 800a958:	a39d      	add	r3, pc, #628	; (adr r3, 800abd0 <__ieee754_pow+0x9c8>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fc67 	bl	8000234 <__adddf3>
 800a966:	4622      	mov	r2, r4
 800a968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a96c:	462b      	mov	r3, r5
 800a96e:	4650      	mov	r0, sl
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fc5d 	bl	8000230 <__aeabi_dsub>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a97e:	f7f6 f89f 	bl	8000ac0 <__aeabi_dcmpgt>
 800a982:	2800      	cmp	r0, #0
 800a984:	f47f ae01 	bne.w	800a58a <__ieee754_pow+0x382>
 800a988:	4aa5      	ldr	r2, [pc, #660]	; (800ac20 <__ieee754_pow+0xa18>)
 800a98a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a98e:	4293      	cmp	r3, r2
 800a990:	f340 8103 	ble.w	800ab9a <__ieee754_pow+0x992>
 800a994:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a998:	2000      	movs	r0, #0
 800a99a:	151b      	asrs	r3, r3, #20
 800a99c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a9a0:	fa4a f303 	asr.w	r3, sl, r3
 800a9a4:	4433      	add	r3, r6
 800a9a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a9aa:	4f9e      	ldr	r7, [pc, #632]	; (800ac24 <__ieee754_pow+0xa1c>)
 800a9ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a9b0:	4117      	asrs	r7, r2
 800a9b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a9b6:	ea23 0107 	bic.w	r1, r3, r7
 800a9ba:	f1c2 0214 	rsb	r2, r2, #20
 800a9be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	fa4a fa02 	asr.w	sl, sl, r2
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	bfb8      	it	lt
 800a9d2:	f1ca 0a00 	rsblt	sl, sl, #0
 800a9d6:	f7f5 fc2b 	bl	8000230 <__aeabi_dsub>
 800a9da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9e2:	2400      	movs	r4, #0
 800a9e4:	4642      	mov	r2, r8
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	f7f5 fc24 	bl	8000234 <__adddf3>
 800a9ec:	a37a      	add	r3, pc, #488	; (adr r3, 800abd8 <__ieee754_pow+0x9d0>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	f7f5 fdd3 	bl	80005a0 <__aeabi_dmul>
 800a9fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	4620      	mov	r0, r4
 800aa04:	4629      	mov	r1, r5
 800aa06:	f7f5 fc13 	bl	8000230 <__aeabi_dsub>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f5 fc0d 	bl	8000230 <__aeabi_dsub>
 800aa16:	a372      	add	r3, pc, #456	; (adr r3, 800abe0 <__ieee754_pow+0x9d8>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fdc0 	bl	80005a0 <__aeabi_dmul>
 800aa20:	a371      	add	r3, pc, #452	; (adr r3, 800abe8 <__ieee754_pow+0x9e0>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	4680      	mov	r8, r0
 800aa28:	4689      	mov	r9, r1
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7f5 fdb7 	bl	80005a0 <__aeabi_dmul>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	4640      	mov	r0, r8
 800aa38:	4649      	mov	r1, r9
 800aa3a:	f7f5 fbfb 	bl	8000234 <__adddf3>
 800aa3e:	4604      	mov	r4, r0
 800aa40:	460d      	mov	r5, r1
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f5 fbf3 	bl	8000234 <__adddf3>
 800aa4e:	4632      	mov	r2, r6
 800aa50:	463b      	mov	r3, r7
 800aa52:	4680      	mov	r8, r0
 800aa54:	4689      	mov	r9, r1
 800aa56:	f7f5 fbeb 	bl	8000230 <__aeabi_dsub>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4620      	mov	r0, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	f7f5 fbe5 	bl	8000230 <__aeabi_dsub>
 800aa66:	4642      	mov	r2, r8
 800aa68:	4606      	mov	r6, r0
 800aa6a:	460f      	mov	r7, r1
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	4640      	mov	r0, r8
 800aa70:	4649      	mov	r1, r9
 800aa72:	f7f5 fd95 	bl	80005a0 <__aeabi_dmul>
 800aa76:	a35e      	add	r3, pc, #376	; (adr r3, 800abf0 <__ieee754_pow+0x9e8>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	460d      	mov	r5, r1
 800aa80:	f7f5 fd8e 	bl	80005a0 <__aeabi_dmul>
 800aa84:	a35c      	add	r3, pc, #368	; (adr r3, 800abf8 <__ieee754_pow+0x9f0>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fbd1 	bl	8000230 <__aeabi_dsub>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	462b      	mov	r3, r5
 800aa92:	f7f5 fd85 	bl	80005a0 <__aeabi_dmul>
 800aa96:	a35a      	add	r3, pc, #360	; (adr r3, 800ac00 <__ieee754_pow+0x9f8>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f7f5 fbca 	bl	8000234 <__adddf3>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	f7f5 fd7c 	bl	80005a0 <__aeabi_dmul>
 800aaa8:	a357      	add	r3, pc, #348	; (adr r3, 800ac08 <__ieee754_pow+0xa00>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fbbf 	bl	8000230 <__aeabi_dsub>
 800aab2:	4622      	mov	r2, r4
 800aab4:	462b      	mov	r3, r5
 800aab6:	f7f5 fd73 	bl	80005a0 <__aeabi_dmul>
 800aaba:	a355      	add	r3, pc, #340	; (adr r3, 800ac10 <__ieee754_pow+0xa08>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbb8 	bl	8000234 <__adddf3>
 800aac4:	4622      	mov	r2, r4
 800aac6:	462b      	mov	r3, r5
 800aac8:	f7f5 fd6a 	bl	80005a0 <__aeabi_dmul>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4640      	mov	r0, r8
 800aad2:	4649      	mov	r1, r9
 800aad4:	f7f5 fbac 	bl	8000230 <__aeabi_dsub>
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4640      	mov	r0, r8
 800aae2:	4649      	mov	r1, r9
 800aae4:	f7f5 fd5c 	bl	80005a0 <__aeabi_dmul>
 800aae8:	2200      	movs	r2, #0
 800aaea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	f7f5 fb9b 	bl	8000230 <__aeabi_dsub>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab02:	f7f5 fe77 	bl	80007f4 <__aeabi_ddiv>
 800ab06:	4632      	mov	r2, r6
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	4640      	mov	r0, r8
 800ab10:	4649      	mov	r1, r9
 800ab12:	f7f5 fd45 	bl	80005a0 <__aeabi_dmul>
 800ab16:	4632      	mov	r2, r6
 800ab18:	463b      	mov	r3, r7
 800ab1a:	f7f5 fb8b 	bl	8000234 <__adddf3>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4620      	mov	r0, r4
 800ab24:	4629      	mov	r1, r5
 800ab26:	f7f5 fb83 	bl	8000230 <__aeabi_dsub>
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	f7f5 fb7f 	bl	8000230 <__aeabi_dsub>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	2000      	movs	r0, #0
 800ab38:	493b      	ldr	r1, [pc, #236]	; (800ac28 <__ieee754_pow+0xa20>)
 800ab3a:	f7f5 fb79 	bl	8000230 <__aeabi_dsub>
 800ab3e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ab42:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ab46:	da2b      	bge.n	800aba0 <__ieee754_pow+0x998>
 800ab48:	4652      	mov	r2, sl
 800ab4a:	f000 f9e9 	bl	800af20 <scalbn>
 800ab4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab52:	f7ff bbf2 	b.w	800a33a <__ieee754_pow+0x132>
 800ab56:	4b35      	ldr	r3, [pc, #212]	; (800ac2c <__ieee754_pow+0xa24>)
 800ab58:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ab5c:	429f      	cmp	r7, r3
 800ab5e:	f77f af13 	ble.w	800a988 <__ieee754_pow+0x780>
 800ab62:	4b33      	ldr	r3, [pc, #204]	; (800ac30 <__ieee754_pow+0xa28>)
 800ab64:	440b      	add	r3, r1
 800ab66:	4303      	orrs	r3, r0
 800ab68:	d00b      	beq.n	800ab82 <__ieee754_pow+0x97a>
 800ab6a:	a32b      	add	r3, pc, #172	; (adr r3, 800ac18 <__ieee754_pow+0xa10>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab74:	f7f5 fd14 	bl	80005a0 <__aeabi_dmul>
 800ab78:	a327      	add	r3, pc, #156	; (adr r3, 800ac18 <__ieee754_pow+0xa10>)
 800ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7e:	f7ff bbdc 	b.w	800a33a <__ieee754_pow+0x132>
 800ab82:	4622      	mov	r2, r4
 800ab84:	462b      	mov	r3, r5
 800ab86:	f7f5 fb53 	bl	8000230 <__aeabi_dsub>
 800ab8a:	4642      	mov	r2, r8
 800ab8c:	464b      	mov	r3, r9
 800ab8e:	f7f5 ff8d 	bl	8000aac <__aeabi_dcmpge>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f43f aef8 	beq.w	800a988 <__ieee754_pow+0x780>
 800ab98:	e7e7      	b.n	800ab6a <__ieee754_pow+0x962>
 800ab9a:	f04f 0a00 	mov.w	sl, #0
 800ab9e:	e71e      	b.n	800a9de <__ieee754_pow+0x7d6>
 800aba0:	4621      	mov	r1, r4
 800aba2:	e7d4      	b.n	800ab4e <__ieee754_pow+0x946>
 800aba4:	f04f 0b00 	mov.w	fp, #0
 800aba8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ac28 <__ieee754_pow+0xa20>
 800abac:	f7ff bbb0 	b.w	800a310 <__ieee754_pow+0x108>
 800abb0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800abb4:	f7ff bbac 	b.w	800a310 <__ieee754_pow+0x108>
 800abb8:	4638      	mov	r0, r7
 800abba:	4641      	mov	r1, r8
 800abbc:	f7ff bbbf 	b.w	800a33e <__ieee754_pow+0x136>
 800abc0:	9200      	str	r2, [sp, #0]
 800abc2:	f7ff bb7f 	b.w	800a2c4 <__ieee754_pow+0xbc>
 800abc6:	2300      	movs	r3, #0
 800abc8:	f7ff bb69 	b.w	800a29e <__ieee754_pow+0x96>
 800abcc:	f3af 8000 	nop.w
 800abd0:	652b82fe 	.word	0x652b82fe
 800abd4:	3c971547 	.word	0x3c971547
 800abd8:	00000000 	.word	0x00000000
 800abdc:	3fe62e43 	.word	0x3fe62e43
 800abe0:	fefa39ef 	.word	0xfefa39ef
 800abe4:	3fe62e42 	.word	0x3fe62e42
 800abe8:	0ca86c39 	.word	0x0ca86c39
 800abec:	be205c61 	.word	0xbe205c61
 800abf0:	72bea4d0 	.word	0x72bea4d0
 800abf4:	3e663769 	.word	0x3e663769
 800abf8:	c5d26bf1 	.word	0xc5d26bf1
 800abfc:	3ebbbd41 	.word	0x3ebbbd41
 800ac00:	af25de2c 	.word	0xaf25de2c
 800ac04:	3f11566a 	.word	0x3f11566a
 800ac08:	16bebd93 	.word	0x16bebd93
 800ac0c:	3f66c16c 	.word	0x3f66c16c
 800ac10:	5555553e 	.word	0x5555553e
 800ac14:	3fc55555 	.word	0x3fc55555
 800ac18:	c2f8f359 	.word	0xc2f8f359
 800ac1c:	01a56e1f 	.word	0x01a56e1f
 800ac20:	3fe00000 	.word	0x3fe00000
 800ac24:	000fffff 	.word	0x000fffff
 800ac28:	3ff00000 	.word	0x3ff00000
 800ac2c:	4090cbff 	.word	0x4090cbff
 800ac30:	3f6f3400 	.word	0x3f6f3400

0800ac34 <__ieee754_sqrt>:
 800ac34:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ad88 <__ieee754_sqrt+0x154>
 800ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3c:	ea3c 0c01 	bics.w	ip, ip, r1
 800ac40:	460b      	mov	r3, r1
 800ac42:	4606      	mov	r6, r0
 800ac44:	460d      	mov	r5, r1
 800ac46:	460a      	mov	r2, r1
 800ac48:	4607      	mov	r7, r0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	d10e      	bne.n	800ac6c <__ieee754_sqrt+0x38>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	f7f5 fca6 	bl	80005a0 <__aeabi_dmul>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	f7f5 faea 	bl	8000234 <__adddf3>
 800ac60:	4606      	mov	r6, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	4630      	mov	r0, r6
 800ac66:	4629      	mov	r1, r5
 800ac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	dc0d      	bgt.n	800ac8c <__ieee754_sqrt+0x58>
 800ac70:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ac74:	ea5c 0707 	orrs.w	r7, ip, r7
 800ac78:	d0f4      	beq.n	800ac64 <__ieee754_sqrt+0x30>
 800ac7a:	b139      	cbz	r1, 800ac8c <__ieee754_sqrt+0x58>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	f7f5 fad7 	bl	8000230 <__aeabi_dsub>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	f7f5 fdb5 	bl	80007f4 <__aeabi_ddiv>
 800ac8a:	e7e9      	b.n	800ac60 <__ieee754_sqrt+0x2c>
 800ac8c:	1512      	asrs	r2, r2, #20
 800ac8e:	d074      	beq.n	800ad7a <__ieee754_sqrt+0x146>
 800ac90:	2000      	movs	r0, #0
 800ac92:	07d5      	lsls	r5, r2, #31
 800ac94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac98:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ac9c:	bf5e      	ittt	pl
 800ac9e:	0fe3      	lsrpl	r3, r4, #31
 800aca0:	0064      	lslpl	r4, r4, #1
 800aca2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800aca6:	0fe3      	lsrs	r3, r4, #31
 800aca8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800acac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800acb0:	2516      	movs	r5, #22
 800acb2:	4601      	mov	r1, r0
 800acb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800acb8:	1076      	asrs	r6, r6, #1
 800acba:	0064      	lsls	r4, r4, #1
 800acbc:	188f      	adds	r7, r1, r2
 800acbe:	429f      	cmp	r7, r3
 800acc0:	bfde      	ittt	le
 800acc2:	1bdb      	suble	r3, r3, r7
 800acc4:	18b9      	addle	r1, r7, r2
 800acc6:	1880      	addle	r0, r0, r2
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	3d01      	subs	r5, #1
 800accc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800acd0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800acd4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800acd8:	d1f0      	bne.n	800acbc <__ieee754_sqrt+0x88>
 800acda:	462a      	mov	r2, r5
 800acdc:	f04f 0e20 	mov.w	lr, #32
 800ace0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ace4:	428b      	cmp	r3, r1
 800ace6:	eb07 0c05 	add.w	ip, r7, r5
 800acea:	dc02      	bgt.n	800acf2 <__ieee754_sqrt+0xbe>
 800acec:	d113      	bne.n	800ad16 <__ieee754_sqrt+0xe2>
 800acee:	45a4      	cmp	ip, r4
 800acf0:	d811      	bhi.n	800ad16 <__ieee754_sqrt+0xe2>
 800acf2:	f1bc 0f00 	cmp.w	ip, #0
 800acf6:	eb0c 0507 	add.w	r5, ip, r7
 800acfa:	da43      	bge.n	800ad84 <__ieee754_sqrt+0x150>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	db41      	blt.n	800ad84 <__ieee754_sqrt+0x150>
 800ad00:	f101 0801 	add.w	r8, r1, #1
 800ad04:	1a5b      	subs	r3, r3, r1
 800ad06:	4641      	mov	r1, r8
 800ad08:	45a4      	cmp	ip, r4
 800ad0a:	bf88      	it	hi
 800ad0c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad10:	eba4 040c 	sub.w	r4, r4, ip
 800ad14:	443a      	add	r2, r7
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	f1be 0e01 	subs.w	lr, lr, #1
 800ad1c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ad20:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ad24:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ad28:	d1dc      	bne.n	800ace4 <__ieee754_sqrt+0xb0>
 800ad2a:	4323      	orrs	r3, r4
 800ad2c:	d006      	beq.n	800ad3c <__ieee754_sqrt+0x108>
 800ad2e:	1c54      	adds	r4, r2, #1
 800ad30:	bf0b      	itete	eq
 800ad32:	4672      	moveq	r2, lr
 800ad34:	3201      	addne	r2, #1
 800ad36:	3001      	addeq	r0, #1
 800ad38:	f022 0201 	bicne.w	r2, r2, #1
 800ad3c:	1043      	asrs	r3, r0, #1
 800ad3e:	07c1      	lsls	r1, r0, #31
 800ad40:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ad44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad4c:	bf48      	it	mi
 800ad4e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ad52:	4610      	mov	r0, r2
 800ad54:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ad58:	e782      	b.n	800ac60 <__ieee754_sqrt+0x2c>
 800ad5a:	0ae3      	lsrs	r3, r4, #11
 800ad5c:	3915      	subs	r1, #21
 800ad5e:	0564      	lsls	r4, r4, #21
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0fa      	beq.n	800ad5a <__ieee754_sqrt+0x126>
 800ad64:	02de      	lsls	r6, r3, #11
 800ad66:	d50a      	bpl.n	800ad7e <__ieee754_sqrt+0x14a>
 800ad68:	f1c2 0020 	rsb	r0, r2, #32
 800ad6c:	fa24 f000 	lsr.w	r0, r4, r0
 800ad70:	1e55      	subs	r5, r2, #1
 800ad72:	4094      	lsls	r4, r2
 800ad74:	4303      	orrs	r3, r0
 800ad76:	1b4a      	subs	r2, r1, r5
 800ad78:	e78a      	b.n	800ac90 <__ieee754_sqrt+0x5c>
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	e7f0      	b.n	800ad60 <__ieee754_sqrt+0x12c>
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	3201      	adds	r2, #1
 800ad82:	e7ef      	b.n	800ad64 <__ieee754_sqrt+0x130>
 800ad84:	4688      	mov	r8, r1
 800ad86:	e7bd      	b.n	800ad04 <__ieee754_sqrt+0xd0>
 800ad88:	7ff00000 	.word	0x7ff00000

0800ad8c <with_errnof>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	f000 f953 	bl	800b03c <__errno>
 800ad96:	6005      	str	r5, [r0, #0]
 800ad98:	4620      	mov	r0, r4
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}

0800ad9c <__math_divzerof>:
 800ad9c:	b508      	push	{r3, lr}
 800ad9e:	b948      	cbnz	r0, 800adb4 <__math_divzerof+0x18>
 800ada0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ada4:	2100      	movs	r1, #0
 800ada6:	f7f6 f895 	bl	8000ed4 <__aeabi_fdiv>
 800adaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800adae:	2122      	movs	r1, #34	; 0x22
 800adb0:	f7ff bfec 	b.w	800ad8c <with_errnof>
 800adb4:	4800      	ldr	r0, [pc, #0]	; (800adb8 <__math_divzerof+0x1c>)
 800adb6:	e7f5      	b.n	800ada4 <__math_divzerof+0x8>
 800adb8:	bf800000 	.word	0xbf800000

0800adbc <__math_invalidf>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4601      	mov	r1, r0
 800adc0:	4605      	mov	r5, r0
 800adc2:	f7f5 fec9 	bl	8000b58 <__aeabi_fsub>
 800adc6:	4601      	mov	r1, r0
 800adc8:	f7f6 f884 	bl	8000ed4 <__aeabi_fdiv>
 800adcc:	4629      	mov	r1, r5
 800adce:	4604      	mov	r4, r0
 800add0:	4628      	mov	r0, r5
 800add2:	f7f6 f991 	bl	80010f8 <__aeabi_fcmpun>
 800add6:	b928      	cbnz	r0, 800ade4 <__math_invalidf+0x28>
 800add8:	4620      	mov	r0, r4
 800adda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adde:	2121      	movs	r1, #33	; 0x21
 800ade0:	f7ff bfd4 	b.w	800ad8c <with_errnof>
 800ade4:	4620      	mov	r0, r4
 800ade6:	bd38      	pop	{r3, r4, r5, pc}

0800ade8 <fabs>:
 800ade8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800adec:	4770      	bx	lr

0800adee <finite>:
 800adee:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800adf2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800adf6:	0fc0      	lsrs	r0, r0, #31
 800adf8:	4770      	bx	lr
	...

0800adfc <nan>:
 800adfc:	2000      	movs	r0, #0
 800adfe:	4901      	ldr	r1, [pc, #4]	; (800ae04 <nan+0x8>)
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	7ff80000 	.word	0x7ff80000

0800ae08 <rint>:
 800ae08:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800ae0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae0e:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ae12:	2f13      	cmp	r7, #19
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	460c      	mov	r4, r1
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ae20:	dc59      	bgt.n	800aed6 <rint+0xce>
 800ae22:	2f00      	cmp	r7, #0
 800ae24:	da2a      	bge.n	800ae7c <rint+0x74>
 800ae26:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae2a:	4301      	orrs	r1, r0
 800ae2c:	d022      	beq.n	800ae74 <rint+0x6c>
 800ae2e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ae32:	4301      	orrs	r1, r0
 800ae34:	424d      	negs	r5, r1
 800ae36:	430d      	orrs	r5, r1
 800ae38:	4936      	ldr	r1, [pc, #216]	; (800af14 <rint+0x10c>)
 800ae3a:	0c5c      	lsrs	r4, r3, #17
 800ae3c:	0b2d      	lsrs	r5, r5, #12
 800ae3e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ae42:	0464      	lsls	r4, r4, #17
 800ae44:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae48:	ea45 0304 	orr.w	r3, r5, r4
 800ae4c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ae50:	4620      	mov	r0, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	f7f5 f9ee 	bl	8000234 <__adddf3>
 800ae58:	e9cd 0100 	strd	r0, r1, [sp]
 800ae5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae60:	462b      	mov	r3, r5
 800ae62:	4622      	mov	r2, r4
 800ae64:	f7f5 f9e4 	bl	8000230 <__aeabi_dsub>
 800ae68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae6c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4610      	mov	r0, r2
 800ae76:	4619      	mov	r1, r3
 800ae78:	b003      	add	sp, #12
 800ae7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae7c:	4926      	ldr	r1, [pc, #152]	; (800af18 <rint+0x110>)
 800ae7e:	4139      	asrs	r1, r7
 800ae80:	ea03 0001 	and.w	r0, r3, r1
 800ae84:	4310      	orrs	r0, r2
 800ae86:	d0f5      	beq.n	800ae74 <rint+0x6c>
 800ae88:	084b      	lsrs	r3, r1, #1
 800ae8a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ae8e:	ea52 0501 	orrs.w	r5, r2, r1
 800ae92:	d00c      	beq.n	800aeae <rint+0xa6>
 800ae94:	ea24 0303 	bic.w	r3, r4, r3
 800ae98:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ae9c:	2f13      	cmp	r7, #19
 800ae9e:	bf0c      	ite	eq
 800aea0:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800aea4:	2500      	movne	r5, #0
 800aea6:	fa44 f707 	asr.w	r7, r4, r7
 800aeaa:	ea43 0407 	orr.w	r4, r3, r7
 800aeae:	4919      	ldr	r1, [pc, #100]	; (800af14 <rint+0x10c>)
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800aeb6:	462a      	mov	r2, r5
 800aeb8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 f9b8 	bl	8000234 <__adddf3>
 800aec4:	e9cd 0100 	strd	r0, r1, [sp]
 800aec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aecc:	4622      	mov	r2, r4
 800aece:	462b      	mov	r3, r5
 800aed0:	f7f5 f9ae 	bl	8000230 <__aeabi_dsub>
 800aed4:	e7cc      	b.n	800ae70 <rint+0x68>
 800aed6:	2f33      	cmp	r7, #51	; 0x33
 800aed8:	dd05      	ble.n	800aee6 <rint+0xde>
 800aeda:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800aede:	d1c9      	bne.n	800ae74 <rint+0x6c>
 800aee0:	f7f5 f9a8 	bl	8000234 <__adddf3>
 800aee4:	e7c4      	b.n	800ae70 <rint+0x68>
 800aee6:	f04f 31ff 	mov.w	r1, #4294967295
 800aeea:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800aeee:	fa21 f10c 	lsr.w	r1, r1, ip
 800aef2:	4208      	tst	r0, r1
 800aef4:	d0be      	beq.n	800ae74 <rint+0x6c>
 800aef6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800aefa:	bf18      	it	ne
 800aefc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800af00:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800af04:	bf1e      	ittt	ne
 800af06:	ea20 0303 	bicne.w	r3, r0, r3
 800af0a:	fa45 fc0c 	asrne.w	ip, r5, ip
 800af0e:	ea43 050c 	orrne.w	r5, r3, ip
 800af12:	e7cc      	b.n	800aeae <rint+0xa6>
 800af14:	0800b280 	.word	0x0800b280
 800af18:	000fffff 	.word	0x000fffff
 800af1c:	00000000 	.word	0x00000000

0800af20 <scalbn>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800af26:	4604      	mov	r4, r0
 800af28:	460d      	mov	r5, r1
 800af2a:	4617      	mov	r7, r2
 800af2c:	460b      	mov	r3, r1
 800af2e:	b996      	cbnz	r6, 800af56 <scalbn+0x36>
 800af30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af34:	4303      	orrs	r3, r0
 800af36:	d039      	beq.n	800afac <scalbn+0x8c>
 800af38:	4b35      	ldr	r3, [pc, #212]	; (800b010 <scalbn+0xf0>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	f7f5 fb30 	bl	80005a0 <__aeabi_dmul>
 800af40:	4b34      	ldr	r3, [pc, #208]	; (800b014 <scalbn+0xf4>)
 800af42:	4604      	mov	r4, r0
 800af44:	429f      	cmp	r7, r3
 800af46:	460d      	mov	r5, r1
 800af48:	da0f      	bge.n	800af6a <scalbn+0x4a>
 800af4a:	a32d      	add	r3, pc, #180	; (adr r3, 800b000 <scalbn+0xe0>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 fb26 	bl	80005a0 <__aeabi_dmul>
 800af54:	e006      	b.n	800af64 <scalbn+0x44>
 800af56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800af5a:	4296      	cmp	r6, r2
 800af5c:	d10a      	bne.n	800af74 <scalbn+0x54>
 800af5e:	4602      	mov	r2, r0
 800af60:	f7f5 f968 	bl	8000234 <__adddf3>
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	e020      	b.n	800afac <scalbn+0x8c>
 800af6a:	460b      	mov	r3, r1
 800af6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800af74:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800af78:	19b9      	adds	r1, r7, r6
 800af7a:	4291      	cmp	r1, r2
 800af7c:	dd0e      	ble.n	800af9c <scalbn+0x7c>
 800af7e:	a322      	add	r3, pc, #136	; (adr r3, 800b008 <scalbn+0xe8>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800af88:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800af8c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800af90:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800af94:	4820      	ldr	r0, [pc, #128]	; (800b018 <scalbn+0xf8>)
 800af96:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800af9a:	e7d9      	b.n	800af50 <scalbn+0x30>
 800af9c:	2900      	cmp	r1, #0
 800af9e:	dd08      	ble.n	800afb2 <scalbn+0x92>
 800afa0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afa8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800afac:	4620      	mov	r0, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800afb6:	da16      	bge.n	800afe6 <scalbn+0xc6>
 800afb8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afbc:	429f      	cmp	r7, r3
 800afbe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800afc2:	dd08      	ble.n	800afd6 <scalbn+0xb6>
 800afc4:	4c15      	ldr	r4, [pc, #84]	; (800b01c <scalbn+0xfc>)
 800afc6:	4814      	ldr	r0, [pc, #80]	; (800b018 <scalbn+0xf8>)
 800afc8:	f363 74df 	bfi	r4, r3, #31, #1
 800afcc:	a30e      	add	r3, pc, #56	; (adr r3, 800b008 <scalbn+0xe8>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	4621      	mov	r1, r4
 800afd4:	e7bc      	b.n	800af50 <scalbn+0x30>
 800afd6:	4c12      	ldr	r4, [pc, #72]	; (800b020 <scalbn+0x100>)
 800afd8:	4812      	ldr	r0, [pc, #72]	; (800b024 <scalbn+0x104>)
 800afda:	f363 74df 	bfi	r4, r3, #31, #1
 800afde:	a308      	add	r3, pc, #32	; (adr r3, 800b000 <scalbn+0xe0>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	e7f5      	b.n	800afd2 <scalbn+0xb2>
 800afe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afea:	3136      	adds	r1, #54	; 0x36
 800afec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aff0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800aff4:	4620      	mov	r0, r4
 800aff6:	4629      	mov	r1, r5
 800aff8:	2200      	movs	r2, #0
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <scalbn+0x108>)
 800affc:	e7a8      	b.n	800af50 <scalbn+0x30>
 800affe:	bf00      	nop
 800b000:	c2f8f359 	.word	0xc2f8f359
 800b004:	01a56e1f 	.word	0x01a56e1f
 800b008:	8800759c 	.word	0x8800759c
 800b00c:	7e37e43c 	.word	0x7e37e43c
 800b010:	43500000 	.word	0x43500000
 800b014:	ffff3cb0 	.word	0xffff3cb0
 800b018:	8800759c 	.word	0x8800759c
 800b01c:	7e37e43c 	.word	0x7e37e43c
 800b020:	01a56e1f 	.word	0x01a56e1f
 800b024:	c2f8f359 	.word	0xc2f8f359
 800b028:	3c900000 	.word	0x3c900000

0800b02c <abort>:
 800b02c:	2006      	movs	r0, #6
 800b02e:	b508      	push	{r3, lr}
 800b030:	f000 f86c 	bl	800b10c <raise>
 800b034:	2001      	movs	r0, #1
 800b036:	f7fa fb08 	bl	800564a <_exit>
	...

0800b03c <__errno>:
 800b03c:	4b01      	ldr	r3, [pc, #4]	; (800b044 <__errno+0x8>)
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	20000014 	.word	0x20000014

0800b048 <__libc_init_array>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	2600      	movs	r6, #0
 800b04c:	4d0c      	ldr	r5, [pc, #48]	; (800b080 <__libc_init_array+0x38>)
 800b04e:	4c0d      	ldr	r4, [pc, #52]	; (800b084 <__libc_init_array+0x3c>)
 800b050:	1b64      	subs	r4, r4, r5
 800b052:	10a4      	asrs	r4, r4, #2
 800b054:	42a6      	cmp	r6, r4
 800b056:	d109      	bne.n	800b06c <__libc_init_array+0x24>
 800b058:	f000 f874 	bl	800b144 <_init>
 800b05c:	2600      	movs	r6, #0
 800b05e:	4d0a      	ldr	r5, [pc, #40]	; (800b088 <__libc_init_array+0x40>)
 800b060:	4c0a      	ldr	r4, [pc, #40]	; (800b08c <__libc_init_array+0x44>)
 800b062:	1b64      	subs	r4, r4, r5
 800b064:	10a4      	asrs	r4, r4, #2
 800b066:	42a6      	cmp	r6, r4
 800b068:	d105      	bne.n	800b076 <__libc_init_array+0x2e>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b070:	4798      	blx	r3
 800b072:	3601      	adds	r6, #1
 800b074:	e7ee      	b.n	800b054 <__libc_init_array+0xc>
 800b076:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07a:	4798      	blx	r3
 800b07c:	3601      	adds	r6, #1
 800b07e:	e7f2      	b.n	800b066 <__libc_init_array+0x1e>
 800b080:	0800b290 	.word	0x0800b290
 800b084:	0800b290 	.word	0x0800b290
 800b088:	0800b290 	.word	0x0800b290
 800b08c:	0800b298 	.word	0x0800b298

0800b090 <memcpy>:
 800b090:	440a      	add	r2, r1
 800b092:	4291      	cmp	r1, r2
 800b094:	f100 33ff 	add.w	r3, r0, #4294967295
 800b098:	d100      	bne.n	800b09c <memcpy+0xc>
 800b09a:	4770      	bx	lr
 800b09c:	b510      	push	{r4, lr}
 800b09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a2:	4291      	cmp	r1, r2
 800b0a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0a8:	d1f9      	bne.n	800b09e <memcpy+0xe>
 800b0aa:	bd10      	pop	{r4, pc}

0800b0ac <memset>:
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	4402      	add	r2, r0
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <memset+0xa>
 800b0b4:	4770      	bx	lr
 800b0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ba:	e7f9      	b.n	800b0b0 <memset+0x4>

0800b0bc <_raise_r>:
 800b0bc:	291f      	cmp	r1, #31
 800b0be:	b538      	push	{r3, r4, r5, lr}
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	d904      	bls.n	800b0d0 <_raise_r+0x14>
 800b0c6:	2316      	movs	r3, #22
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0d2:	b112      	cbz	r2, 800b0da <_raise_r+0x1e>
 800b0d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0d8:	b94b      	cbnz	r3, 800b0ee <_raise_r+0x32>
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f830 	bl	800b140 <_getpid_r>
 800b0e0:	462a      	mov	r2, r5
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ea:	f000 b817 	b.w	800b11c <_kill_r>
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d00a      	beq.n	800b108 <_raise_r+0x4c>
 800b0f2:	1c59      	adds	r1, r3, #1
 800b0f4:	d103      	bne.n	800b0fe <_raise_r+0x42>
 800b0f6:	2316      	movs	r3, #22
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	2001      	movs	r0, #1
 800b0fc:	e7e7      	b.n	800b0ce <_raise_r+0x12>
 800b0fe:	2400      	movs	r4, #0
 800b100:	4628      	mov	r0, r5
 800b102:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b106:	4798      	blx	r3
 800b108:	2000      	movs	r0, #0
 800b10a:	e7e0      	b.n	800b0ce <_raise_r+0x12>

0800b10c <raise>:
 800b10c:	4b02      	ldr	r3, [pc, #8]	; (800b118 <raise+0xc>)
 800b10e:	4601      	mov	r1, r0
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	f7ff bfd3 	b.w	800b0bc <_raise_r>
 800b116:	bf00      	nop
 800b118:	20000014 	.word	0x20000014

0800b11c <_kill_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	2300      	movs	r3, #0
 800b120:	4d06      	ldr	r5, [pc, #24]	; (800b13c <_kill_r+0x20>)
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	4611      	mov	r1, r2
 800b128:	602b      	str	r3, [r5, #0]
 800b12a:	f7fa fa7e 	bl	800562a <_kill>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	d102      	bne.n	800b138 <_kill_r+0x1c>
 800b132:	682b      	ldr	r3, [r5, #0]
 800b134:	b103      	cbz	r3, 800b138 <_kill_r+0x1c>
 800b136:	6023      	str	r3, [r4, #0]
 800b138:	bd38      	pop	{r3, r4, r5, pc}
 800b13a:	bf00      	nop
 800b13c:	20000368 	.word	0x20000368

0800b140 <_getpid_r>:
 800b140:	f7fa ba6c 	b.w	800561c <_getpid>

0800b144 <_init>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	bf00      	nop
 800b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14a:	bc08      	pop	{r3}
 800b14c:	469e      	mov	lr, r3
 800b14e:	4770      	bx	lr

0800b150 <_fini>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr
